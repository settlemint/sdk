---
description: 
globs: 
alwaysApply: true
---
# Troubleshooting & Common Issues

## TypeScript Issues

### Import Path Resolution
- Convert relative imports to `@/*` aliases where possible
- Ensure proper module resolution in monorepo context
- Use workspace protocol for internal package dependencies

### Type Safety Patterns
- Always use `satisfies` for configuration objects
- Implement proper error types for async operations
- Use type guards for runtime validation

## Build Issues

### External Dependencies
- Large dependencies (`viem`, `ethers`, `graphql`) should be externalized
- Always externalize `@settlemint/sdk-*` workspace packages
- Use `createSmartExternal()` for automatic detection

### Environment Variables
- Distinguish between build-time and runtime environment handling
- Use empty strings for build-time Zod validation
- Implement proper runtime validation patterns

## Development Workflow

### Linter Errors
- Fix type compatibility issues before proceeding
- Use proper TypeScript patterns for configuration objects
- Ensure all exported functions have proper documentation

### Testing
- Individual package tests within each SDK package
- Use shared test utilities from [test/](mdc:test)
- Implement proper error boundary testing

### Performance
- Monitor bundle sizes with `ANALYZE_BUNDLE=true`
- Use tree-shaking for utility packages
- Optimize external dependency handling

## GraphQL Schema Integration
- Support multiple schema types (Hasura, The Graph, Portal, Blockscout)
- Use proper type generation with gql.tada
- Maintain schema cache for performance

## Database Schema Typing
- Ensure type safety across multiple Drizzle schemas
- Implement proper error handling for database operations
- Use proper TypeScript patterns for schema definitions
