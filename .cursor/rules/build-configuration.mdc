---
description: 
globs: 
alwaysApply: true
---
# Build Configuration Patterns

## Tsdown Factory Usage
The project uses a centralized build configuration in [shared/tsdown-factory.ts](mdc:shared/tsdown-factory.ts).

## Available Configuration Functions

### Core Configurations
- `createConfig(options: ConfigOptions)` - Base configuration creator
- `createMultiConfig(configs: ConfigOptions[])` - Multiple configuration builder

### Package-Specific Builders
- `createNodePackage(entry, options)` - Standard Node.js packages (CJS + ESM)
- `createBrowserPackage(entry, options)` - Browser-optimized packages (ESM only)
- `createCLIPackage(entry, options)` - CLI executables with shebang
- `createUtilsPackage(modules, options)` - Utilities with tree-shaking support
- `createWebOptimizedPackage(entry, options)` - Both Node.js and browser builds

## Common Patterns

### Standard Package Build
```typescript
import { createNodePackage } from "../../shared/tsdown-factory";

export default createNodePackage(["src/index.ts"]);
```

### CLI Package Build
```typescript
import { createCLIPackage } from "../../shared/tsdown-factory";

export default createCLIPackage(["src/cli.ts"], {
  external: ["some-external-dep"]
});
```

### Multi-Target Package
```typescript
import { createWebOptimizedPackage } from "../../shared/tsdown-factory";

export default createWebOptimizedPackage(["src/index.ts"]);
```

## Environment Variables
- `NODE_ENV=production` - Enables minification and optimizations
- `ANALYZE_BUNDLE=true` - Enables bundle analysis output

## External Dependencies
- Use `createSmartExternal()` for automatic external dependency detection
- Always externalize `@settlemint/sdk-*` workspace packages
- Large deps like `viem`, `ethers`, `graphql` are externalized by default
