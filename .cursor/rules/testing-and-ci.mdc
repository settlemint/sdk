---
description: 
globs: 
alwaysApply: true
---
# Testing & CI Patterns

## Test Execution Workflow
Based on [.github/workflows/build.yml](mdc:.github/workflows/build.yml), the project follows a comprehensive testing pipeline.

## Core Testing Commands

### Turbo-Based Testing Pipeline
```bash
# Full CI pipeline (matches GitHub Actions)
bunx turbo lint typecheck build attw publint test:coverage publish-npm --env-mode=loose

# Individual commands
bunx turbo lint          # ESLint across all packages
bunx turbo typecheck     # TypeScript type checking
bunx turbo build         # Build all packages
bunx turbo test:coverage # Run tests with coverage
bun test:typecheck       # Check E2E test typings
```

### Package Quality Checks
- **attw**: Are The Types Wrong? - validates TypeScript declaration files
- **publint**: Validates package.json and exports for publishing
- **Coverage**: Comprehensive test coverage reporting

## Environment Setup

### Development Dependencies
- **Bun**: Primary package manager and test runner
- **Node.js**: Runtime compatibility (specified in package.json)
- **Foundry**: Solidity development framework for smart contracts
- **node-gyp**: Native module compilation

### Cache Strategy
```yaml
# Cache paths from workflows
./.turbo                 # Turbo build cache
~/.bun/install/cache     # Bun package cache
```

## Testing Types

### Unit & Integration Tests
- Location: Individual `src/` directories in each package
- Command: `bun test` or `bunx turbo test:coverage`
- Coverage: Comprehensive coverage reports required

### End-to-End Testing
Based on [.github/workflows/e2e.yml](mdc:.github/workflows/e2e.yml):

```bash
bun test:e2e             # Full E2E test suite
bun test:typecheck       # E2E TypeScript validation
```

### E2E Test Environment Variables
The E2E tests require extensive SettleMint platform configuration:
- `SETTLEMINT_ACCESS_TOKEN_E2E_TESTS`
- `SETTLEMINT_INSTANCE`
- Blockchain network configurations
- IPFS, MinIO, Blockscout endpoints
- Portal and Hasura GraphQL endpoints
- Private key management

### Security Testing
From [.github/workflows/codeql.yml](mdc:.github/workflows/codeql.yml):
- **CodeQL**: JavaScript/TypeScript security analysis
- Runs on every PR and scheduled weekly
- Build mode: `none` (static analysis)

## Version Management & Publishing

### Package Versioning
```bash
# Version update strategy from build workflow
OLD_VERSION=$(jq -r '.version' package.json)

# Release versions (tags): latest
# Main branch: {version}-main{sha}
# PR branches: {version}-pr{sha}
```

### Workspace Dependencies
- Updates all `workspace:*` dependencies to actual versions
- Maintains consistency across monorepo packages
- Updates both dependencies and devDependencies

## Documentation & Quality

### Auto-Generated Documentation
```bash
bun docs                 # Generate docs and README files
```

Auto-commits documentation updates on main branch:
- `sdk/cli/docs/settlemint.md`
- `sdk/cli/docs/**/*.md`
- `sdk/**/README.md`

## Local Development Testing

### Pre-Commit Checks
```bash
# Recommended local testing sequence
bun install              # Install dependencies
bunx turbo lint          # Check code style
bunx turbo typecheck     # Validate TypeScript
bunx turbo build         # Ensure clean builds
bunx turbo test          # Run unit tests
bun test:typecheck       # Validate E2E test types
```

### Performance Testing
- Bundle analysis with `ANALYZE_BUNDLE=true`
- Build performance monitoring in [shared/tsdown-factory.ts](mdc:shared/tsdown-factory.ts)
- Package size validation with publint

## CI/CD Triggers

### Automated Testing
- **Pull Requests**: Full test suite on every PR
- **Main Branch**: Full pipeline + documentation updates
- **Releases**: Version updates + NPM publishing
- **Scheduled**: E2E tests Monday-Friday at 6AM UTC
- **Manual**: E2E tests via workflow_dispatch

### E2E Test Management
- **Reset Workflow**: Daily cleanup at 6PM UTC
- **Workspace Management**: Automatic creation/deletion
- **Secret Management**: 1Password integration for credentials
- **Slack Notifications**: Test result reporting

## Troubleshooting Tests

### Common Issues
- **Type Errors**: Run `bunx turbo typecheck` to identify
- **Build Failures**: Check `bunx turbo build` output
- **E2E Failures**: Verify SettleMint platform connectivity
- **Coverage Issues**: Ensure all new code has proper tests

### Debug Commands
```bash
# Verbose testing
bunx turbo test --verbose
bunx turbo build --verbose

# Individual package testing
cd sdk/[package-name]
bun test

# E2E debugging
DISABLE_CONCURRENT_DEPLOYMENT=true bun test:e2e
```
