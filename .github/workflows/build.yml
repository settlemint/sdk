name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  test:
    name: Test and Build
    runs-on: namespace-profile-sdk
    strategy:
      matrix:
        pkg:
          - "cli"
          - "hasura"
          - "ipfs"
          - "js"
          - "minio"
          - "next"
          - "portal"
          - "thegraph"
          - "utils"
          - "registry"
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup caches
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ./.turbo
            ~/.bun/install/cache

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: package.json

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Bun dependencies
        run: bun install

      - name: Setup 1Password
        uses: settlemint/setup-op@main
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          version: 2.29.0

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Update package versions
        id: package-version
        run: |
          OLD_VERSION=$(jq -r '.version' package.json)
          echo "Old version: $OLD_VERSION"
          if [[ $GITHUB_REF_SLUG =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION=$(echo $GITHUB_REF_SLUG | sed 's/^v//')
            echo "TAG=latest" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console.settlemint.com/api/graphql" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == "main" ]]; then
            VERSION="${OLD_VERSION}-main$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=main" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console-release.settlemint.com/api/graphql" >> $GITHUB_ENV
          else
            VERSION="${OLD_VERSION}-pr$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=pr" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console-release.settlemint.com/api/graphql" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Updating version to $VERSION"
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json

          update_package_json() {
            local dir="$1"
            local version="$2"
            echo "Updating $dir/package.json version to $version and updating workspace dependencies"
            jq --arg version "$version" '
              .version = $version |
              (.dependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.devDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.peerDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end)
            ' "$dir/package.json" > "$dir/package.json.tmp" && mv "$dir/package.json.tmp" "$dir/package.json" || {
              echo "Error updating $dir/package.json"
              cat "$dir/package.json.tmp"
              exit 1
            }
          }

          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is not set"
            exit 1
          fi

          for dir in ./packages/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          for dir in ./apps/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          echo "Updated version to $VERSION"

      - name: Run tests and checks
        run: bunx turbo format lint build attw publint test:coverage --concurrency=100% --summarize --env-mode=loose --filter=@settlemint/sdk-${{ matrix.pkg }}
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          CONSOLE_GRAPHQL: ${{ env.CONSOLE_GRAPHQL }}

      - name: Make index
        if: ${{ matrix.pkg == 'registry' }}
        run: |
          echo "Creating index.html with list of JSON files in apps/registry/public/"
          cd apps/registry/public
          echo "<html><body><h1>Registry Files</h1><ul>" > index.html
          for file in *.json; do
            echo "<li>bunx shadcn@latest add https://settlemint.github.io/sdk/$file (<a href=\"$file\">$file</a>)</li>" >> index.html
          done
          echo "</ul></body></html>" >> index.html
          cd ../../..
          echo "Created index.html in apps/registry/public/"

      - name: Upload static files as artifact
        if: ${{ matrix.pkg == 'registry' }}
        id: deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/registry/public

      - name: Login to GitHub Container Registry
        if: ${{ matrix.pkg == 'registry' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        if: ${{ matrix.pkg == 'registry' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Generate Docker metadata
        if: ${{ matrix.pkg == 'registry' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/settlemint/btp-registry
          tags: |
            type=raw,value=${{ env.TAG }}
            type=raw,value=${{ env.VERSION }}

      - name: Build and push Docker image
        if: ${{ matrix.pkg == 'registry' }}
        uses: docker/build-push-action@v6
        with:
          context: ./apps/registry
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          provenance: mode=max
          sbom: true

      - name: Publish SDK JS package
        if: ${{ matrix.pkg != 'registry' }}
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./packages/${{ matrix.pkg }}/package.json
          access: public
          provenance: false
          strategy: all
          tag: ${{ env.TAG }}

      - name: Create or update PR comment
        if: ${{ github.event_name == 'pull_request' && matrix.pkg == 'registry' }}
        uses: taoliujun/action-unique-comment@v1
        with:
            uniqueIdentifier: ${{ github.workflow }}
            body: |
                # ðŸ“¦ Packages
                | Package | Version |
                | ------- | -------------------- |
                | SDK Cli | `@settlemint/sdk-cli@${{ env.VERSION }}` |
                | SDK The Graph | `@settlemint/sdk-thegraph@${{ env.VERSION }}` |
                | SDK Portal | `@settlemint/sdk-portal@${{ env.VERSION }}` |
                | SDK Hasura | `@settlemint/sdk-hasura@${{ env.VERSION }}` |
                | SDK JS | `@settlemint/sdk-js@${{ env.VERSION }}` |
                | SDK Utils | `@settlemint/sdk-utils@${{ env.VERSION }}` |
                | SDK Next | `@settlemint/sdk-next@${{ env.VERSION }}` |
                | SDK Minio | `@settlemint/sdk-minio@${{ env.VERSION }}` |
                | SDK IPFS | `@settlemint/sdk-ipfs@${{ env.VERSION }}` |

      - name: Auto-commit updated package versions
        uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ env.TAG == 'latest' && matrix.pkg == 'registry' }}
        with:
          commit_message: "chore: update package versions [skip ci]"
          branch: main
          file_pattern: 'package.json **/schema.graphql'

  deploy:
    if: ${{ github.event_name != 'pull_request' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4