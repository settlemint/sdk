name: Build, test and publish

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: read-all

jobs:
  packages:
    name: Turbo Flow
    runs-on: namespace-profile-sdk
    permissions: write-all
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@c95a14d0e5bab51a9f56296a4eb0e416910cd350 # v2.10.3
        with:
          egress-policy: audit

      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        env:
          NPM_TOKEN: op://platform/npmjs/credential
          PAT_TOKEN: op://platform/github-commit-pat/credential

      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@b8c45d632ce8118a5a0a51eb75a57cfccc74b8fa # v5
        with:
          token: ${{ env.PAT_TOKEN }}

      - name: Setup caches
        uses: namespacelabs/nscloud-cache-action@1d016dd6d40428050a16a6271307888386cc0bec # v1
        with:
          path: |
            ./.turbo
            ~/.bun/install/cache

      - name: Setup Bun
        uses: oven-sh/setup-bun@4bc047ad259df6fc24a6c9b0f9a0cb08cf17fbe5 # v2
        with:
          bun-version-file: .bun-version

      - name: Install Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4
        with:
          node-version-file: package.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Bun dependencies
        run: bun install

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@aba9f8db6ef36e0733227a62673d6592b1f430ea # v5

      - name: Update package versions
        id: package-version
        run: |
          OLD_VERSION=$(jq -r '.version' package.json)
          echo "Old version: $OLD_VERSION"
          if [[ $GITHUB_REF_SLUG =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION=$(echo $GITHUB_REF_SLUG | sed 's/^v//')
            echo "TAG=latest" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console.settlemint.com/api/graphql" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == "main" ]]; then
            VERSION="${OLD_VERSION}-main$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=main" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console-release.settlemint.com/api/graphql" >> $GITHUB_ENV
          else
            VERSION="${OLD_VERSION}-pr$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=pr" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console-release.settlemint.com/api/graphql" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Updating version to $VERSION"
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json

          update_package_json() {
            local dir="$1"
            local version="$2"
            echo "Updating $dir/package.json version to $version and updating workspace dependencies"
            jq --arg version "$version" '
              .version = $version |
              (.dependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.devDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.peerDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end)
            ' "$dir/package.json" > "$dir/package.json.tmp" && mv "$dir/package.json.tmp" "$dir/package.json" || {
              echo "Error updating $dir/package.json"
              cat "$dir/package.json.tmp"
              exit 1
            }
          }

          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is not set"
            exit 1
          fi

          for dir in ./sdk/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          for dir in ./apps/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          echo "Updated version to $VERSION"

      - name: Login to npm
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ env.NPM_TOKEN }}" >> ~/.npmrc

      - name: Update docs and README
        if: ${{ github.event_name != 'pull_request' }}
        run: bun docs

      - name: Auto-commit changes to docs and README
        if: ${{ github.ref == 'refs/heads/main' && env.TAG == 'main' }}
        uses: stefanzweifel/git-auto-commit-action@e348103e9026cc0eee72ae06630dbe30c8bf7a79 # v5
        with:
          commit_message: "chore: update docs [skip ci]"
          branch: main
          file_pattern: 'sdk/cli/docs/settlemint.md sdk/cli/docs/**/*.md sdk/**/README.md'

      - name: Run tests and checks
        run: bunx turbo lint typecheck build attw publint test:coverage publish-npm --env-mode=loose

      - name: Check typings of E2E tests
        run: bun test:typecheck

      - name: Create or update PR comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: taoliujun/action-unique-comment@95aa81645432e8f3f10cca47ae832a25f31a9d92 # v1
        with:
            uniqueIdentifier: ${{ github.workflow }}
            body: |
                # 📦 Packages
                | Package | NPM | Docker |
                | ------- | -------------------- | -------------------- |
                | SDK Cli | `@settlemint/sdk-cli@${{ env.VERSION }}` |  |
                | SDK The Graph | `@settlemint/sdk-thegraph@${{ env.VERSION }}` |  |
                | SDK Portal | `@settlemint/sdk-portal@${{ env.VERSION }}` |  |
                | SDK Hasura | `@settlemint/sdk-hasura@${{ env.VERSION }}` |  |
                | SDK JS | `@settlemint/sdk-js@${{ env.VERSION }}` |  |
                | SDK Utils | `@settlemint/sdk-utils@${{ env.VERSION }}` | |
                | SDK Next | `@settlemint/sdk-next@${{ env.VERSION }}` | |
                | SDK Minio | `@settlemint/sdk-minio@${{ env.VERSION }}` | |
                | SDK IPFS | `@settlemint/sdk-ipfs@${{ env.VERSION }}` | |
                | SDK Blockscout | `@settlemint/sdk-blockscout@${{ env.VERSION }}` | |

      - name: Auto-commit updated package versions
        uses: stefanzweifel/git-auto-commit-action@e348103e9026cc0eee72ae06630dbe30c8bf7a79 # v5
        if: ${{ env.TAG == 'latest' }}
        with:
          commit_message: "chore: update package versions [skip ci]"
          branch: main
          file_pattern: 'package.json **/schema.graphql sdk/cli/docs/settlemint.md sdk/cli/docs/**/*.md sdk/**/README.md'

  codeql:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: namespace-profile-sdk
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@b6a472f63d85b9c78a3ac5e89422239fc15e9b3c # v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@b6a472f63d85b9c78a3ac5e89422239fc15e9b3c # v3
      with:
        category: "/language:${{matrix.language}}"

  scorecard:
    name: Scorecard analysis
    runs-on: namespace-profile-sdk
    permissions:
      # Needed for Code scanning upload
      security-events: write
      # Needed for GitHub OIDC token if publish_results is true
      id-token: write

    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@b8c45d632ce8118a5a0a51eb75a57cfccc74b8fa # v5
        with:
          persist-credentials: false

      - name: "Run analysis"
        uses: ossf/scorecard-action@62b2cac7ed8198b15735ed49ab1e5cf35480ba46 # v2.4.0
        with:
          results_file: results.sarif
          results_format: sarif
          # Scorecard team runs a weekly scan of public GitHub repos,
          # see https://github.com/ossf/scorecard#public-data.
          # Setting `publish_results: true` helps us scale by leveraging your workflow to
          # extract the results instead of relying on our own infrastructure to run scans.
          # And it's free for you!
          publish_results: true

      # Upload the results as artifacts (optional). Commenting out will disable
      # uploads of run results in SARIF format to the repository Actions tab.
      # https://docs.github.com/en/actions/advanced-guides/storing-workflow-data-as-artifacts
      - name: "Upload artifact"
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      # Upload the results to GitHub's code scanning dashboard (optional).
      # Commenting out will disable upload of results to your repo's Code Scanning dashboard
      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@b6a472f63d85b9c78a3ac5e89422239fc15e9b3c # v3.28.1
        with:
          sarif_file: results.sarif