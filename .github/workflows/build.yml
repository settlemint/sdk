name: Build, test and publish

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]
  push:
    branches:
      - main
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  packages:
    name: Turbo Flow
    runs-on: namespace-profile-sdk
    if:
      github.event_name == 'push' || github.event.action == 'opened' ||
      github.event.action == 'synchronize'
    permissions:
      contents: write
      packages: write
      id-token: write
      pull-requests: write
    steps:
      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        env:
          NPM_TOKEN: op://platform/npmjs/credential
          PAT_TOKEN: op://platform/github-commit-pat/credential

      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@953fed31a6113cc2347ca69c9d823743c65bc84b # v7
        with:
          token: ${{ env.PAT_TOKEN }}

      - name: Setup caches
        uses: namespacelabs/nscloud-cache-action@449c929cd5138e6607e7e78458e88cc476e76f89 # v1
        with:
          path: |
            ./.turbo
            ~/.bun/install/cache

      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version-file: .bun-version

      - name: Install Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version-file: package.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Bun dependencies
        run: bun install

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@955b5ba4560860f8a633bd24190941f16016e42c # v5

      - name: Update package versions
        id: package-version
        run: |
          OLD_VERSION=$(jq -r '.version' package.json)
          echo "Old version: $OLD_VERSION"
          if [[ $GITHUB_REF_SLUG =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION=$(echo $GITHUB_REF_SLUG | sed 's/^v//')
            echo "TAG=latest" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console.settlemint.com/api/graphql" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == "main" ]]; then
            VERSION="${OLD_VERSION}-main$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=main" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console-release.settlemint.com/api/graphql" >> $GITHUB_ENV
          else
            VERSION="${OLD_VERSION}-pr$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=pr" >> $GITHUB_ENV
            echo "CONSOLE_GRAPHQL=https://console-release.settlemint.com/api/graphql" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Updating version to $VERSION"
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json

          update_package_json() {
            local dir="$1"
            local version="$2"
            echo "Updating $dir/package.json version to $version and updating workspace dependencies"
            jq --arg version "$version" '
              .version = $version |
              (.dependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.devDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.peerDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end)
            ' "$dir/package.json" > "$dir/package.json.tmp" && mv "$dir/package.json.tmp" "$dir/package.json" || {
              echo "Error updating $dir/package.json"
              cat "$dir/package.json.tmp"
              exit 1
            }
          }

          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is not set"
            exit 1
          fi

          for dir in ./sdk/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          for dir in ./apps/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          echo "Updated version to $VERSION"

      - name: Login to npm
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ env.NPM_TOKEN }}" >> ~/.npmrc

      - name: Update docs and README
        if: ${{ github.event_name != 'pull_request' }}
        run: bun docs

      - name: Auto-commit changes to docs and README
        if: ${{ github.ref == 'refs/heads/main' && env.TAG == 'main' }}
        uses: stefanzweifel/git-auto-commit-action@b863ae1933cb653a53c021fe36dbb774e1fb9403 # v5
        with:
          commit_message: "chore: update docs [skip ci]"
          branch: main
          file_pattern: 'sdk/cli/docs/settlemint.md sdk/cli/docs/**/*.md sdk/**/README.md'

      - name: Run tests and checks
        run: bunx turbo lint typecheck build attw publint test:coverage publish-npm --env-mode=loose

      - name: Check typings of E2E tests
        run: bun test:typecheck

      - name: Create or update PR comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: taoliujun/action-unique-comment@95aa81645432e8f3f10cca47ae832a25f31a9d92 # v1
        with:
            uniqueIdentifier: ${{ github.workflow }}
            body: |
                # 📦 Packages
                | Package | NPM | Docker |
                | ------- | -------------------- | -------------------- |
                | SDK Cli | `@settlemint/sdk-cli@${{ env.VERSION }}` |  |
                | SDK The Graph | `@settlemint/sdk-thegraph@${{ env.VERSION }}` |  |
                | SDK Portal | `@settlemint/sdk-portal@${{ env.VERSION }}` |  |
                | SDK Hasura | `@settlemint/sdk-hasura@${{ env.VERSION }}` |  |
                | SDK JS | `@settlemint/sdk-js@${{ env.VERSION }}` |  |
                | SDK Utils | `@settlemint/sdk-utils@${{ env.VERSION }}` | |
                | SDK Next | `@settlemint/sdk-next@${{ env.VERSION }}` | |
                | SDK Minio | `@settlemint/sdk-minio@${{ env.VERSION }}` | |
                | SDK IPFS | `@settlemint/sdk-ipfs@${{ env.VERSION }}` | |
                | SDK Blockscout | `@settlemint/sdk-blockscout@${{ env.VERSION }}` | |
                | SDK MCP | `@settlemint/sdk-mcp@${{ env.VERSION }}` | |

      - name: Auto-commit updated package versions
        uses: stefanzweifel/git-auto-commit-action@b863ae1933cb653a53c021fe36dbb774e1fb9403 # v5
        if: ${{ env.TAG == 'latest' }}
        with:
          commit_message: "chore: update package versions [skip ci]"
          branch: main
          file_pattern: 'package.json **/schema.graphql sdk/cli/docs/settlemint.md sdk/cli/docs/**/*.md sdk/**/README.md'

  labels:
    name: PR Labels
    runs-on: namespace-profile-sdk
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      issues: write
      pull-requests: write
      statuses: write
      checks: write
    steps:
      - uses: fuxingloh/multi-labeler@v4

  slack:
    name: Slack
    runs-on: namespace-profile-sdk
    needs: packages
    if: |
      github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]' &&
      github.event_name == 'pull_request' && always()
    steps:
      - name: Configure 1Password
        uses: 1password/load-secrets-action/configure@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        env:
          SLACK_BOT_TOKEN: op://platform/slack-bot/SLACK_BOT_TOKEN
          SLACK_CHANNEL_ID: op://platform/slack-bot/SLACK_CHANNEL_ID

      - name: Check for existing Slack message
        id: check_message
        if:
          ${{ github.event_name == 'pull_request' && github.event.pull_request
          != null && !github.event.pull_request.draft }}
        run: |
          # Check if there's an existing comment with Slack message timestamp
          COMMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
            | jq -r '.[] | select(.body | startswith("<!-- slack-ts:")) | .body' | head -1)

          if [ -n "$COMMENT" ]; then
            SLACK_TS=$(echo "$COMMENT" | sed -n 's/<!-- slack-ts:\(.*\) -->.*/\1/p')
            echo "slack_ts=$SLACK_TS" >> $GITHUB_OUTPUT
            echo "message_exists=true" >> $GITHUB_OUTPUT
          else
            echo "message_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Send or update Slack message
        id: slack_message
        if:
          ${{ github.event_name == 'pull_request' && github.event.pull_request
          != null && !github.event.pull_request.draft }}
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method:
            ${{ steps.check_message.outputs.message_exists == 'true' &&
            'chat.update' || 'chat.postMessage' }}
          token: ${{ env.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ env.SLACK_CHANNEL_ID }}",
              ${{ steps.check_message.outputs.message_exists == 'true' && format('"ts": "{0}",', steps.check_message.outputs.slack_ts) || '' }}
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ github.event.pull_request.merged == true && '🎉 Pull Request Merged' || (steps.check_message.outputs.message_exists == 'true' && '🔄 Pull Request Updated') || '🔍 New Pull Request Ready for Review' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Title:*\n${{ github.event.pull_request.title }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n👤 ${{ github.event.pull_request.user.login }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Reviewers:*\n👥 ${{ join(github.event.pull_request.requested_reviewers.*.login, ', ') }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*PR Status:*\n${{ github.event.pull_request.state == 'open' && '🟢 Open' || (github.event.pull_request.merged == true && '🎉 Merged') || '🔴 Closed' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*QA Status:*\n${{ needs.packages.result == 'success' && '✅ Passed' || needs.packages.result == 'failure' && '❌ Failed' || needs.packages.result == 'cancelled' && '🚫 Cancelled' || needs.packages.result == 'skipped' && '⏭️ Skipped' || '⏳ Running' }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Last Updated:*\n⏰ ${{ github.event.pull_request.updated_at }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n🔗 <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📖 View Pull Request"
                      },
                      "url": "${{ github.event.pull_request.html_url }}",
                      "style": "primary"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📁 View Files Changed"
                      },
                      "url": "${{ github.event.pull_request.html_url }}/files"
                    }
                  ]
                }
                              ]
              }

      - name: Store Slack message timestamp
        if: |
          steps.slack_message.outcome == 'success' &&
          steps.check_message.outputs.message_exists == 'false' &&
          steps.slack_message.outputs.ts != ''
        run: |
          # Create a comment with the Slack message timestamp for future updates
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" \
            -d "{\"body\": \"<!-- slack-ts:${{ steps.slack_message.outputs.ts }} -->\\n🤖 Slack notification sent for this PR\"}"
