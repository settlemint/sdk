name: Test

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

env:
  SETTLEMINT_PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

jobs:
  test:
    name: Test and Build
    runs-on: namespace-profile-sdk
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Setup caches
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ./.turbo
            ~/.bun/install/cache

      # - name: Launch docker-compose services
      #   shell: bash
      #   run: |
      #     if [[ -f docker-compose.yml ]]; then
      #       docker compose -f docker-compose.yml up -d --wait
      #     fi

      # - name: Install Hasura CLI
      #   run: curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash

      # - name: Apply Hasura migrations
      #   working-directory: apps/asset-tokenization/database
      #   run: |
      #     hasura migrate apply --all-databases
      #     hasura metadata apply

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: package.json

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: bun install

      - name: Setup 1Password
        uses: settlemint/setup-op@main
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          version: 2.29.0

      - name: Run tests and checks
        run: bunx turbo format lint build attw publint test:coverage --concurrency=100% --summarize --env-mode=loose

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - name: Update package versions
        id: package-version
        run: |
          OLD_VERSION=$(jq -r '.version' package.json)
          echo "Old version: $OLD_VERSION"
          if [[ $GITHUB_REF_SLUG =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION=$(echo $GITHUB_REF_SLUG | sed 's/^v//')
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == "main" ]]; then
            VERSION="${OLD_VERSION}-main$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=main" >> $GITHUB_ENV
          else
            VERSION="${OLD_VERSION}-pr$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=pr" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Updating version to $VERSION"
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json

          update_package_json() {
            local dir="$1"
            local version="$2"
            echo "Updating $dir/package.json version to $version and updating workspace dependencies"
            jq --arg version "$version" '
              .version = $version |
              (.dependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.devDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end) |
              (.peerDependencies) |= with_entries(if .value == "workspace:*" then .value = $version else . end)
            ' "$dir/package.json" > "$dir/package.json.tmp" && mv "$dir/package.json.tmp" "$dir/package.json" || {
              echo "Error updating $dir/package.json"
              cat "$dir/package.json.tmp"
              exit 1
            }
          }

          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is not set"
            exit 1
          fi

          for dir in ./packages/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          for dir in ./apps/*; do
            if [ -f "$dir/package.json" ]; then
              update_package_json "$dir" "$VERSION"
            fi
          done

          echo "Updated version to $VERSION"

      - name: Publish SDK package
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./packages/sdk/package.json
          access: public
          provenance: false
          strategy: all
          tag: ${{ env.TAG }}

      - name: Publish Asset Tokenization package
        uses: JS-DevTools/npm-publish@v3
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: ./apps/asset-tokenization/package.json
          access: public
          provenance: false
          strategy: all
          tag: ${{ env.TAG }}

      - name: Wait for NPM packages to be published
        run: |
          wait_for_package() {
            package=$1
            version=$2
            max_attempts=30
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              if npm view $package@$version version &>/dev/null; then
                echo "$package@$version is now available on NPM"
                return 0
              fi
              echo "Waiting for $package@$version to be available on NPM (attempt $attempt/$max_attempts)"
              sleep 10
              attempt=$((attempt + 1))
            done

            echo "Timeout: $package@$version is not available on NPM after $max_attempts attempts"
            return 1
          }

          wait_for_package "@settlemint/sdk" "$VERSION"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/settlemint/starterkit-asset-tokenization
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./apps/asset-tokenization
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true

      - name: Create or update PR comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: taoliujun/action-unique-comment@v1
        with:
            uniqueIdentifier: ${{ github.workflow }}
            body: |
                # ðŸ“¦ Packages
                | Package | Version |
                | ------- | -------------------- |
                | SDK | `@settlemint/sdk@${{ env.VERSION }}` |

                # ðŸš€ Starterkits
                | Use Case | NPM | Docker |
                | ------- | -------------------- | --- |
                | Asset tokenization | `@settlemint/starterkit-asset-tokenization@${{ env.VERSION }}` | `ghcr.io/settlemint/starterkit-asset-tokenization:${{ env.VERSION }}` |

      - name: Auto-commit updated package versions
        uses: stefanzweifel/git-auto-commit-action@v5
        if: ${{ env.TAG == 'latest' }}
        with:
          commit_message: "chore: update package versions [skip ci]"
          branch: main
          file_pattern: 'package.json'
