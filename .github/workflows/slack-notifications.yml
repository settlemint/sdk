name: Slack Notifications

# Note: workflow_run triggers only work for workflows that are already on the default branch (main).
# If this workflow file is being added in a PR, the workflow_run trigger won't work until merged.
on:
  workflow_run:
    workflows: ["build"]
    types: [completed]
  pull_request:
    branches:
      - main
    types: [assigned, unassigned, labeled, unlabeled, opened, edited, closed, reopened, synchronize, converted_to_draft, ready_for_review, locked, unlocked, review_requested, review_request_removed, auto_merge_enabled, auto_merge_disabled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  slack-notification:
    name: Send Slack Notification
    runs-on: namespace-profile-sdk
    if: |
      github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]' &&
      (github.event_name == 'pull_request' ||
       github.event_name == 'workflow_run')
    steps:
      - name: Debug workflow_run context
        if: github.event_name == 'workflow_run'
        run: |
          echo "Workflow run triggered!"
          echo "Triggering workflow: ${{ github.event.workflow_run.name }}"
          echo "Workflow ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow event: ${{ github.event.workflow_run.event }}"
          echo "Has pull_requests: ${{ github.event.workflow_run.pull_requests != null }}"
          echo "PR count: ${{ github.event.workflow_run.pull_requests && 'has PRs' || 'no PRs' }}"
          echo "Full context:"
          echo '${{ toJson(github.event.workflow_run) }}' | jq '.'

      - name: Configure 1Password
        uses: 1password/load-secrets-action/configure@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        env:
          SLACK_BOT_TOKEN: op://platform/slack-bot/SLACK_BOT_TOKEN
          SLACK_CHANNEL_ID: op://platform/slack-bot/SLACK_CHANNEL_ID

      - name: Get build workflow status and PR info
        id: build_status
        env:
          EVENT_NAME: ${{ github.event_name }}
          # Workflow run context
          WR_CONCLUSION: ${{ github.event.workflow_run.conclusion }}
          WR_HAS_PRS: ${{ github.event.workflow_run.pull_requests[0].number != null }}
          WR_PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
          WR_PR_TITLE: ${{ github.event.workflow_run.pull_requests[0].title || github.event.workflow_run.head_commit.message }}
          WR_PR_USER: ${{ github.event.workflow_run.pull_requests[0].user.login || github.event.workflow_run.actor.login }}
          WR_PR_HTML_URL: ${{ github.event.workflow_run.pull_requests[0].html_url }}
          WR_PR_STATE: ${{ github.event.workflow_run.pull_requests[0].state }}
          WR_PR_MERGED: ${{ github.event.workflow_run.pull_requests[0].merged }}
          WR_PR_UPDATED_AT: ${{ github.event.workflow_run.pull_requests[0].updated_at }}
          WR_PR_DRAFT: ${{ github.event.workflow_run.pull_requests[0].draft }}
          WR_PR_REVIEWERS: ${{ toJson(github.event.workflow_run.pull_requests[0].requested_reviewers) }}
          WR_HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
          WR_HEAD_SHA: ${{ github.event.workflow_run.head_sha }}
          WR_HEAD_COMMIT_MESSAGE: ${{ github.event.workflow_run.head_commit.message }}
          # Pull request context
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_USER: ${{ github.event.pull_request.user.login }}
          PR_HTML_URL: ${{ github.event.pull_request.html_url }}
          PR_STATE: ${{ github.event.pull_request.state }}
          PR_MERGED: ${{ github.event.pull_request.merged }}
          PR_UPDATED_AT: ${{ github.event.pull_request.updated_at }}
          PR_DRAFT: ${{ github.event.pull_request.draft }}
          PR_REVIEWERS: ${{ join(github.event.pull_request.requested_reviewers.*.login, ', ') }}
        run: |
          echo "Debug: Event name is $EVENT_NAME"
          echo "Debug: Workflow run event type: ${{ github.event.workflow_run.event }}"

          if [[ "$EVENT_NAME" == "workflow_run" ]]; then
            echo "Debug: Processing workflow_run event"
            echo "Debug: Workflow conclusion: $WR_CONCLUSION"
            echo "Debug: Has PRs: $WR_HAS_PRS"
            echo "Debug: PR number: $WR_PR_NUMBER"

            # Only process workflow runs triggered by pull requests
            if [[ "${{ github.event.workflow_run.event }}" != "pull_request" ]]; then
              echo "Debug: Workflow run not triggered by pull_request, skipping"
              echo "skip_notification=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            if [[ "$WR_HAS_PRS" != "true" || -z "$WR_PR_NUMBER" ]]; then
              echo "Debug: No PR in workflow run data, checking commit message for PR number"
              
              # Try to extract PR number from commit message (format: "... (#123)")
              PR_FROM_COMMIT=$(echo "$WR_HEAD_COMMIT_MESSAGE" | grep -oE '#[0-9]+' | tail -1 | tr -d '#')
              
              if [[ -n "$PR_FROM_COMMIT" ]]; then
                echo "Debug: Found PR #$PR_FROM_COMMIT in commit message"
                WR_PR_NUMBER="$PR_FROM_COMMIT"
                
                # Extract PR title from commit message (everything before the PR number)
                COMMIT_TITLE=$(echo "$WR_HEAD_COMMIT_MESSAGE" | head -1 | sed -E 's/ \(#[0-9]+\)$//')
                WR_PR_TITLE="${COMMIT_TITLE:-PR #$WR_PR_NUMBER}"
                
                # For merged PRs, set appropriate state
                WR_PR_STATE="closed"
                WR_PR_MERGED="true"
              else
                echo "Debug: No PR found in commit message, skipping"
                echo "skip_notification=true" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi

            echo "build_result=$WR_CONCLUSION" >> $GITHUB_OUTPUT
            echo "pr_number=$WR_PR_NUMBER" >> $GITHUB_OUTPUT
            # Escape special characters in PR title to prevent GitHub Actions from interpreting them as commands
            ESCAPED_TITLE=$(echo "${WR_PR_TITLE:-PR #$WR_PR_NUMBER}" | sed 's/--/%2D%2D/g')
            echo "pr_title=$ESCAPED_TITLE" >> $GITHUB_OUTPUT
            echo "pr_user=${WR_PR_USER:-unknown}" >> $GITHUB_OUTPUT

            # Construct PR URL if not provided
            if [[ -n "$WR_PR_HTML_URL" ]]; then
              echo "pr_html_url=$WR_PR_HTML_URL" >> $GITHUB_OUTPUT
            else
              echo "pr_html_url=https://github.com/${{ github.repository }}/pull/$WR_PR_NUMBER" >> $GITHUB_OUTPUT
            fi

            echo "pr_state=${WR_PR_STATE:-open}" >> $GITHUB_OUTPUT
            echo "pr_merged=${WR_PR_MERGED:-false}" >> $GITHUB_OUTPUT
            echo "pr_updated_at=$WR_PR_UPDATED_AT" >> $GITHUB_OUTPUT
            echo "pr_draft=${WR_PR_DRAFT:-false}" >> $GITHUB_OUTPUT
            echo "pr_reviewers=$(echo "$WR_PR_REVIEWERS" | jq -r '.[].login' 2>/dev/null | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
            echo "skip_notification=false" >> $GITHUB_OUTPUT
          else
            echo "Debug: Processing pull_request event"
            echo "build_result=running" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            # Escape special characters in PR title to prevent GitHub Actions from interpreting them as commands
            ESCAPED_TITLE=$(echo "$PR_TITLE" | sed 's/--/%2D%2D/g')
            echo "pr_title=$ESCAPED_TITLE" >> $GITHUB_OUTPUT
            echo "pr_user=$PR_USER" >> $GITHUB_OUTPUT
            echo "pr_html_url=$PR_HTML_URL" >> $GITHUB_OUTPUT
            echo "pr_state=$PR_STATE" >> $GITHUB_OUTPUT
            echo "pr_merged=$PR_MERGED" >> $GITHUB_OUTPUT
            echo "pr_updated_at=$PR_UPDATED_AT" >> $GITHUB_OUTPUT
            echo "pr_draft=$PR_DRAFT" >> $GITHUB_OUTPUT
            echo "pr_reviewers=$PR_REVIEWERS" >> $GITHUB_OUTPUT
            echo "skip_notification=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing Slack message
        id: check_message
        if: |
          steps.build_status.outputs.skip_notification != 'true' &&
          steps.build_status.outputs.pr_draft != 'true'
        run: |
          # Check if there's an existing comment with Slack message timestamp
          COMMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.build_status.outputs.pr_number }}/comments" \
            | jq -r '.[] | select(.body | startswith("<!-- slack-ts:")) | .body' | head -1)

          if [ -n "$COMMENT" ]; then
            SLACK_TS=$(echo "$COMMENT" | sed -n 's/<!-- slack-ts:\(.*\) -->.*/\1/p')
            echo "slack_ts=$SLACK_TS" >> $GITHUB_OUTPUT
            echo "message_exists=true" >> $GITHUB_OUTPUT
          else
            echo "message_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Send or update Slack message
        id: slack_message
        if: |
          steps.build_status.outputs.skip_notification != 'true' &&
          steps.build_status.outputs.pr_draft != 'true'
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method: |
            ${{ steps.check_message.outputs.message_exists == 'true' &&
            'chat.update' || 'chat.postMessage' }}
          token: ${{ env.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ env.SLACK_CHANNEL_ID }}",
              ${{ steps.check_message.outputs.message_exists == 'true' && format('"ts": "{0}",', steps.check_message.outputs.slack_ts) || '' }}
              "text": "PR: ${{ steps.build_status.outputs.pr_title }} - ${{ steps.build_status.outputs.pr_state }} - Build ${{ steps.build_status.outputs.build_result }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*${{ steps.build_status.outputs.pr_title }}*\nby ${{ steps.build_status.outputs.pr_user }} in `${{ github.repository }}`"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View PR"
                    },
                    "url": "${{ steps.build_status.outputs.pr_html_url || format('https://github.com/{0}/pull/{1}', github.repository, steps.build_status.outputs.pr_number) }}",
                    "action_id": "view_pr"
                  }
                },
                {
                  "type": "context",
                  "elements": [
                    {
                      "type": "mrkdwn",
                      "text": "${{ steps.build_status.outputs.pr_draft == 'true' && ':memo:' || steps.build_status.outputs.pr_state == 'open' && ':large_green_circle:' || (steps.build_status.outputs.pr_merged == 'true' && ':tada:') || ':red_circle:' }} ${{ steps.build_status.outputs.pr_draft == 'true' && 'Draft' || steps.build_status.outputs.pr_state == 'open' && 'Open' || (steps.build_status.outputs.pr_merged == 'true' && 'Merged') || 'Closed' }}"
                    },
                    {
                      "type": "mrkdwn", 
                      "text": "${{ steps.build_status.outputs.build_result == 'success' && ':white_check_mark:' || steps.build_status.outputs.build_result == 'failure' && ':x:' || steps.build_status.outputs.build_result == 'cancelled' && ':no_entry_sign:' || steps.build_status.outputs.build_result == 'skipped' && ':fast_forward:' || ':hourglass_flowing_sand:' }} ${{ steps.build_status.outputs.build_result == 'success' && 'Build passed' || steps.build_status.outputs.build_result == 'failure' && 'Build failed' || steps.build_status.outputs.build_result == 'cancelled' && 'Build cancelled' || steps.build_status.outputs.build_result == 'skipped' && 'Build skipped' || 'Build running' }}"
                    }${{ steps.build_status.outputs.pr_reviewers != '' && format(',
                    {
                      "type": "mrkdwn",
                      "text": ":busts_in_silhouette: {0}"
                    }', steps.build_status.outputs.pr_reviewers) || '' }}
                  ]
                }
              ]
            }

      - name: Store Slack message timestamp
        if: |
          steps.build_status.outputs.skip_notification != 'true' &&
          steps.build_status.outputs.pr_draft != 'true' &&
          steps.slack_message.outcome == 'success' &&
          steps.check_message.outputs.message_exists == 'false' &&
          steps.slack_message.outputs.ts != ''
        run: |
          # Create a comment with the Slack message timestamp for future updates
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.build_status.outputs.pr_number }}/comments" \
            -d "{\"body\": \"<!-- slack-ts:${{ steps.slack_message.outputs.ts }} -->\\n🤖 Slack notification sent for this PR\"}"