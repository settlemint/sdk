name: Slack Notifications

on:
  workflow_run:
    workflows: ["Build, test and publish"]
    types: [completed]
  pull_request:
    branches:
      - main
    types: [assigned, unassigned, labeled, unlabeled, opened, edited, closed, reopened, synchronize, converted_to_draft, ready_for_review, locked, unlocked, review_requested, review_request_removed, auto_merge_enabled, auto_merge_disabled]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  slack-notification:
    name: Send Slack Notification
    runs-on: namespace-profile-sdk
    if: |
      github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]' &&
      (github.event_name == 'pull_request' ||
       (github.event_name == 'workflow_run' && github.event.workflow_run.event == 'pull_request'))
    steps:
      - name: Configure 1Password
        uses: 1password/load-secrets-action/configure@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@581a835fb51b8e7ec56b71cf2ffddd7e68bb25e0 # v2
        env:
          SLACK_BOT_TOKEN: op://platform/slack-bot/SLACK_BOT_TOKEN
          SLACK_CHANNEL_ID: op://platform/slack-bot/SLACK_CHANNEL_ID

      - name: Get build workflow status and PR info
        id: build_status
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "build_result=${{ github.event.workflow_run.conclusion }}" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.workflow_run.pull_requests[0].number }}" >> $GITHUB_OUTPUT
            echo "pr_title=${{ github.event.workflow_run.pull_requests[0].title }}" >> $GITHUB_OUTPUT
            echo "pr_user=${{ github.event.workflow_run.pull_requests[0].user.login }}" >> $GITHUB_OUTPUT
            echo "pr_html_url=${{ github.event.workflow_run.pull_requests[0].html_url }}" >> $GITHUB_OUTPUT
            echo "pr_state=${{ github.event.workflow_run.pull_requests[0].state }}" >> $GITHUB_OUTPUT
            echo "pr_merged=${{ github.event.workflow_run.pull_requests[0].merged }}" >> $GITHUB_OUTPUT
            echo "pr_updated_at=${{ github.event.workflow_run.pull_requests[0].updated_at }}" >> $GITHUB_OUTPUT
            echo "pr_reviewers=$(echo '${{ toJson(github.event.workflow_run.pull_requests[0].requested_reviewers) }}' | jq -r '.[].login' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT
          else
            echo "build_result=running" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
            echo "pr_user=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
            echo "pr_html_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
            echo "pr_state=${{ github.event.pull_request.state }}" >> $GITHUB_OUTPUT
            echo "pr_merged=${{ github.event.pull_request.merged }}" >> $GITHUB_OUTPUT
            echo "pr_updated_at=${{ github.event.pull_request.updated_at }}" >> $GITHUB_OUTPUT
            echo "pr_reviewers=${{ join(github.event.pull_request.requested_reviewers.*.login, ', ') }}" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing Slack message
        id: check_message
        run: |
          # Check if there's an existing comment with Slack message timestamp
          COMMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.build_status.outputs.pr_number }}/comments" \
            | jq -r '.[] | select(.body | startswith("<!-- slack-ts:")) | .body' | head -1)

          if [ -n "$COMMENT" ]; then
            SLACK_TS=$(echo "$COMMENT" | sed -n 's/<!-- slack-ts:\(.*\) -->.*/\1/p')
            echo "slack_ts=$SLACK_TS" >> $GITHUB_OUTPUT
            echo "message_exists=true" >> $GITHUB_OUTPUT
          else
            echo "message_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Send or update Slack message
        id: slack_message
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 # v2.1.0
        with:
          method: |
            ${{ steps.check_message.outputs.message_exists == 'true' &&
            'chat.update' || 'chat.postMessage' }}
          token: ${{ env.SLACK_BOT_TOKEN }}
          payload: |
            {
              "channel": "${{ env.SLACK_CHANNEL_ID }}",
              ${{ steps.check_message.outputs.message_exists == 'true' && format('"ts": "{0}",', steps.check_message.outputs.slack_ts) || '' }}
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.build_status.outputs.pr_merged == 'true' && '🎉 Pull Request Merged' || (steps.check_message.outputs.message_exists == 'true' && '🔄 Pull Request Updated') || '🔍 New Pull Request Ready for Review' }}"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Title:*\n${{ steps.build_status.outputs.pr_title }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n👤 ${{ steps.build_status.outputs.pr_user }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Repository:*\n${{ github.repository }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Reviewers:*\n👥 ${{ steps.build_status.outputs.pr_reviewers }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*PR Status:*\n${{ steps.build_status.outputs.pr_state == 'open' && '🟢 Open' || (steps.build_status.outputs.pr_merged == 'true' && '🎉 Merged') || '🔴 Closed' }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*QA Status:*\n${{ steps.build_status.outputs.build_result == 'success' && '✅ Passed' || steps.build_status.outputs.build_result == 'failure' && '❌ Failed' || steps.build_status.outputs.build_result == 'cancelled' && '🚫 Cancelled' || steps.build_status.outputs.build_result == 'skipped' && '⏭️ Skipped' || '⏳ Running' }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Last Updated:*\n⏰ ${{ steps.build_status.outputs.pr_updated_at }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Workflow:*\n🔗 <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"
                    }
                  ]
                },
                {
                  "type": "divider"
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📖 View Pull Request"
                      },
                      "url": "${{ steps.build_status.outputs.pr_html_url }}",
                      "style": "primary"
                    },
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "📁 View Files Changed"
                      },
                      "url": "${{ steps.build_status.outputs.pr_html_url }}/files"
                    }
                  ]
                }
              ]
            }

      - name: Store Slack message timestamp
        if: |
          steps.slack_message.outcome == 'success' &&
          steps.check_message.outputs.message_exists == 'false' &&
          steps.slack_message.outputs.ts != ''
        run: |
          # Create a comment with the Slack message timestamp for future updates
          curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.build_status.outputs.pr_number }}/comments" \
            -d "{\"body\": \"<!-- slack-ts:${{ steps.slack_message.outputs.ts }} -->\\n🤖 Slack notification sent for this PR\"}"