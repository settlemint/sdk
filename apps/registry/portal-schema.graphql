input CreateWalletInfoInput {
  """The name of the wallet"""
  name: String!
}

"""Details of the created wallet"""
type CreateWalletOutput {
  """The Ethereum address of the created wallet"""
  address: String

  """The derivation path used to generate the wallet"""
  derivationPath: String

  """The unique identifier of the created wallet"""
  id: String

  """The name of the created wallet"""
  name: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  StarterKitERC20Approve(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20ApproveInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20TransactionOutput
  StarterKitERC20FactoryCreateToken(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20FactoryCreateTokenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20FactoryTransactionOutput
  StarterKitERC20Mint(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20MintInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20TransactionOutput
  StarterKitERC20Permit(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20PermitInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20TransactionOutput
  StarterKitERC20RegistryAddToken(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20RegistryAddTokenInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20RegistryTransactionOutput
  StarterKitERC20RenounceOwnership(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20TransactionOutput
  StarterKitERC20Transfer(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20TransferInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20TransactionOutput
  StarterKitERC20TransferFrom(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20TransferFromInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20TransactionOutput
  StarterKitERC20TransferOwnership(
    """The address of the contract"""
    address: String!

    """The address of the sender"""
    from: String!

    """Gas limit"""
    gasLimit: String

    """Gas price"""
    gasPrice: String
    input: StarterKitERC20TransferOwnershipInput!

    """Metadata (store custom metadata from your application)"""
    metadata: JSON

    """Simulate the transaction before sending it"""
    simulate: Boolean

    """Payable value (wei)"""
    value: String
  ): StarterKitERC20TransactionOutput
  createWallet(
    """The ID of the key vault where the wallet will be created"""
    keyVaultId: String!

    """Information about the wallet to be created"""
    walletInfo: CreateWalletInfoInput!
  ): CreateWalletOutput
}

type Query {
  StarterKitERC20(
    """The address of the contract"""
    address: String!
  ): StarterKitERC20
  StarterKitERC20ApproveReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20TransactionReceiptOutput
  StarterKitERC20Factory(
    """The address of the contract"""
    address: String!
  ): StarterKitERC20Factory
  StarterKitERC20FactoryCreateTokenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20FactoryTransactionReceiptOutput
  StarterKitERC20MintReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20TransactionReceiptOutput
  StarterKitERC20PermitReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20TransactionReceiptOutput
  StarterKitERC20Registry(
    """The address of the contract"""
    address: String!
  ): StarterKitERC20Registry
  StarterKitERC20RegistryAddTokenReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20RegistryTransactionReceiptOutput
  StarterKitERC20RenounceOwnershipReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20TransactionReceiptOutput
  StarterKitERC20TransferFromReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20TransactionReceiptOutput
  StarterKitERC20TransferOwnershipReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20TransactionReceiptOutput
  StarterKitERC20TransferReceipt(
    """The transaction hash"""
    transactionHash: String!
  ): StarterKitERC20TransactionReceiptOutput

  """Get the list of pending and recently processed transactions"""
  getPendingAndRecentlyProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2024-06-26T14:07:37.740Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get the list of pending transactions"""
  getPendingTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """Get the list of processed transactions"""
  getProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2024-06-26T14:07:37.740Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get a transaction"""
  getTransaction(
    """Transaction hash"""
    transactionHash: String!
  ): TransactionOutput
}

type StarterKitERC20 {
  """
  Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
  """
  DOMAIN_SEPARATOR: String

  """See {IERC20-allowance}."""
  allowance(owner: String!, spender: String!): String

  """See {IERC20-balanceOf}."""
  balanceOf(account: String!): String

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int

  """See {IERC-5267}."""
  eip712Domain: StarterKitERC20Eip712DomainOutput
  id: ID

  """Returns the name of the token."""
  name: String

  """
  Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.
  """
  nonces(owner: String!): String

  """Returns the address of the current owner."""
  owner: String

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """See {IERC20-totalSupply}."""
  totalSupply: String
}

input StarterKitERC20ApproveInput {
  spender: String!
  value: String!
}

type StarterKitERC20Eip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

type StarterKitERC20Factory {
  _registry: String
  id: ID

  """
  Returns the address of the token registry.
  The StarterKitERC20Registry interface.
  """
  registry: String
}

input StarterKitERC20FactoryCreateTokenInput {
  """Additional data to be stored with the token in the registry"""
  extraData_: String!

  """The name of the new token"""
  name_: String!

  """The symbol of the new token"""
  symbol_: String!
}

"""Returns the transaction hash"""
type StarterKitERC20FactoryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type StarterKitERC20FactoryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: [String!]!

  """Logs Bloom"""
  logsBloom: String!

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!
}

input StarterKitERC20MintInput {
  """The quantity of tokens to be minted"""
  amount: String!

  """The address that will receive the minted tokens"""
  to: String!
}

input StarterKitERC20PermitInput {
  deadline: String!
  owner: String!
  r: String!
  s: String!
  spender: String!
  v: Int!
  value: String!
}

type StarterKitERC20Registry {
  """
  Reverts if the token is not found in the registry.
  Retrieves a token by its address.
  The token information.
  """
  getTokenByAddress(tokenAddress: String!): StarterKitERC20RegistryGetTokenByAddressOutput

  """
  Reverts if the index is out of bounds.
  Retrieves a token by its index in the registry.
  The token information.
  """
  getTokenByIndex(index: String!): StarterKitERC20RegistryGetTokenByIndexOutput

  """
  Reverts if the token is not found in the registry.
  Retrieves a token by its symbol.
  The token information.
  """
  getTokenBySymbol(symbol: String!): StarterKitERC20RegistryGetTokenBySymbolOutput

  """
  Retrieves the list of all tokens in the registry.
  An array of all token information in the registry.
  """
  getTokenList: [StarterKitERC20RegistryTuple0GetTokenListOutput!]
  id: ID
}

input StarterKitERC20RegistryAddTokenInput {
  """Additional data associated with the token"""
  extraData: String!
  factoryAddress: String!
  name: String!

  """The symbol of the token to be added"""
  symbol: String!

  """The address of the token to be added"""
  tokenAddress: String!
}

type StarterKitERC20RegistryGetTokenByAddressOutput {
  token: StarterKitERC20RegistryTokenGetTokenByAddressOutput
}

type StarterKitERC20RegistryGetTokenByIndexOutput {
  token: StarterKitERC20RegistryTokenGetTokenByIndexOutput
}

type StarterKitERC20RegistryGetTokenBySymbolOutput {
  token: StarterKitERC20RegistryTokenGetTokenBySymbolOutput
}

"""
Reverts if the token is not found in the registry.
Retrieves a token by its address.
The token information.
"""
type StarterKitERC20RegistryTokenGetTokenByAddressOutput {
  extraData: String
  symbol: String
  tokenAddress: String
}

"""
Reverts if the index is out of bounds.
Retrieves a token by its index in the registry.
The token information.
"""
type StarterKitERC20RegistryTokenGetTokenByIndexOutput {
  extraData: String
  symbol: String
  tokenAddress: String
}

"""
Reverts if the token is not found in the registry.
Retrieves a token by its symbol.
The token information.
"""
type StarterKitERC20RegistryTokenGetTokenBySymbolOutput {
  extraData: String
  symbol: String
  tokenAddress: String
}

"""Returns the transaction hash"""
type StarterKitERC20RegistryTransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type StarterKitERC20RegistryTransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: [String!]!

  """Logs Bloom"""
  logsBloom: String!

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!
}

"""
Retrieves the list of all tokens in the registry.
An array of all token information in the registry.
"""
type StarterKitERC20RegistryTuple0GetTokenListOutput {
  extraData: String
  symbol: String
  tokenAddress: String
}

"""Returns the transaction hash"""
type StarterKitERC20TransactionOutput {
  transactionHash: String
}

"""Returns the transaction receipt"""
type StarterKitERC20TransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: [String!]!

  """Logs Bloom"""
  logsBloom: String!

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!
}

input StarterKitERC20TransferFromInput {
  from: String!
  to: String!
  value: String!
}

input StarterKitERC20TransferInput {
  to: String!
  value: String!
}

input StarterKitERC20TransferOwnershipInput {
  newOwner: String!
}

type Subscription {
  """Get the list of pending and recently processed transactions"""
  getPendingAndRecentlyProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2024-06-26T14:07:37.740Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get the list of pending transactions"""
  getPendingTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """Get the list of processed transactions"""
  getProcessedTransactions(
    """Address of the contract"""
    address: String

    """Address of the sender"""
    from: String

    """Function name"""
    functionName: String

    """Page number, starts from 0"""
    page: Int = 0

    """Number of items per page"""
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2024-06-26T14:07:37.740Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """Get a transaction"""
  getTransaction(
    """Transaction hash"""
    transactionHash: String!
  ): TransactionOutput
}

"""Returns the transaction"""
type TransactionOutput {
  """Contract address"""
  address: String!

  """Created at"""
  createdAt: String

  """From address"""
  from: String!

  """Function name"""
  functionName: String!

  """Metadata"""
  metadata: JSON

  """Receipt"""
  receipt: TransactionReceiptOutput

  """Transaction Hash"""
  transactionHash: String!

  """Created at"""
  updatedAt: String
}

"""The transaction receipt"""
type TransactionReceiptOutput {
  """Blob Gas Price"""
  blobGasPrice: String

  """Blob Gas Used"""
  blobGasUsed: String

  """Block Hash"""
  blockHash: String!

  """Block Number"""
  blockNumber: String!

  """Contract Address"""
  contractAddress: String

  """Cumulative Gas Used"""
  cumulativeGasUsed: String!

  """Effective Gas Price"""
  effectiveGasPrice: String!

  """From"""
  from: String!

  """Gas Used"""
  gasUsed: String!

  """Logs"""
  logs: [String!]!

  """Logs Bloom"""
  logsBloom: String!

  """Root"""
  root: String

  """Status"""
  status: TransactionReceiptStatus!

  """To"""
  to: String

  """Transaction Hash"""
  transactionHash: String!

  """Transaction Index"""
  transactionIndex: Int!

  """Type"""
  type: String!
}

enum TransactionReceiptStatus {
  Reverted
  Success
}

"""Transactions paginated output"""
type TransactionsPaginatedOutput {
  """Total number of results"""
  count: Int!
  records: [TransactionOutput!]!
}