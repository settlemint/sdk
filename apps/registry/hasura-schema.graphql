schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_array_comparison_exp {
  """is the array contained in the given array value"""
  _contained_in: [String!]

  """does the array contain the given value"""
  _contains: [String!]
  _eq: [String!]
  _gt: [String!]
  _gte: [String!]
  _in: [[String!]!]
  _is_null: Boolean
  _lt: [String!]
  _lte: [String!]
  _neq: [String!]
  _nin: [[String!]!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "starterkit_wallets"
  """
  delete_starterkit_wallets(
    """filter the rows which have to be deleted"""
    where: starterkit_wallets_bool_exp!
  ): starterkit_wallets_mutation_response

  """
  delete single row from the table: "starterkit_wallets"
  """
  delete_starterkit_wallets_by_pk(
    """User's email address, serves as the primary key"""
    email: String!
  ): starterkit_wallets

  """
  insert data into the table: "starterkit_wallets"
  """
  insert_starterkit_wallets(
    """the rows to be inserted"""
    objects: [starterkit_wallets_insert_input!]!

    """upsert condition"""
    on_conflict: starterkit_wallets_on_conflict
  ): starterkit_wallets_mutation_response

  """
  insert a single row into the table: "starterkit_wallets"
  """
  insert_starterkit_wallets_one(
    """the row to be inserted"""
    object: starterkit_wallets_insert_input!

    """upsert condition"""
    on_conflict: starterkit_wallets_on_conflict
  ): starterkit_wallets

  """
  update data of the table: "starterkit_wallets"
  """
  update_starterkit_wallets(
    """sets the columns of the filtered rows to the given values"""
    _set: starterkit_wallets_set_input

    """filter the rows which have to be updated"""
    where: starterkit_wallets_bool_exp!
  ): starterkit_wallets_mutation_response

  """
  update single row of the table: "starterkit_wallets"
  """
  update_starterkit_wallets_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: starterkit_wallets_set_input
    pk_columns: starterkit_wallets_pk_columns_input!
  ): starterkit_wallets

  """
  update multiples rows of table: "starterkit_wallets"
  """
  update_starterkit_wallets_many(
    """updates to execute, in order"""
    updates: [starterkit_wallets_updates!]!
  ): [starterkit_wallets_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "starterkit_wallets"
  """
  starterkit_wallets(
    """distinct select on columns"""
    distinct_on: [starterkit_wallets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [starterkit_wallets_order_by!]

    """filter the rows returned"""
    where: starterkit_wallets_bool_exp
  ): [starterkit_wallets!]!

  """
  fetch aggregated fields from the table: "starterkit_wallets"
  """
  starterkit_wallets_aggregate(
    """distinct select on columns"""
    distinct_on: [starterkit_wallets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [starterkit_wallets_order_by!]

    """filter the rows returned"""
    where: starterkit_wallets_bool_exp
  ): starterkit_wallets_aggregate!

  """
  fetch data from the table: "starterkit_wallets" using primary key columns
  """
  starterkit_wallets_by_pk(
    """User's email address, serves as the primary key"""
    email: String!
  ): starterkit_wallets
}

"""Stores user wallet information for the starter kit applications"""
type starterkit_wallets {
  """User's email address, serves as the primary key"""
  email: String!

  """User's hashed password"""
  password: String!

  """Array of roles assigned to the user"""
  role: [String!]

  """User's wallet address, must be unique"""
  wallet: String!
}

"""
aggregated selection of "starterkit_wallets"
"""
type starterkit_wallets_aggregate {
  aggregate: starterkit_wallets_aggregate_fields
  nodes: [starterkit_wallets!]!
}

"""
aggregate fields of "starterkit_wallets"
"""
type starterkit_wallets_aggregate_fields {
  count(columns: [starterkit_wallets_select_column!], distinct: Boolean): Int!
  max: starterkit_wallets_max_fields
  min: starterkit_wallets_min_fields
}

"""
Boolean expression to filter rows from the table "starterkit_wallets". All fields are combined with a logical 'AND'.
"""
input starterkit_wallets_bool_exp {
  _and: [starterkit_wallets_bool_exp!]
  _not: starterkit_wallets_bool_exp
  _or: [starterkit_wallets_bool_exp!]
  email: String_comparison_exp
  password: String_comparison_exp
  role: String_array_comparison_exp
  wallet: String_comparison_exp
}

"""
unique or primary key constraints on table "starterkit_wallets"
"""
enum starterkit_wallets_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  starterkit_wallets_pkey

  """
  unique or primary key constraint on columns "wallet"
  """
  starterkit_wallets_wallet_key
}

"""
input type for inserting data into table "starterkit_wallets"
"""
input starterkit_wallets_insert_input {
  """User's email address, serves as the primary key"""
  email: String

  """User's hashed password"""
  password: String

  """Array of roles assigned to the user"""
  role: [String!]

  """User's wallet address, must be unique"""
  wallet: String
}

"""aggregate max on columns"""
type starterkit_wallets_max_fields {
  """User's email address, serves as the primary key"""
  email: String

  """User's hashed password"""
  password: String

  """Array of roles assigned to the user"""
  role: [String!]

  """User's wallet address, must be unique"""
  wallet: String
}

"""aggregate min on columns"""
type starterkit_wallets_min_fields {
  """User's email address, serves as the primary key"""
  email: String

  """User's hashed password"""
  password: String

  """Array of roles assigned to the user"""
  role: [String!]

  """User's wallet address, must be unique"""
  wallet: String
}

"""
response of any mutation on the table "starterkit_wallets"
"""
type starterkit_wallets_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [starterkit_wallets!]!
}

"""
on_conflict condition type for table "starterkit_wallets"
"""
input starterkit_wallets_on_conflict {
  constraint: starterkit_wallets_constraint!
  update_columns: [starterkit_wallets_update_column!]! = []
  where: starterkit_wallets_bool_exp
}

"""Ordering options when selecting data from "starterkit_wallets"."""
input starterkit_wallets_order_by {
  email: order_by
  password: order_by
  role: order_by
  wallet: order_by
}

"""primary key columns input for table: starterkit_wallets"""
input starterkit_wallets_pk_columns_input {
  """User's email address, serves as the primary key"""
  email: String!
}

"""
select columns of table "starterkit_wallets"
"""
enum starterkit_wallets_select_column {
  """column name"""
  email

  """column name"""
  password

  """column name"""
  role

  """column name"""
  wallet
}

"""
input type for updating data in table "starterkit_wallets"
"""
input starterkit_wallets_set_input {
  """User's email address, serves as the primary key"""
  email: String

  """User's hashed password"""
  password: String

  """Array of roles assigned to the user"""
  role: [String!]

  """User's wallet address, must be unique"""
  wallet: String
}

"""
Streaming cursor of the table "starterkit_wallets"
"""
input starterkit_wallets_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: starterkit_wallets_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input starterkit_wallets_stream_cursor_value_input {
  """User's email address, serves as the primary key"""
  email: String

  """User's hashed password"""
  password: String

  """Array of roles assigned to the user"""
  role: [String!]

  """User's wallet address, must be unique"""
  wallet: String
}

"""
update columns of table "starterkit_wallets"
"""
enum starterkit_wallets_update_column {
  """column name"""
  email

  """column name"""
  password

  """column name"""
  role

  """column name"""
  wallet
}

input starterkit_wallets_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: starterkit_wallets_set_input

  """filter the rows which have to be updated"""
  where: starterkit_wallets_bool_exp!
}

type subscription_root {
  """
  fetch data from the table: "starterkit_wallets"
  """
  starterkit_wallets(
    """distinct select on columns"""
    distinct_on: [starterkit_wallets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [starterkit_wallets_order_by!]

    """filter the rows returned"""
    where: starterkit_wallets_bool_exp
  ): [starterkit_wallets!]!

  """
  fetch aggregated fields from the table: "starterkit_wallets"
  """
  starterkit_wallets_aggregate(
    """distinct select on columns"""
    distinct_on: [starterkit_wallets_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [starterkit_wallets_order_by!]

    """filter the rows returned"""
    where: starterkit_wallets_bool_exp
  ): starterkit_wallets_aggregate!

  """
  fetch data from the table: "starterkit_wallets" using primary key columns
  """
  starterkit_wallets_by_pk(
    """User's email address, serves as the primary key"""
    email: String!
  ): starterkit_wallets

  """
  fetch data from the table in a streaming manner: "starterkit_wallets"
  """
  starterkit_wallets_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [starterkit_wallets_stream_cursor_input]!

    """filter the rows returned"""
    where: starterkit_wallets_bool_exp
  ): [starterkit_wallets!]!
}