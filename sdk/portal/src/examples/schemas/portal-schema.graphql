type Bond {
  """
  Returns the clock mode used for historical balance tracking.
  Indicates that timestamps are used instead of block numbers.
  A string indicating the clock mode ("mode=timestamp").
  """
  CLOCK_MODE: String
  DEFAULT_ADMIN_ROLE: String

  """
  Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
  """
  DOMAIN_SEPARATOR: String

  """
  Role identifier for addresses that can manage token supply.
  """
  SUPPLY_MANAGEMENT_ROLE: String

  """
  Role identifier for addresses that can manage users (blocking, unblocking, etc.).
  """
  USER_MANAGEMENT_ROLE: String

  """
  See {IERC20-allowance}.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the available (unfrozen) balance of an account.
  The amount of tokens available for transfer.
  """
  availableBalance(account: String!): BondAvailableBalanceOutput

  """
  See {IERC20-balanceOf}.
  """
  balanceOf(account: String!): String

  """
  Returns the balance of an account at a specific block number.
  """
  balanceOfAt(account: String!, timepoint: String!): String

  """
  Tracks how many bonds each holder has redeemed.
  """
  bondRedeemed(address0: String!): String

  """
  Checks if an address can manage yield on this token.
  Only addresses with SUPPLY_MANAGEMENT_ROLE can manage yield.
  True if the address has SUPPLY_MANAGEMENT_ROLE.
  """
  canManageYield(manager: String!): Boolean

  """
  Returns the cap on the token's total supply.
  """
  cap: String

  """
  Returns the current timestamp for historical balance tracking.
  Overrides the default clock function to use timestamps instead of block numbers.
  The current timestamp as a uint48.
  """
  clock: Float

  """
  Returns the number of decimals used for token amounts.
  Overrides the default ERC20 decimals function to use the configurable value.
  The number of decimals.
  """
  decimals: Int

  """
  See {IERC-5267}.
  """
  eip712Domain: BondEip712DomainOutput

  """
  The face value of the bond in underlying asset base units.
  """
  faceValue: String

  """
  Returns the amount of tokens frozen for a user.
  """
  frozen(user: String!): String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Tracks whether the bond has matured.
  """
  isMatured: Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Timestamp when the bond matures.
  """
  maturityDate: String

  """
  Returns the amount of underlying assets missing for all potential redemptions.
  The amount of underlying assets missing (0 if there's enough or excess).
  """
  missingUnderlyingAmount: String

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.
  """
  nonces(owner: String!): String

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  See {IERC165-supportsInterface}.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  See {IERC20-totalSupply}.
  """
  totalSupply: String

  """
  Returns the total supply at a specific block number.
  """
  totalSupplyAt(timepoint: String!): String

  """
  Returns the total amount of underlying assets needed for all potential redemptions.
  The total amount of underlying assets needed.
  """
  totalUnderlyingNeeded: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  The underlying asset contract used for face value denomination.
  """
  underlyingAsset: String

  """
  Returns the amount of underlying assets held by the contract.
  The balance of underlying assets.
  """
  underlyingAssetBalance: String

  """
  Returns the amount of excess underlying assets that can be withdrawn.
  The amount of excess underlying assets.
  """
  withdrawableUnderlyingAmount: String

  """
  Returns the basis for yield calculation.
  For bonds, the yield basis is the face value.
  The face value as the basis for yield calculations.
  """
  yieldBasisPerUnit(address0: String!): String

  """
  The yield schedule contract for this token.
  """
  yieldSchedule: String

  """
  Returns the token used for yield payments.
  For bonds, this is the underlying asset.
  The underlying asset token.
  """
  yieldToken: String
}

input BondApproveInput {
  spender: String!
  value: String!
}

type BondAvailableBalanceOutput {
  available: String
}

input BondBlockUserInput {
  """
  Address to block
  """
  user: String!
}

input BondBlockedInput {
  account: String!
}

input BondBurnFromInput {
  account: String!
  value: String!
}

input BondBurnInput {
  value: String!
}

input BondClawbackInput {
  """
  The amount to clawback
  """
  amount: String!

  """
  The address to take tokens from
  """
  from: String!

  """
  The recipient address
  """
  to: String!
}

type BondEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

type BondFactory {
  id: ID

  """
  Checks if an address was deployed by this factory.
  Returns true if the address was created by this factory, false otherwise.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(token: String!): Boolean

  """
  Mapping to track if an address was deployed by this factory.
  """
  isFactoryToken(address0: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the address where a bond would be deployed.
  Calculates the deterministic address using CREATE2 with the same parameters and salt computation as the create function. This allows users to know the bond's address before deployment.
  The address where the bond would be deployed.
  """
  predictAddress(
    cap: String!
    decimals: Int!
    faceValue: String!
    maturityDate: String!
    name: String!
    sender: String!
    symbol: String!
    underlyingAsset: String!
  ): BondFactoryPredictAddressOutput

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input BondFactoryCreateInput {
  """
  The maximum total supply of the token
  """
  cap: String!

  """
  The number of decimals for the token (must be <= 18)
  """
  decimals: Int!

  """
  The face value of the bond in underlying asset base units
  """
  faceValue: String!

  """
  The timestamp when the bond matures (must be in the future)
  """
  maturityDate: String!

  """
  The name of the bond token (e.g., "Company A 5% Bond 2025")
  """
  name: String!

  """
  The symbol of the token (e.g., "BOND-A-25")
  """
  symbol: String!

  """
  The address of the underlying asset contract used for face value denomination
  """
  underlyingAsset: String!
}

type BondFactoryPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type BondFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type BondFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input BondFreezeInput {
  """
  The amount of tokens frozen. Requirements: - The user must have sufficient unfrozen balance.
  """
  amount: String!

  """
  The address of the user whose tokens to freeze.
  """
  user: String!
}

input BondGrantRoleInput {
  account: String!
  role: String!
}

input BondMintInput {
  """
  The quantity of tokens to create in base units
  """
  amount: String!

  """
  The address that will receive the minted tokens
  """
  to: String!
}

input BondPermitInput {
  deadline: String!
  owner: String!
  r: String!
  s: String!
  spender: String!
  v: Int!
  value: String!
}

input BondRedeemInput {
  """
  The amount of bonds to redeem
  """
  amount: String!
}

input BondRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input BondRevokeRoleInput {
  account: String!
  role: String!
}

input BondSetYieldScheduleInput {
  """
  The address of the yield schedule contract
  """
  schedule: String!
}

input BondTopUpUnderlyingAssetInput {
  """
  The amount of underlying assets to top up
  """
  amount: String!
}

"""
Returns the transaction hash
"""
type BondTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type BondTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input BondTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input BondTransferInput {
  to: String!
  value: String!
}

input BondUnblockUserInput {
  """
  Address to unblock
  """
  user: String!
}

input BondWithdrawExcessUnderlyingAssetsInput {
  """
  The address to send the underlying assets to
  """
  to: String!
}

input BondWithdrawTokenInput {
  """
  The amount to withdraw
  """
  amount: String!

  """
  The recipient address
  """
  to: String!

  """
  The token to withdraw
  """
  token: String!
}

input BondWithdrawUnderlyingAssetInput {
  """
  The amount of underlying assets to withdraw
  """
  amount: String!

  """
  The address to send the underlying assets to
  """
  to: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar ConstructorArguments

type Contract {
  abiName: String
  address: String

  """
  Created at
  """
  createdAt: String
  transaction: TransactionOutput
  transactionHash: String
}

"""
Returns the transaction hash
"""
type ContractDeploymentTransactionOutput {
  transactionHash: String
}

"""
Contracts paginated output
"""
type ContractsPaginatedOutput {
  """
  Total number of results
  """
  count: Int!
  records: [Contract!]!
}

input CreateWalletInfoInput {
  """
  The name of the wallet
  """
  name: String!
}

"""
Details of the created wallet
"""
type CreateWalletOutput {
  """
  The Ethereum address of the created wallet
  """
  address: String

  """
  The derivation path used to generate the wallet
  """
  derivationPath: String

  """
  The unique identifier of the created wallet
  """
  id: String

  """
  The name of the created wallet
  """
  name: String
}

input CreateWalletVerificationInput {
  """
  OTP verification settings. Provide this for OTP verification.
  """
  otp: OTPSettingsInput

  """
  PINCODE verification settings. Provide this for PINCODE verification.
  """
  pincode: PincodeSettingsInput

  """
  Secret codes verification settings. Provide this for secret codes verification.
  """
  secretCodes: SecretCodesSettingsInput
}

"""
Output for creating a wallet verification
"""
type CreateWalletVerificationOutput {
  """
  Unique identifier of the created wallet verification
  """
  id: String

  """
  Name of the created wallet verification
  """
  name: String

  """
  Additional parameters of the created wallet verification
  """
  parameters: JSON

  """
  Type of the created wallet verification
  """
  verificationType: WalletVerificationType
}

type CryptoCurrency {
  DEFAULT_ADMIN_ROLE: String

  """
  Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
  """
  DOMAIN_SEPARATOR: String

  """
  Role identifier for addresses that can manage token supply.
  """
  SUPPLY_MANAGEMENT_ROLE: String

  """
  See {IERC20-allowance}.
  """
  allowance(owner: String!, spender: String!): String

  """
  See {IERC20-balanceOf}.
  """
  balanceOf(account: String!): String

  """
  Returns the number of decimals used for token amounts.
  Overrides the default ERC20 decimals function to use the configurable value.
  The number of decimals.
  """
  decimals: Int

  """
  See {IERC-5267}.
  """
  eip712Domain: CryptoCurrencyEip712DomainOutput

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.
  """
  nonces(owner: String!): String

  """
  See {IERC165-supportsInterface}.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  See {IERC20-totalSupply}.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input CryptoCurrencyApproveInput {
  spender: String!
  value: String!
}

type CryptoCurrencyEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

type CryptoCurrencyFactory {
  id: ID

  """
  Checks if an address was deployed by this factory.
  Returns true if the address was created by this factory, false otherwise.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(token: String!): Boolean

  """
  Mapping to track if an address was deployed by this factory.
  """
  isFactoryToken(address0: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the address where a token would be deployed.
  Calculates the deterministic address using CREATE2 with the same parameters and salt computation as the create function. This allows users to know the token's address before deployment.
  The address where the token would be deployed.
  """
  predictAddress(
    decimals: Int!
    initialSupply: String!
    name: String!
    sender: String!
    symbol: String!
  ): CryptoCurrencyFactoryPredictAddressOutput

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input CryptoCurrencyFactoryCreateInput {
  """
  The number of decimals for the token (must be <= 18)
  """
  decimals: Int!

  """
  The initial supply of tokens to mint to the creator
  """
  initialSupply: String!

  """
  The name of the token (e.g., "My Token")
  """
  name: String!

  """
  The symbol of the token (e.g., "MTK")
  """
  symbol: String!
}

type CryptoCurrencyFactoryPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type CryptoCurrencyFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type CryptoCurrencyFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input CryptoCurrencyGrantRoleInput {
  account: String!
  role: String!
}

input CryptoCurrencyMintInput {
  """
  The quantity of tokens to create (in base units)
  """
  amount: String!

  """
  The address that will receive the minted tokens
  """
  to: String!
}

input CryptoCurrencyPermitInput {
  deadline: String!
  owner: String!
  r: String!
  s: String!
  spender: String!
  v: Int!
  value: String!
}

input CryptoCurrencyRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input CryptoCurrencyRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type CryptoCurrencyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type CryptoCurrencyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input CryptoCurrencyTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input CryptoCurrencyTransferInput {
  to: String!
  value: String!
}

input CryptoCurrencyWithdrawTokenInput {
  """
  The amount to withdraw
  """
  amount: String!

  """
  The recipient address
  """
  to: String!

  """
  The token to withdraw
  """
  token: String!
}

"""
Output for deleting a wallet verification
"""
type DeleteWalletVerificationOutput {
  """
  Indicates whether the wallet verification was successfully deleted
  """
  success: Boolean
}

input DeployContractBondFactoryInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractBondInput {
  """
  The maximum total supply of the token
  """
  _cap: String!

  """
  The face value of the bond in underlying asset base units (must be > 0)
  """
  _faceValue: String!

  """
  Timestamp when the bond matures (must be in the future)
  """
  _maturityDate: String!

  """
  The address of the underlying asset contract (must be a valid ERC20)
  """
  _underlyingAsset: String!

  """
  The number of decimals for the token (must be <= 18)
  """
  decimals_: Int!

  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!

  """
  The address that will receive admin rights
  """
  initialOwner: String!

  """
  The token name
  """
  name: String!

  """
  The token symbol
  """
  symbol: String!
}

input DeployContractCryptoCurrencyFactoryInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractCryptoCurrencyInput {
  """
  The number of decimals for the token (must be <= 18)
  """
  decimals_: Int!

  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!

  """
  The address that will receive admin rights and initial supply
  """
  initialOwner: String!

  """
  The amount of tokens to mint at deployment (in base units)
  """
  initialSupply: String!

  """
  The token name (e.g. "My Token")
  """
  name: String!

  """
  The token symbol (e.g. "MTK")
  """
  symbol: String!
}

input DeployContractDepositFactoryInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractDepositInput {
  """
  Duration in seconds that collateral proofs remain valid (must be > 0)
  """
  collateralLivenessSeconds: Float!

  """
  The number of decimals for the token (must be <= 18)
  """
  decimals_: Int!

  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!

  """
  The address that will receive admin rights
  """
  initialOwner: String!

  """
  The token name
  """
  name: String!

  """
  The token symbol
  """
  symbol: String!
}

input DeployContractEquityFactoryInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractEquityInput {
  """
  The number of decimals for the token (must be <= 18)
  """
  decimals_: Int!

  """
  The equity category (e.g., "Series A", "Seed")
  """
  equityCategory_: String!

  """
  The equity class (e.g., "Common", "Preferred")
  """
  equityClass_: String!

  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!

  """
  The address that will receive admin rights
  """
  initialOwner: String!

  """
  The token name
  """
  name: String!

  """
  The token symbol
  """
  symbol: String!
}

input DeployContractFixedYieldFactoryInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractFixedYieldInput {
  """
  The timestamp when the schedule ends
  """
  endDate_: String!
  forwarder: String!

  """
  The address that will receive admin rights
  """
  initialOwner: String!

  """
  The interval between distributions in seconds
  """
  interval_: String!

  """
  The yield rate in basis points (1 basis point = 0.01%, e.g., 500 = 5%)
  """
  rate_: String!

  """
  The timestamp when the schedule starts
  """
  startDate_: String!

  """
  The address of the token this schedule is for
  """
  tokenAddress: String!
}

input DeployContractFundFactoryInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractFundInput {
  """
  The number of decimals for the token (must be <= 18)
  """
  decimals_: Int!

  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!

  """
  The category of the fund (e.g., "Long/Short Equity", "Global Macro")
  """
  fundCategory_: String!

  """
  The class of the fund (e.g., "Hedge Fund", "Mutual Fund")
  """
  fundClass_: String!

  """
  The address that will receive admin rights
  """
  initialOwner: String!

  """
  The management fee in basis points (1 basis point = 0.01%)
  """
  managementFeeBps_: Int!

  """
  The token name
  """
  name: String!

  """
  The token symbol
  """
  symbol: String!
}

input DeployContractStableCoinFactoryInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractStableCoinInput {
  """
  Duration in seconds that collateral proofs remain valid (must be > 0)
  """
  collateralLivenessSeconds: Float!

  """
  The number of decimals for the token (must be <= 18)
  """
  decimals_: Int!

  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!

  """
  The address that will receive admin rights
  """
  initialOwner: String!

  """
  The token name
  """
  name: String!

  """
  The token symbol
  """
  symbol: String!
}

type Deposit {
  """
  Role identifier for addresses that can audit the collateral.
  """
  AUDITOR_ROLE: String

  """
  Description of the clock.
  """
  CLOCK_MODE: String
  DEFAULT_ADMIN_ROLE: String

  """
  Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
  """
  DOMAIN_SEPARATOR: String

  """
  Role identifier for addresses that can manage token supply.
  """
  SUPPLY_MANAGEMENT_ROLE: String

  """
  Role identifier for addresses that can manage users (blocking, unblocking, etc.).
  """
  USER_MANAGEMENT_ROLE: String

  """
  See {IERC20-allowance}.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the available (unfrozen) balance of an account.
  The amount of tokens available for transfer.
  """
  availableBalance(account: String!): DepositAvailableBalanceOutput

  """
  See {IERC20-balanceOf}.
  """
  balanceOf(account: String!): String

  """
  Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).
  """
  clock: Float

  """
  Returns current collateral amount and timestamp.
  Implements the ERC20Collateral interface.
  Current proven collateral amount, Timestamp when the collateral was last proven.
  """
  collateral: DepositCollateralOutput

  """
  Returns the number of decimals used for token amounts.
  Overrides the default ERC20 decimals function to use the configurable value.
  The number of decimals.
  """
  decimals: Int

  """
  See {IERC-5267}.
  """
  eip712Domain: DepositEip712DomainOutput

  """
  Returns the amount of tokens frozen for a user.
  """
  frozen(user: String!): String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the timestamp of the last collateral update.
  Returns the timestamp of the last collateral update.
  The timestamp of the last collateral update.
  """
  lastCollateralUpdate: String

  """
  Returns the minimum liveness duration of collateral.
  """
  liveness: Float

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.
  """
  nonces(owner: String!): String

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  See {IERC165-supportsInterface}.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  See {IERC20-totalSupply}.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input DepositAllowUserInput {
  """
  Address to block
  """
  user: String!
}

input DepositAllowedInput {
  account: String!
}

input DepositApproveInput {
  spender: String!
  value: String!
}

type DepositAvailableBalanceOutput {
  available: String
}

input DepositBurnFromInput {
  account: String!
  value: String!
}

input DepositBurnInput {
  value: String!
}

input DepositClawbackInput {
  """
  The amount to clawback
  """
  amount: String!

  """
  The address to take tokens from
  """
  from: String!

  """
  The recipient address
  """
  to: String!
}

type DepositCollateralOutput {
  amount: String
  timestamp: Float
}

input DepositDisallowUserInput {
  """
  Address to unblock
  """
  user: String!
}

type DepositEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

type DepositFactory {
  id: ID

  """
  Checks if an address was deployed by this factory.
  Returns true if the address was created by this factory, false otherwise.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(token: String!): Boolean

  """
  Mapping to track if an address was deployed by this factory.
  """
  isFactoryToken(address0: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the address where a token would be deployed.
  Calculates the deterministic address using CREATE2 with the same parameters and salt computation as the create function. This allows users to know the token's address before deployment.
  The address where the token would be deployed.
  """
  predictAddress(
    collateralLivenessSeconds: Float!
    decimals: Int!
    name: String!
    sender: String!
    symbol: String!
  ): DepositFactoryPredictAddressOutput

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input DepositFactoryCreateInput {
  """
  Duration in seconds that collateral proofs remain valid (must be > 0)
  """
  collateralLivenessSeconds: Float!

  """
  The number of decimals for the token (must be <= 18)
  """
  decimals: Int!

  """
  The name of the token
  """
  name: String!

  """
  The symbol of the token
  """
  symbol: String!
}

type DepositFactoryPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type DepositFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type DepositFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input DepositFreezeInput {
  """
  The amount of tokens frozen. Requirements: - The user must have sufficient unfrozen balance.
  """
  amount: String!

  """
  The address of the user whose tokens to freeze.
  """
  user: String!
}

input DepositGrantRoleInput {
  account: String!
  role: String!
}

input DepositMintInput {
  """
  The quantity of tokens to create in base units
  """
  amount: String!

  """
  The address that will receive the minted tokens
  """
  to: String!
}

input DepositPermitInput {
  deadline: String!
  owner: String!
  r: String!
  s: String!
  spender: String!
  v: Int!
  value: String!
}

input DepositRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input DepositRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type DepositTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type DepositTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input DepositTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input DepositTransferInput {
  to: String!
  value: String!
}

input DepositUpdateCollateralInput {
  """
  New collateral amount
  """
  amount: String!
}

input DepositWithdrawTokenInput {
  """
  The amount to withdraw
  """
  amount: String!

  """
  The recipient address
  """
  to: String!

  """
  The token to withdraw
  """
  token: String!
}

type Equity {
  """
  Returns the clock mode used for historical balance tracking.
  Indicates that timestamps are used instead of block numbers.
  A string indicating the clock mode ("mode=timestamp").
  """
  CLOCK_MODE: String
  DEFAULT_ADMIN_ROLE: String

  """
  Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
  """
  DOMAIN_SEPARATOR: String

  """
  Role identifier for addresses that can manage token supply.
  """
  SUPPLY_MANAGEMENT_ROLE: String

  """
  Role identifier for addresses that can manage users (blocking, unblocking, etc.).
  """
  USER_MANAGEMENT_ROLE: String

  """
  See {IERC20-allowance}.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the available (unfrozen) balance of an account.
  The amount of tokens available for transfer.
  """
  availableBalance(account: String!): EquityAvailableBalanceOutput

  """
  See {IERC20-balanceOf}.
  """
  balanceOf(account: String!): String

  """
  Get the `pos`-th checkpoint for `account`.
  """
  checkpoints(account: String!, pos: Float!): EquityTuple0CheckpointsOutput

  """
  Returns the current timestamp for historical balance tracking.
  Overrides the default clock function to use timestamps instead of block numbers.
  The current timestamp as a uint48.
  """
  clock: Float

  """
  Returns the number of decimals used for token amounts.
  Overrides the default ERC20 decimals function to use the configurable value.
  The number of decimals.
  """
  decimals: Int

  """
  Returns the delegate that `account` has chosen.
  """
  delegates(account: String!): String

  """
  See {IERC-5267}.
  """
  eip712Domain: EquityEip712DomainOutput

  """
  Returns the category of equity this token represents.
  The equity category is immutable after construction.
  The equity category as a string (e.g., "Series A", "Seed").
  """
  equityCategory: String

  """
  Returns the class of equity this token represents.
  The equity class is immutable after construction.
  The equity class as a string (e.g., "Common", "Preferred").
  """
  equityClass: String

  """
  Returns the amount of tokens frozen for a user.
  """
  frozen(user: String!): String

  """
  Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastTotalSupply(timepoint: String!): String

  """
  Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastVotes(account: String!, timepoint: String!): String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns the current amount of votes that `account` has.
  """
  getVotes(account: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the current nonce for an address.
  Required override to resolve ambiguity between ERC20Permit and Nonces.
  The current nonce used for permits and other signed approvals.
  """
  nonces(owner: String!): String

  """
  Get number of checkpoints for `account`.
  """
  numCheckpoints(account: String!): Float

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  See {IERC165-supportsInterface}.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  See {IERC20-totalSupply}.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input EquityApproveInput {
  spender: String!
  value: String!
}

type EquityAvailableBalanceOutput {
  available: String
}

input EquityBlockUserInput {
  """
  Address to block
  """
  user: String!
}

input EquityBlockedInput {
  account: String!
}

input EquityBurnFromInput {
  account: String!
  value: String!
}

input EquityBurnInput {
  value: String!
}

input EquityClawbackInput {
  """
  The amount to clawback
  """
  amount: String!

  """
  The address to take tokens from
  """
  from: String!

  """
  The recipient address
  """
  to: String!
}

input EquityDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input EquityDelegateInput {
  delegatee: String!
}

type EquityEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

type EquityFactory {
  id: ID

  """
  Checks if an address was deployed by this factory.
  Returns true if the address was created by this factory, false otherwise.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(token: String!): Boolean

  """
  Mapping to track if an address was deployed by this factory.
  """
  isFactoryToken(address0: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the address where a token would be deployed.
  Calculates the deterministic address using CREATE2 with the same parameters and salt computation as the create function. This allows users to know the token's address before deployment.
  The address where the token would be deployed.
  """
  predictAddress(
    decimals: Int!
    equityCategory: String!
    equityClass: String!
    name: String!
    sender: String!
    symbol: String!
  ): EquityFactoryPredictAddressOutput

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input EquityFactoryCreateInput {
  """
  The number of decimals for the token (must be <= 18)
  """
  decimals: Int!

  """
  The equity category (e.g., "Series A", "Seed")
  """
  equityCategory: String!

  """
  The equity class (e.g., "Common", "Preferred")
  """
  equityClass: String!

  """
  The name of the token (e.g., "Company A Common Stock")
  """
  name: String!

  """
  The symbol of the token (e.g., "CMPNYA")
  """
  symbol: String!
}

type EquityFactoryPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type EquityFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type EquityFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input EquityFreezeInput {
  """
  The amount of tokens frozen. Requirements: - The user must have sufficient unfrozen balance.
  """
  amount: String!

  """
  The address of the user whose tokens to freeze.
  """
  user: String!
}

input EquityGrantRoleInput {
  account: String!
  role: String!
}

input EquityMintInput {
  """
  The quantity of tokens to create in base units
  """
  amount: String!

  """
  The address that will receive the minted tokens
  """
  to: String!
}

input EquityPermitInput {
  deadline: String!
  owner: String!
  r: String!
  s: String!
  spender: String!
  v: Int!
  value: String!
}

input EquityRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input EquityRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type EquityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type EquityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input EquityTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input EquityTransferInput {
  to: String!
  value: String!
}

"""
Get the `pos`-th checkpoint for `account`.
"""
type EquityTuple0CheckpointsOutput {
  _key: Float
  _value: String
}

input EquityUnblockUserInput {
  """
  Address to unblock
  """
  user: String!
}

input EquityWithdrawTokenInput {
  """
  The amount to withdraw
  """
  amount: String!

  """
  The recipient address
  """
  to: String!

  """
  The token to withdraw
  """
  token: String!
}

type FixedYield {
  DEFAULT_ADMIN_ROLE: String

  """
  The basis points denominator used for rate calculations (10,000 = 100%).
  """
  RATE_BASIS_POINTS: String

  """
  Returns all period end timestamps for this yield schedule.
  Array of timestamps when each period ends.
  """
  allPeriods: [String!]

  """
  Calculates the total accrued yield for the caller including pro-rated current period.
  The total accrued yield amount.
  """
  calculateAccruedYield: String

  """
  Calculates the total accrued yield including pro-rated current period.
  The total accrued yield amount.
  """
  calculateAccruedYield1(holder: String!): String

  """
  Returns the current ongoing period number.
  The current period number (0 if schedule hasn't started).
  """
  currentPeriod: String

  """
  Returns the end date of the yield schedule.
  The timestamp when the schedule ends.
  """
  endDate: String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the distribution interval.
  The interval between distributions in seconds.
  """
  interval: String

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the last claimed period for a holder.
  The last period number claimed by the holder.
  """
  lastClaimedPeriod(holder: String!): String

  """
  Returns the last claimed period for the caller.
  The last period number claimed by the caller.
  """
  lastClaimedPeriod2: String

  """
  Returns the last completed period number that can be claimed.
  The last completed period number (0 if no periods completed).
  """
  lastCompletedPeriod: String

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  Returns the period end timestamp for a specific period.
  The timestamp when the period ends.
  """
  periodEnd(period: String!): String

  """
  Returns the yield rate.
  The yield rate in basis points (1 basis point = 0.01%).
  """
  rate: String

  """
  Returns the start date of the yield schedule.
  The timestamp when the schedule starts.
  """
  startDate: String

  """
  See {IERC165-supportsInterface}.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns time until next period starts in seconds.
  Time remaining in current period.
  """
  timeUntilNextPeriod: String

  """
  Returns the token this schedule is for.
  The ERC20 token address.
  """
  token: String

  """
  Calculates the total unclaimed yield across all holders.
  This includes all completed periods that haven't been claimed yet. It iterates through each completed period, using the historical total supply at the end of that period for accurate calculation. This approach is more gas-intensive than using the current total supply but provides correct results if total supply changes over time.
  The total amount of unclaimed yield.
  """
  totalUnclaimedYield: String

  """
  Calculates the total yield that will be needed for the next period.
  This is useful for ensuring sufficient funds are available for the next distribution.
  The total amount of yield needed for the next period.
  """
  totalYieldForNextPeriod: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the underlying asset used for yield payments.
  The underlying asset token address.
  """
  underlyingAsset: String
}

type FixedYieldFactory {
  """
  Array of all fixed yield schedules created by this factory.
  """
  allSchedules(uint2560: String!): String

  """
  Returns the total number of fixed yield schedules created by this factory.
  Provides a way to enumerate all created schedules.
  The total number of yield schedules created.
  """
  allSchedulesLength: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input FixedYieldFactoryCreateInput {
  """
  The timestamp when yield distribution should end (must be after startTime)
  """
  endTime: String!

  """
  The interval between yield distributions in seconds (must be > 0)
  """
  interval: String!

  """
  The yield rate in basis points (1 basis point = 0.01%, e.g., 500 = 5%)
  """
  rate: String!

  """
  The timestamp when yield distribution should start (must be in the future)
  """
  startTime: String!

  """
  The ERC20Yield-compatible token to create the yield schedule for
  """
  token: String!
}

"""
Returns the transaction hash
"""
type FixedYieldFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type FixedYieldFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input FixedYieldGrantRoleInput {
  account: String!
  role: String!
}

input FixedYieldRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input FixedYieldRevokeRoleInput {
  account: String!
  role: String!
}

input FixedYieldTopUpUnderlyingAssetInput {
  """
  The amount of underlying assets to add
  """
  amount: String!
}

"""
Returns the transaction hash
"""
type FixedYieldTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type FixedYieldTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input FixedYieldWithdrawAllUnderlyingAssetInput {
  """
  The address to send the underlying assets to
  """
  to: String!
}

input FixedYieldWithdrawUnderlyingAssetInput {
  """
  The amount of underlying assets to withdraw
  """
  amount: String!

  """
  The address to send the underlying assets to
  """
  to: String!
}

type Forwarder {
  """
  See {IERC-5267}.
  """
  eip712Domain: ForwarderEip712DomainOutput
  id: ID

  """
  Returns the next unused nonce for an address.
  """
  nonces(owner: String!): String
  verify(request: ForwarderVerifyRequestInput!): Boolean
}

type ForwarderEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

input ForwarderExecuteBatchInput {
  refundReceiver: String!
  requests: [ForwarderForwarderExecuteBatchRequestsInput!]!
}

input ForwarderExecuteInput {
  request: ForwarderForwarderExecuteRequestInput!
}

input ForwarderForwarderExecuteBatchRequestsInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

input ForwarderForwarderExecuteRequestInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

"""
Returns the transaction hash
"""
type ForwarderTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ForwarderTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ForwarderVerifyRequestInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

type Fund {
  """
  Machine-readable description of the clock as specified in ERC-6372.
  """
  CLOCK_MODE: String
  DEFAULT_ADMIN_ROLE: String

  """
  Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
  """
  DOMAIN_SEPARATOR: String

  """
  Role identifier for addresses that can manage token supply.
  """
  SUPPLY_MANAGEMENT_ROLE: String

  """
  Role identifier for addresses that can manage users (blocking, unblocking, etc.).
  """
  USER_MANAGEMENT_ROLE: String

  """
  See {IERC20-allowance}.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the available (unfrozen) balance of an account.
  The amount of tokens available for transfer.
  """
  availableBalance(account: String!): FundAvailableBalanceOutput

  """
  See {IERC20-balanceOf}.
  """
  balanceOf(account: String!): String

  """
  Get the `pos`-th checkpoint for `account`.
  """
  checkpoints(account: String!, pos: Float!): FundTuple0CheckpointsOutput

  """
  Returns the current timestamp for voting snapshots.
  Implementation of ERC20Votes clock method for voting delay and period calculations.
  Current block timestamp cast to uint48.
  """
  clock: Float

  """
  Returns the number of decimals used for token amounts.
  Overrides the default ERC20 decimals function to use the configurable value.
  The number of decimals.
  """
  decimals: Int

  """
  Returns the delegate that `account` has chosen.
  """
  delegates(account: String!): String

  """
  See {IERC-5267}.
  """
  eip712Domain: FundEip712DomainOutput

  """
  Returns the amount of tokens frozen for a user.
  """
  frozen(user: String!): String

  """
  Returns the fund category.
  The fund category is immutable after construction.
  The fund category as a string (e.g., "Long/Short Equity", "Global Macro").
  """
  fundCategory: String

  """
  Returns the fund class.
  The fund class is immutable after construction.
  The fund class as a string (e.g., "Hedge Fund", "Mutual Fund").
  """
  fundClass: String

  """
  Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastTotalSupply(timepoint: String!): String

  """
  Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastVotes(account: String!, timepoint: String!): String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns the current amount of votes that `account` has.
  """
  getVotes(account: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the management fee in basis points.
  One basis point equals 0.01%.
  The management fee in basis points.
  """
  managementFeeBps: Int

  """
  Returns the name of the token.
  """
  name: String

  """
  Get the current nonce for an address.
  Required override to resolve ambiguity between ERC20Permit and Nonces.
  The current nonce used for permits and other signed approvals.
  """
  nonces(owner: String!): String

  """
  Get number of checkpoints for `account`.
  """
  numCheckpoints(account: String!): Float

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  See {IERC165-supportsInterface}.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  See {IERC20-totalSupply}.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input FundApproveInput {
  spender: String!
  value: String!
}

type FundAvailableBalanceOutput {
  available: String
}

input FundBlockUserInput {
  """
  Address to block
  """
  user: String!
}

input FundBlockedInput {
  account: String!
}

input FundBurnFromInput {
  account: String!
  value: String!
}

input FundBurnInput {
  value: String!
}

input FundClawbackInput {
  """
  The amount to clawback
  """
  amount: String!

  """
  The address to take tokens from
  """
  from: String!

  """
  The recipient address
  """
  to: String!
}

input FundDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input FundDelegateInput {
  delegatee: String!
}

type FundEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

type FundFactory {
  id: ID

  """
  Checks if an address was deployed by this factory.
  Returns true if the address was created by this factory, false otherwise.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(token: String!): Boolean

  """
  Mapping to track if an address was deployed by this factory.
  """
  isFactoryFund(address0: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the address where a token would be deployed.
  Calculates the deterministic address using CREATE2 with the same parameters and salt computation as the create function. This allows users to know the token's address before deployment.
  The address where the token would be deployed.
  """
  predictAddress(
    decimals: Int!
    fundCategory: String!
    fundClass: String!
    managementFeeBps: Int!
    name: String!
    sender: String!
    symbol: String!
  ): FundFactoryPredictAddressOutput

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input FundFactoryCreateInput {
  """
  The number of decimals for the token (must be <= 18)
  """
  decimals: Int!

  """
  The fund category (e.g., "Long/Short Equity", "Global Macro")
  """
  fundCategory: String!

  """
  The class of the fund (e.g., "Hedge Fund", "Mutual Fund")
  """
  fundClass: String!

  """
  The management fee in basis points (e.g., 100 for 1%, 200 for 2%)
  """
  managementFeeBps: Int!

  """
  The name of the token (e.g., "Global Growth Fund")
  """
  name: String!

  """
  The symbol of the token (e.g., "GGF")
  """
  symbol: String!
}

type FundFactoryPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type FundFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type FundFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input FundFreezeInput {
  """
  The amount of tokens frozen. Requirements: - The user must have sufficient unfrozen balance.
  """
  amount: String!

  """
  The address of the user whose tokens to freeze.
  """
  user: String!
}

input FundGrantRoleInput {
  account: String!
  role: String!
}

input FundMintInput {
  """
  The quantity of tokens to create in base units
  """
  amount: String!

  """
  The address that will receive the minted tokens
  """
  to: String!
}

input FundPermitInput {
  deadline: String!
  owner: String!
  r: String!
  s: String!
  spender: String!
  v: Int!
  value: String!
}

input FundRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input FundRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type FundTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type FundTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input FundTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input FundTransferInput {
  to: String!
  value: String!
}

"""
Get the `pos`-th checkpoint for `account`.
"""
type FundTuple0CheckpointsOutput {
  _key: Float
  _value: String
}

input FundUnblockUserInput {
  """
  Address to unblock
  """
  user: String!
}

input FundWithdrawTokenInput {
  """
  The amount to withdraw
  """
  amount: String!

  """
  The recipient address
  """
  to: String!

  """
  The token to withdraw
  """
  token: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  BondApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Blocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was not previously blocked.
  """
  BondBlockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondBlockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Returns the blocked status of an account.
  """
  BondBlocked(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondBlockedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.
  """
  BondBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.
  """
  BondBurnFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondBurnFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Forcibly transfers tokens from one address to another.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires sufficient balance.
  """
  BondClawback(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondClawbackInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Creates a new bond token with the specified parameters.
  Uses CREATE2 for deterministic addresses, includes reentrancy protection, and validates that the predicted address hasn't been used before.
  The address of the newly created bond token.
  """
  BondFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondFactoryTransactionOutput

  """
  Adjusts the amount of tokens frozen for a user.
  """
  BondFreeze(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondFreezeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  BondGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Closes off the bond at maturity.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE after maturity dateRequires sufficient underlying assets for all potential redemptions.
  """
  BondMature(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Creates new tokens and assigns them to an address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Emits a Transfer event.
  """
  BondMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits a Paused event.
  """
  BondPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.
  """
  BondPermit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondPermitInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Allows redeeming bonds for underlying assets after maturity.
  Can be called multiple times until all bonds are redeemed.
  """
  BondRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Allows redeeming all available bonds for underlying assets after maturity.
  Can only be called after the bond has matured.
  """
  BondRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  BondRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  BondRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Sets the yield schedule for this token.
  Override this function to add additional access control if needed.
  """
  BondSetYieldSchedule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondSetYieldScheduleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Tops up the contract with exactly the amount needed for all redemptions.
  Will revert if no assets are missing or if the transfer fails.
  """
  BondTopUpMissingAmount(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Allows topping up the contract with underlying assets.
  Anyone can top up the contract with underlying assets.
  """
  BondTopUpUnderlyingAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondTopUpUnderlyingAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  BondTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  BondTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Unblocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was previously blocked.
  """
  BondUnblockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondUnblockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits an Unpaused event.
  """
  BondUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Allows withdrawing all excess underlying assets.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  BondWithdrawExcessUnderlyingAssets(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondWithdrawExcessUnderlyingAssetsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Withdraws mistakenly sent tokens from the contract.
  Only callable by admin. Cannot withdraw underlying asset.
  """
  BondWithdrawToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondWithdrawTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  Allows withdrawing excess underlying assets.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  BondWithdrawUnderlyingAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: BondWithdrawUnderlyingAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): BondTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  CryptoCurrencyApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  Creates a new cryptocurrency token with the specified parameters.
  Uses CREATE2 for deterministic addresses, includes reentrancy protection, and validates that the predicted address hasn't been used before.
  The address of the newly created token.
  """
  CryptoCurrencyFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyFactoryTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  CryptoCurrencyGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  Creates new tokens and assigns them to an address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Emits a Transfer event.
  """
  CryptoCurrencyMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.
  """
  CryptoCurrencyPermit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyPermitInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  CryptoCurrencyRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  CryptoCurrencyRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  CryptoCurrencyTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  CryptoCurrencyTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  Withdraws mistakenly sent tokens from the contract.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Cannot withdraw this token.
  """
  CryptoCurrencyWithdrawToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CryptoCurrencyWithdrawTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): CryptoCurrencyTransactionOutput

  """
  Deploy a contract
  """
  DeployContract(
    """
    The ABI of the contract
    """
    abi: JSON!

    """
    The constructor arguments (must be an array)
    """
    constructorArguments: ConstructorArguments

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    The name of the contract
    """
    name: String!

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a Bond contract
  """
  DeployContractBond(
    constructorArguments: DeployContractBondInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a BondFactory contract
  """
  DeployContractBondFactory(
    constructorArguments: DeployContractBondFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a CryptoCurrency contract
  """
  DeployContractCryptoCurrency(
    constructorArguments: DeployContractCryptoCurrencyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a CryptoCurrencyFactory contract
  """
  DeployContractCryptoCurrencyFactory(
    constructorArguments: DeployContractCryptoCurrencyFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a Deposit contract
  """
  DeployContractDeposit(
    constructorArguments: DeployContractDepositInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a DepositFactory contract
  """
  DeployContractDepositFactory(
    constructorArguments: DeployContractDepositFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a Equity contract
  """
  DeployContractEquity(
    constructorArguments: DeployContractEquityInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a EquityFactory contract
  """
  DeployContractEquityFactory(
    constructorArguments: DeployContractEquityFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a FixedYield contract
  """
  DeployContractFixedYield(
    constructorArguments: DeployContractFixedYieldInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a FixedYieldFactory contract
  """
  DeployContractFixedYieldFactory(
    constructorArguments: DeployContractFixedYieldFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a Forwarder contract
  """
  DeployContractForwarder(
    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a Fund contract
  """
  DeployContractFund(
    constructorArguments: DeployContractFundInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a FundFactory contract
  """
  DeployContractFundFactory(
    constructorArguments: DeployContractFundFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a StableCoin contract
  """
  DeployContractStableCoin(
    constructorArguments: DeployContractStableCoinInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a StableCoinFactory contract
  """
  DeployContractStableCoinFactory(
    constructorArguments: DeployContractStableCoinFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String
  ): ContractDeploymentTransactionOutput

  """
  Blocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was not previously blocked.
  """
  DepositAllowUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositAllowUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Returns the allowed status of an account.
  """
  DepositAllowed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositAllowedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  DepositApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.
  """
  DepositBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.
  """
  DepositBurnFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositBurnFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Forcibly transfers tokens from one address to another.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires sufficient balance.
  """
  DepositClawback(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositClawbackInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Unblocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was previously blocked.
  """
  DepositDisallowUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositDisallowUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Creates a new tokenized deposit token with the specified parameters.
  Uses CREATE2 for deterministic addresses, includes reentrancy protection, and validates that the predicted address hasn't been used before.
  The address of the newly created token.
  """
  DepositFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositFactoryTransactionOutput

  """
  Adjusts the amount of tokens frozen for a user.
  """
  DepositFreeze(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositFreezeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  DepositGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Creates new tokens and assigns them to an address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires sufficient collateral.
  """
  DepositMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits a Paused event.
  """
  DepositPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.
  """
  DepositPermit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositPermitInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  DepositRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  DepositRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  DepositTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  DepositTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits an Unpaused event.
  """
  DepositUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Updates the proven collateral amount with a timestamp.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires collateral >= total supply.
  """
  DepositUpdateCollateral(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositUpdateCollateralInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  Withdraws mistakenly sent tokens from the contract.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Cannot withdraw this token.
  """
  DepositWithdrawToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: DepositWithdrawTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): DepositTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  EquityApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Blocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was not previously blocked.
  """
  EquityBlockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityBlockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Returns the blocked status of an account.
  """
  EquityBlocked(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityBlockedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.
  """
  EquityBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.
  """
  EquityBurnFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityBurnFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Forcibly transfers tokens from one address to another.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires sufficient balance.
  """
  EquityClawback(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityClawbackInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Delegates votes from the sender to `delegatee`.
  """
  EquityDelegate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityDelegateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Delegates votes from signer to `delegatee`.
  """
  EquityDelegateBySig(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityDelegateBySigInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Creates a new equity token with the specified parameters.
  Uses CREATE2 for deterministic addresses, includes reentrancy protection, and validates that the predicted address hasn't been used before.
  The address of the newly created token.
  """
  EquityFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityFactoryTransactionOutput

  """
  Adjusts the amount of tokens frozen for a user.
  """
  EquityFreeze(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityFreezeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  EquityGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Creates new tokens and assigns them to an address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Emits a Transfer event.
  """
  EquityMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits a Paused event.
  """
  EquityPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.
  """
  EquityPermit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityPermitInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  EquityRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  EquityRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  EquityTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  EquityTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Unblocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was previously blocked.
  """
  EquityUnblockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityUnblockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits an Unpaused event.
  """
  EquityUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Withdraws mistakenly sent tokens from the contract.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Cannot withdraw this token.
  """
  EquityWithdrawToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: EquityWithdrawTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): EquityTransactionOutput

  """
  Claims all available yield for the caller.
  Calculates and transfers all unclaimed yield for completed periods.
  """
  FixedYieldClaimYield(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Creates a new fixed yield schedule for a token.
  Uses CREATE2 for deterministic addresses and requires the caller to have yield management permissions on the token. Automatically sets the created schedule on the token. The schedule will distribute yield according to the specified rate and interval.
  The address of the newly created yield schedule.
  """
  FixedYieldFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FixedYieldFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldFactoryTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  FixedYieldGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FixedYieldGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Pauses the contract.
  Only callable by admin.
  """
  FixedYieldPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  FixedYieldRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FixedYieldRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  FixedYieldRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FixedYieldRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Allows topping up the contract with underlying assets for yield payments.
  """
  FixedYieldTopUpUnderlyingAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FixedYieldTopUpUnderlyingAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Unpauses the contract.
  Only callable by admin.
  """
  FixedYieldUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Withdraws all underlying assets.
  Only callable by admin.
  """
  FixedYieldWithdrawAllUnderlyingAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FixedYieldWithdrawAllUnderlyingAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput

  """
  Withdraws underlying assets.
  Only callable by admin.
  """
  FixedYieldWithdrawUnderlyingAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FixedYieldWithdrawUnderlyingAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FixedYieldTransactionOutput
  ForwarderExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ForwarderExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ForwarderTransactionOutput
  ForwarderExecuteBatch(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ForwarderExecuteBatchInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ForwarderTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  FundApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Blocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was not previously blocked.
  """
  FundBlockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundBlockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Returns the blocked status of an account.
  """
  FundBlocked(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundBlockedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.
  """
  FundBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.
  """
  FundBurnFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundBurnFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Forcibly transfers tokens from one address to another.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires sufficient balance.
  """
  FundClawback(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundClawbackInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Collects management fee based on time elapsed and assets under management.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Fee is calculated as: (AUM * fee_rate * time_elapsed) / (100% * 1 year).
  The amount of tokens minted as management fee.
  """
  FundCollectManagementFee(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Delegates votes from the sender to `delegatee`.
  """
  FundDelegate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundDelegateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Delegates votes from signer to `delegatee`.
  """
  FundDelegateBySig(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundDelegateBySigInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Creates a new fund token with the specified parameters.
  Uses CREATE2 for deterministic addresses, includes reentrancy protection, and validates that the predicted address hasn't been used before.
  The address of the newly created token.
  """
  FundFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundFactoryTransactionOutput

  """
  Adjusts the amount of tokens frozen for a user.
  """
  FundFreeze(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundFreezeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  FundGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Creates new tokens and assigns them to an address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Emits a Transfer event.
  """
  FundMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits a Paused event.
  """
  FundPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.
  """
  FundPermit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundPermitInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  FundRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  FundRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  FundTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  FundTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Unblocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was previously blocked.
  """
  FundUnblockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundUnblockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits an Unpaused event.
  """
  FundUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  Withdraws mistakenly sent tokens from the contract.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Cannot withdraw this token.
  """
  FundWithdrawToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: FundWithdrawTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): FundTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  StableCoinApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Blocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was not previously blocked.
  """
  StableCoinBlockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinBlockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Returns the blocked status of an account.
  """
  StableCoinBlocked(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinBlockedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.
  """
  StableCoinBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.
  """
  StableCoinBurnFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinBurnFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Forcibly transfers tokens from one address to another.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires sufficient balance.
  """
  StableCoinClawback(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinClawbackInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Creates a new stablecoin token with the specified parameters.
  Uses CREATE2 for deterministic addresses, includes reentrancy protection, and validates that the predicted address hasn't been used before.
  The address of the newly created token.
  """
  StableCoinFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinFactoryTransactionOutput

  """
  Adjusts the amount of tokens frozen for a user.
  """
  StableCoinFreeze(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinFreezeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  StableCoinGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Creates new tokens and assigns them to an address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Requires sufficient collateral.
  """
  StableCoinMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits a Paused event.
  """
  StableCoinPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.
  """
  StableCoinPermit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinPermitInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  StableCoinRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  StableCoinRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  StableCoinTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  StableCoinTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Unblocks a user from token operations.
  Only callable by addresses with USER_MANAGEMENT_ROLE.
  True if user was previously blocked.
  """
  StableCoinUnblockUser(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinUnblockUserInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Emits an Unpaused event.
  """
  StableCoinUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Updates the proven collateral amount with a timestamp.
  Only callable by addresses with AUDITOR_ROLE. Requires collateral >= total supply.
  """
  StableCoinUpdateCollateral(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinUpdateCollateralInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput

  """
  Withdraws mistakenly sent tokens from the contract.
  Only callable by addresses with DEFAULT_ADMIN_ROLE. Cannot withdraw this token.
  """
  StableCoinWithdrawToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: StableCoinWithdrawTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): StableCoinTransactionOutput
  createWallet(
    """
    The ID of the key vault where the wallet will be created
    """
    keyVaultId: String!

    """
    Information about the wallet to be created
    """
    walletInfo: CreateWalletInfoInput!
  ): CreateWalletOutput

  """
  Create a new verification for a specific user wallet
  """
  createWalletVerification(
    """
    The Ethereum address of the user wallet
    """
    userWalletAddress: String!
    verificationInfo: CreateWalletVerificationInput!
  ): CreateWalletVerificationOutput

  """
  Generates and returns challenges for all or specific verification methods of a user's wallet
  """
  createWalletVerificationChallenges(
    """
    Ethereum address of the user's wallet
    """
    userWalletAddress: String!

    """
    Optional unique identifier of the verification to create challenges for
    """
    verificationId: String
  ): [WalletVerificationChallenge!]

  """
  Removes a specific verification method from a user's wallet
  """
  deleteWalletVerification(
    """
    Ethereum address of the user's wallet
    """
    userWalletAddress: String!

    """
    Unique identifier of the verification to delete
    """
    verificationId: String!
  ): DeleteWalletVerificationOutput

  """
  Verifies the response to a wallet verification challenge
  """
  verifyWalletVerificationChallenge(
    """
    The response to the verification challenge
    """
    challengeResponse: String!

    """
    Ethereum address of the user's wallet
    """
    userWalletAddress: String!

    """
    Optional unique identifier of the specific verification to verify
    """
    verificationId: String
  ): VerifyWalletVerificationChallengeOutput
}

"""
Algorithm used for OTP verification
"""
enum OTPAlgorithm {
  SHA1
  SHA3_224
  SHA3_256
  SHA3_384
  SHA3_512
  SHA224
  SHA256
  SHA384
  SHA512
}

input OTPSettingsInput {
  """
  The algorithm for OTP verification
  """
  algorithm: OTPAlgorithm

  """
  The number of digits for OTP verification
  """
  digits: Int

  """
  The issuer for OTP verification
  """
  issuer: String

  """
  The name of the OTP verification
  """
  name: String!

  """
  The period (in seconds) for OTP verification
  """
  period: Int
}

input PincodeSettingsInput {
  """
  The name of the PINCODE verification
  """
  name: String!

  """
  The pincode for PINCODE verification
  """
  pincode: String!
}

type Query {
  Bond(
    """
    The address of the contract
    """
    address: String!
  ): Bond

  """
  Fetches the receipt for the given transaction hash
  """
  BondApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondBlockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondBlockedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondBurnFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondClawbackReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput
  BondFactory(
    """
    The address of the contract
    """
    address: String!
  ): BondFactory

  """
  Fetches the receipt for the given transaction hash
  """
  BondFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondFreezeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondMatureReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondPermitReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondSetYieldScheduleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondTopUpMissingAmountReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondTopUpUnderlyingAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondUnblockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondWithdrawExcessUnderlyingAssetsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondWithdrawTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  BondWithdrawUnderlyingAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): BondTransactionReceiptOutput
  CryptoCurrency(
    """
    The address of the contract
    """
    address: String!
  ): CryptoCurrency

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput
  CryptoCurrencyFactory(
    """
    The address of the contract
    """
    address: String!
  ): CryptoCurrencyFactory

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyPermitReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CryptoCurrencyWithdrawTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CryptoCurrencyTransactionReceiptOutput
  Deposit(
    """
    The address of the contract
    """
    address: String!
  ): Deposit

  """
  Fetches the receipt for the given transaction hash
  """
  DepositAllowUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositAllowedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositBurnFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositClawbackReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositDisallowUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput
  DepositFactory(
    """
    The address of the contract
    """
    address: String!
  ): DepositFactory

  """
  Fetches the receipt for the given transaction hash
  """
  DepositFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositFreezeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositPermitReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositUpdateCollateralReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  DepositWithdrawTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): DepositTransactionReceiptOutput
  Equity(
    """
    The address of the contract
    """
    address: String!
  ): Equity

  """
  Fetches the receipt for the given transaction hash
  """
  EquityApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityBlockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityBlockedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityBurnFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityClawbackReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityDelegateBySigReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityDelegateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput
  EquityFactory(
    """
    The address of the contract
    """
    address: String!
  ): EquityFactory

  """
  Fetches the receipt for the given transaction hash
  """
  EquityFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityFreezeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityPermitReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityUnblockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  EquityWithdrawTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): EquityTransactionReceiptOutput
  FixedYield(
    """
    The address of the contract
    """
    address: String!
  ): FixedYield

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldClaimYieldReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput
  FixedYieldFactory(
    """
    The address of the contract
    """
    address: String!
  ): FixedYieldFactory

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldTopUpUnderlyingAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldWithdrawAllUnderlyingAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FixedYieldWithdrawUnderlyingAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FixedYieldTransactionReceiptOutput
  Forwarder(
    """
    The address of the contract
    """
    address: String!
  ): Forwarder

  """
  Fetches the receipt for the given transaction hash
  """
  ForwarderExecuteBatchReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ForwarderTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ForwarderExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ForwarderTransactionReceiptOutput
  Fund(
    """
    The address of the contract
    """
    address: String!
  ): Fund

  """
  Fetches the receipt for the given transaction hash
  """
  FundApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundBlockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundBlockedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundBurnFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundClawbackReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundCollectManagementFeeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundDelegateBySigReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundDelegateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput
  FundFactory(
    """
    The address of the contract
    """
    address: String!
  ): FundFactory

  """
  Fetches the receipt for the given transaction hash
  """
  FundFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundFreezeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundPermitReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundUnblockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  FundWithdrawTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): FundTransactionReceiptOutput
  StableCoin(
    """
    The address of the contract
    """
    address: String!
  ): StableCoin

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinBlockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinBlockedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinBurnFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinClawbackReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput
  StableCoinFactory(
    """
    The address of the contract
    """
    address: String!
  ): StableCoinFactory

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinFreezeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinPermitReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinUnblockUserReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinUpdateCollateralReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  StableCoinWithdrawTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): StableCoinTransactionReceiptOutput

  """
  Get all contracts
  """
  getContracts(
    """
    The name of the ABI to filter by
    """
    abiName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the Bond ABI
  """
  getContractsBond(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the BondFactory ABI
  """
  getContractsBondFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the CryptoCurrency ABI
  """
  getContractsCryptoCurrency(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the CryptoCurrencyFactory ABI
  """
  getContractsCryptoCurrencyFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the Deposit ABI
  """
  getContractsDeposit(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the DepositFactory ABI
  """
  getContractsDepositFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the Equity ABI
  """
  getContractsEquity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the EquityFactory ABI
  """
  getContractsEquityFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the FixedYield ABI
  """
  getContractsFixedYield(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the FixedYieldFactory ABI
  """
  getContractsFixedYieldFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the Forwarder ABI
  """
  getContractsForwarder(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the Fund ABI
  """
  getContractsFund(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the FundFactory ABI
  """
  getContractsFundFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the StableCoin ABI
  """
  getContractsStableCoin(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the StableCoinFactory ABI
  """
  getContractsStableCoinFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get the list of pending and recently processed transactions
  """
  getPendingAndRecentlyProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-04-30T13:09:51.299Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get the list of pending transactions
  """
  getPendingTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """
  Get the list of processed transactions
  """
  getProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-04-30T13:09:51.302Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get a transaction
  """
  getTransaction(
    """
    Transaction hash
    """
    transactionHash: String!
  ): TransactionOutput

  """
  Get transaction counts over time
  """
  getTransactionsTimeline(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Granularity of the timeline
    """
    granularity: TransactionTimelineGranularity!

    """
    Processed after date, use json like date format (eg 2025-04-30T13:09:51.302Z)
    """
    processedAfter: String

    """
    Timeline end date, use json like date format(eg 2025-04-30T13:09:51.302Z) (for month and year interval the last day of the month or year is used). Defaults to the current date.
    """
    timelineEndDate: String

    """
    Timeline start date, use json like date format (eg 2025-04-30T13:09:51.302Z) (for month and year interval the first day of the month or year is used)
    """
    timelineStartDate: String!
  ): [TransactionTimelineOutput!]

  """
  Retrieves all active verification methods for a user's wallet
  """
  getWalletVerifications(
    """
    Ethereum address of the user's wallet
    """
    userWalletAddress: String!
  ): [WalletVerification!]
}

input SecretCodesSettingsInput {
  """
  The name of the secret codes verification
  """
  name: String!
}

type StableCoin {
  """
  Role identifier for addresses that can audit the collateral.
  """
  AUDITOR_ROLE: String

  """
  Description of the clock.
  """
  CLOCK_MODE: String
  DEFAULT_ADMIN_ROLE: String

  """
  Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
  """
  DOMAIN_SEPARATOR: String

  """
  Role identifier for addresses that can manage token supply.
  """
  SUPPLY_MANAGEMENT_ROLE: String

  """
  Role identifier for addresses that can manage users (blocking, unblocking, etc.).
  """
  USER_MANAGEMENT_ROLE: String

  """
  See {IERC20-allowance}.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the available (unfrozen) balance of an account.
  The amount of tokens available for transfer.
  """
  availableBalance(account: String!): StableCoinAvailableBalanceOutput

  """
  See {IERC20-balanceOf}.
  """
  balanceOf(account: String!): String

  """
  Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).
  """
  clock: Float

  """
  Returns current collateral amount and timestamp.
  Implements the ERC20Collateral interface.
  Current proven collateral amount, Timestamp when the collateral was last proven.
  """
  collateral: StableCoinCollateralOutput

  """
  Returns the number of decimals used for token amounts.
  Overrides the default ERC20 decimals function to use the configurable value.
  The number of decimals.
  """
  decimals: Int

  """
  See {IERC-5267}.
  """
  eip712Domain: StableCoinEip712DomainOutput

  """
  Returns the amount of tokens frozen for a user.
  """
  frozen(user: String!): String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the timestamp of the last collateral update.
  Returns the timestamp of the last collateral update.
  The timestamp of the last collateral update.
  """
  lastCollateralUpdate: String

  """
  Returns the minimum liveness duration of collateral.
  """
  liveness: Float

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.
  """
  nonces(owner: String!): String

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  See {IERC165-supportsInterface}.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  See {IERC20-totalSupply}.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input StableCoinApproveInput {
  spender: String!
  value: String!
}

type StableCoinAvailableBalanceOutput {
  available: String
}

input StableCoinBlockUserInput {
  """
  Address to block
  """
  user: String!
}

input StableCoinBlockedInput {
  account: String!
}

input StableCoinBurnFromInput {
  account: String!
  value: String!
}

input StableCoinBurnInput {
  value: String!
}

input StableCoinClawbackInput {
  """
  The amount to clawback
  """
  amount: String!

  """
  The address to take tokens from
  """
  from: String!

  """
  The recipient address
  """
  to: String!
}

type StableCoinCollateralOutput {
  amount: String
  timestamp: Float
}

type StableCoinEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

type StableCoinFactory {
  id: ID

  """
  Checks if an address was deployed by this factory.
  Returns true if the address was created by this factory, false otherwise.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(token: String!): Boolean

  """
  Mapping to track if an address was deployed by this factory.
  """
  isFactoryToken(address0: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the address where a token would be deployed.
  Calculates the deterministic address using CREATE2 with the same parameters and salt computation as the create function. This allows users to know the token's address before deployment.
  The address where the token would be deployed.
  """
  predictAddress(
    collateralLivenessSeconds: Float!
    decimals: Int!
    name: String!
    sender: String!
    symbol: String!
  ): StableCoinFactoryPredictAddressOutput

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input StableCoinFactoryCreateInput {
  """
  Duration in seconds that collateral proofs remain valid (must be > 0)
  """
  collateralLivenessSeconds: Float!

  """
  The number of decimals for the token (must be <= 18)
  """
  decimals: Int!

  """
  The name of the token (e.g., "USD Stablecoin")
  """
  name: String!

  """
  The symbol of the token (e.g., "USDS")
  """
  symbol: String!
}

type StableCoinFactoryPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type StableCoinFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type StableCoinFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input StableCoinFreezeInput {
  """
  The amount of tokens frozen. Requirements: - The user must have sufficient unfrozen balance.
  """
  amount: String!

  """
  The address of the user whose tokens to freeze.
  """
  user: String!
}

input StableCoinGrantRoleInput {
  account: String!
  role: String!
}

input StableCoinMintInput {
  """
  The quantity of tokens to create in base units
  """
  amount: String!

  """
  The address that will receive the minted tokens
  """
  to: String!
}

input StableCoinPermitInput {
  deadline: String!
  owner: String!
  r: String!
  s: String!
  spender: String!
  v: Int!
  value: String!
}

input StableCoinRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input StableCoinRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type StableCoinTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type StableCoinTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input StableCoinTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input StableCoinTransferInput {
  to: String!
  value: String!
}

input StableCoinUnblockUserInput {
  """
  Address to unblock
  """
  user: String!
}

input StableCoinUpdateCollateralInput {
  """
  New collateral amount
  """
  amount: String!
}

input StableCoinWithdrawTokenInput {
  """
  The amount to withdraw
  """
  amount: String!

  """
  The recipient address
  """
  to: String!

  """
  The token to withdraw
  """
  token: String!
}

type Subscription {
  """
  Get the list of pending and recently processed transactions
  """
  getPendingAndRecentlyProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-04-30T13:09:51.299Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get the list of pending transactions
  """
  getPendingTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """
  Get the list of processed transactions
  """
  getProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-04-30T13:09:51.302Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get a transaction
  """
  getTransaction(
    """
    Transaction hash
    """
    transactionHash: String!
  ): TransactionOutput
}

"""
Returns the transaction
"""
type TransactionOutput {
  """
  Contract address
  """
  address: String!

  """
  Created at
  """
  createdAt: String

  """
  From address
  """
  from: String!

  """
  Function name
  """
  functionName: String!

  """
  Whether the transaction is a smart contract deployment
  """
  isContract: Boolean!

  """
  Metadata
  """
  metadata: JSON

  """
  Receipt
  """
  receipt: TransactionReceiptOutput

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Created at
  """
  updatedAt: String
}

"""
The transaction receipt
"""
type TransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

enum TransactionReceiptStatus {
  Reverted
  Success
}

"""
Granularity
"""
enum TransactionTimelineGranularity {
  DAY
  HOUR
  MONTH
  YEAR
}

type TransactionTimelineOutput {
  """
  Count of transactions
  """
  count: Int

  """
  End date
  """
  end: String

  """
  Start date
  """
  start: String
}

"""
Transactions paginated output
"""
type TransactionsPaginatedOutput {
  """
  Total number of results
  """
  count: Int!
  records: [TransactionOutput!]!
}

"""
User operation receipt
"""
type UserOperationReceipt {
  """
  Actual gas cost
  """
  actualGasCost: String

  """
  Actual gas used
  """
  actualGasUsed: String

  """
  Entry point address
  """
  entryPoint: String

  """
  Operation logs
  """
  logs: [String!]

  """
  Nonce
  """
  nonce: String

  """
  Sender address
  """
  sender: String

  """
  Whether the operation was successful
  """
  success: Boolean

  """
  User operation hash
  """
  userOpHash: String
}

"""
Result of verifying a wallet verification challenge
"""
type VerifyWalletVerificationChallengeOutput {
  """
  Indicates whether the verification challenge was successful
  """
  verified: Boolean
}

"""
Wallet verification details
"""
type WalletVerification {
  """
  Unique identifier of the verification
  """
  id: String

  """
  Name of the verification
  """
  name: String

  """
  Type of the created wallet verification
  """
  verificationType: WalletVerificationType
}

"""
Wallet verification challenge
"""
type WalletVerificationChallenge {
  """
  Challenge object
  """
  challenge: JSON

  """
  Unique identifier of the verification
  """
  id: String

  """
  Name of the verification
  """
  name: String

  """
  Type of the created wallet verification
  """
  verificationType: WalletVerificationType
}

"""
Verification type
"""
enum WalletVerificationType {
  OTP
  PINCODE
  SECRET_CODES
}
