type ATKAirdrop {
  """
  Maximum number of items allowed in batch operations to prevent OOM and gas limit issues.
  """
  MAX_BATCH_SIZE: String

  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String
  id: ID

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the address of the current owner.
  """
  owner: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKAirdropBatchClaimInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proofs for each index.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input ATKAirdropClaimInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

"""
Returns the transaction hash
"""
type ATKAirdropTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKAirdropTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKAirdropTransferOwnershipInput {
  newOwner: String!
}

input ATKAirdropWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type ATKAmountClaimTracker {
  """
  Gets the amount already claimed for a specific index.
  The cumulative amount already claimed for this index.
  """
  getClaimedAmount(index: String!): ATKAmountClaimTrackerGetClaimedAmountOutput
  id: ID

  """
  Checks if a new claim amount is valid for a specific index.
  True if the new claim amount is valid, false otherwise.
  """
  isClaimAmountValid(
    claimAmount: String!
    index: String!
    totalAmount: String!
  ): ATKAmountClaimTrackerIsClaimAmountValidOutput

  """
  Checks if a claim has been fully claimed for a specific index.
  A claim is considered fully claimed when the claimed amount equals or exceeds the total amount.
  True if the index has been fully claimed, false otherwise.
  """
  isClaimed(
    index: String!
    totalAmount: String!
  ): ATKAmountClaimTrackerIsClaimedOutput

  """
  Returns the address of the current owner.
  """
  owner: String
}

type ATKAmountClaimTrackerGetClaimedAmountOutput {
  claimedAmount: String
}

type ATKAmountClaimTrackerIsClaimAmountValidOutput {
  isValid: Boolean
}

type ATKAmountClaimTrackerIsClaimedOutput {
  claimed: Boolean
}

input ATKAmountClaimTrackerRecordClaimInput {
  """
  The amount being claimed.
  """
  claimedAmount: String!

  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

"""
Returns the transaction hash
"""
type ATKAmountClaimTrackerTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKAmountClaimTrackerTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKAmountClaimTrackerTransferOwnershipInput {
  newOwner: String!
}

type ATKAssetProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKAssetProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKAssetProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKAssetRoles {
  """
  Role for custodial operations including freezing accounts, forced transfers, and recovery.
  """
  CUSTODIAN_ROLE: String

  """
  The default admin role that can grant and revoke other roles.
  """
  DEFAULT_ADMIN_ROLE: String

  """
  Role for emergency operations including pausing the contract and ERC20 recovery.
  """
  EMERGENCY_ROLE: String

  """
  Role for managing token governance, verification, and compliance.
  """
  GOVERNANCE_ROLE: String

  """
  Role for managing token supply operations.
  """
  SUPPLY_MANAGEMENT_ROLE: String
  id: ID
}

"""
Returns the transaction hash
"""
type ATKAssetRolesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKAssetRolesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKBitmapClaimTracker {
  """
  Gets the amount already claimed for a specific index.
  For bitmap tracking, returns either 0 (not claimed) or the total amount (fully claimed).
  0 if not claimed, or a very large number to indicate fully claimed.
  """
  getClaimedAmount(index: String!): ATKBitmapClaimTrackerGetClaimedAmountOutput
  id: ID

  """
  Checks if a new claim amount is valid for a specific index.
  For bitmap tracking, only valid if the index hasn't been claimed yet.      The second and third parameters are kept for interface compatibility but not used in logic.
  True if the index hasn't been claimed yet, false otherwise.
  """
  isClaimAmountValid(
    index: String!
    uint2561: String!
    uint2562: String!
  ): ATKBitmapClaimTrackerIsClaimAmountValidOutput

  """
  Checks if a claim has been fully claimed for a specific index.
  For bitmap tracking, once claimed, the full amount is always claimed.      The second parameter is kept for interface compatibility but not used in logic.
  True if the index has been claimed, false otherwise.
  """
  isClaimed(
    index: String!
    uint2561: String!
  ): ATKBitmapClaimTrackerIsClaimedOutput

  """
  Returns the address of the current owner.
  """
  owner: String
}

type ATKBitmapClaimTrackerGetClaimedAmountOutput {
  claimedAmount: String
}

type ATKBitmapClaimTrackerIsClaimAmountValidOutput {
  isValid: Boolean
}

type ATKBitmapClaimTrackerIsClaimedOutput {
  claimed: Boolean
}

input ATKBitmapClaimTrackerRecordClaimInput {
  """
  The amount being claimed.
  """
  claimedAmount: String!

  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

"""
Returns the transaction hash
"""
type ATKBitmapClaimTrackerTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKBitmapClaimTrackerTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKBitmapClaimTrackerTransferOwnershipInput {
  newOwner: String!
}

type ATKBondFactoryImplementation {
  """
  Type identifier for the bond factory implementation.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an access manager address was deployed by this factory.
  """
  isFactoryAccessManager(
    accessManagerAddress: String!
  ): ATKBondFactoryImplementationIsFactoryAccessManagerOutput

  """
  Mapping indicating whether a token address was deployed by this factory.
  """
  isFactoryToken(
    tokenAddress: String!
  ): ATKBondFactoryImplementationIsFactoryTokenOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a given address implements the IATKBond interface.
  bool True if the contract supports the IATKBond interface, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictBondAddress(
    bondParams: ATKBondFactoryImplementationPredictBondAddressBondParamsInput!
    cap_: String!
    decimals_: Int!
    initialModulePairs_: [ATKBondFactoryImplementationPredictBondAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): ATKBondFactoryImplementationPredictBondAddressOutput

  """
  Check if the contract supports a specific interface.
  bool True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the type identifier for this factory.
  The bytes32 type identifier.
  """
  typeId: String
}

input ATKBondFactoryImplementationATKBondFactoryImplementationCreateBondBondParamsInput {
  denominationAsset: String!
  faceValue: String!
  maturityDate: String!
}

input ATKBondFactoryImplementationATKBondFactoryImplementationCreateBondInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKBondFactoryImplementationCreateBondInput {
  bondParams: ATKBondFactoryImplementationATKBondFactoryImplementationCreateBondBondParamsInput!
  cap_: String!
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [ATKBondFactoryImplementationATKBondFactoryImplementationCreateBondInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKBondFactoryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The initial address of the token implementation contract.
  """
  tokenImplementation_: String!
}

type ATKBondFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKBondFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKBondFactoryImplementationPredictBondAddressBondParamsInput {
  denominationAsset: String!
  faceValue: String!
  maturityDate: String!
}

input ATKBondFactoryImplementationPredictBondAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKBondFactoryImplementationPredictBondAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKBondFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKBondFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKBondFactoryImplementationUpdateTokenImplementationInput {
  """
  The new address for the token implementation contract. Cannot be the zero address.
  """
  newImplementation: String!
}

type ATKBondImplementation {
  """
  Provides a EIP-5267 EIP-2771-compatible machine-readable description of the clock mechanism.
  For this implementation, it indicates that the `clock()` function uses `block.timestamp`.      This helps off-chain tools and other contracts understand how time is measured for checkpoints.
  clockMode A string literal "mode=timestamp".
  """
  CLOCK_MODE: String

  """
  Returns the address of the current `SMARTTokenAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the token balance of `account` at a specific past `timepoint`.
  It uses `_balanceCheckpoints[account].upperLookupRecent()` from OpenZeppelin's `Checkpoints` library.      `upperLookupRecent` finds the checkpoint value at or before the given `timepoint`.      Reverts with `FutureLookup` error if `timepoint` is not in the past (i.e., >= `clock()`).      `timepoint` is cast to `uint48` to match the `Checkpoints` library's timestamp format.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String

  """
  Tracks how many bonds each holder has redeemed.
  """
  bondRedeemed(holder: String!): ATKBondImplementationBondRedeemedOutput

  """
  Permission check: can `actor` add a claim?.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim?.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Returns the maximum allowed total supply for this token (the "cap").
  This public view function implements the `cap()` function from the `ISMARTCapped` interface.      It allows anyone to query the token's cap.      The `override` keyword is not strictly needed here as it's implementing an interface function      in an abstract contract, but it can be good practice. If ISMARTCapped was a contract, it would be required.
  uint256 The maximum number of tokens that can be in circulation.
  """
  cap: String

  """
  Returns the current timepoint value used for creating new checkpoints.
  By default, this implementation uses `block.timestamp` (the timestamp of the current block)      casted to `uint48`. `uint48` is chosen by OpenZeppelin's `Checkpoints` as it's sufficient for      timestamps for many decades and saves storage.      This function can be overridden in derived contracts if a different time source (e.g., `block.number`)      is desired, but `block.timestamp` is generally preferred for time-based logic.
  uint48 The current timepoint (default: `block.timestamp` as `uint48`).
  """
  clock: Float

  """
  Returns the `ISMARTCompliance` contract instance used by this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  ISMARTCompliance The current compliance contract.
  """
  compliance: String

  """
  Returns a list of all active compliance modules and their current parameters.
  Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
  SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
  """
  complianceModules: [ATKBondImplementationTuple0ComplianceModulesOutput!]

  """
  Returns the number of decimals for the token.
  Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.
  uint8 The number of decimals.
  """
  decimals: Int

  """
  Returns the denomination asset contract.
  The ERC20 contract of the denomination asset.
  """
  denominationAsset: String

  """
  Returns the amount of denomination assets held by the contract.
  The balance of denomination assets.
  """
  denominationAssetBalance: String

  """
  Returns the face value of the bond.
  The bond's face value in denomination asset base units.
  """
  faceValue: String

  """
  Gets the amount of tokens specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The value stored in `__frozenTokens[userAddress]`.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the `ISMARTIdentityRegistry` contract instance used by this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  ISMARTIdentityRegistry The current identity registry contract.
  """
  identityRegistry: String

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if `__frozen[userAddress]` is true, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Tracks whether the bond has matured.
  """
  isMatured: Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the timestamp when the bond matures.
  The maturity date timestamp.
  """
  maturityDate: String

  """
  Returns the amount of denomination assets missing for all potential redemptions.
  The amount of denomination assets missing (0 if there's enough or excess).
  """
  missingDenominationAssetAmount: String

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the ONCHAINID associated with this contract.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  Reads the private `_paused` state variable.
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Standard ERC165 function to check interface support in an upgradeable context.
  Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.
  bool `true` if the interface is supported, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the total amount of denomination assets needed for all potential redemptions.
  The total amount of denomination assets needed.
  """
  totalDenominationAssetNeeded: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Retrieves the total token supply at a specific past `timepoint`.
  Works similarly to `balanceOfAt`, using `_totalSupplyCheckpoints.upperLookupRecent()`.      Reverts with `FutureLookup` for non-past timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the amount of excess denomination assets that can be withdrawn.
  The amount of excess denomination assets.
  """
  withdrawableDenominationAssetAmount: String

  """
  Returns the yield basis per unit for a given address.
  Returns the face value of the bond. The address parameter is unused in this implementation.
  The face value representing the yield basis per unit.
  """
  yieldBasisPerUnit(address0: String!): String

  """
  The address of the smart contract that defines the yield schedule for this token.
  """
  yieldSchedule: String

  """
  Returns the token used for yield payments.
  Returns the denomination asset contract.
  The IERC20 token used for yield payments.
  """
  yieldToken: String
}

input ATKBondImplementationATKBondImplementationInitializeBondParamsInput {
  denominationAsset: String!
  faceValue: String!
  maturityDate: String!
}

input ATKBondImplementationATKBondImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKBondImplementationAddComplianceModuleInput {
  """
  The address of the compliance module to add
  """
  _module: String!

  """
  The initialization parameters for the module
  """
  _params: String!
}

input ATKBondImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKBondImplementationBatchBurnInput {
  """
  Array of amounts to burn from each address
  """
  amounts: [String!]!

  """
  Array of addresses to burn tokens from
  """
  userAddresses: [String!]!
}

input ATKBondImplementationBatchForcedTransferInput {
  """
  Array of amounts to transfer
  """
  amounts: [String!]!

  """
  Array of addresses to transfer tokens from
  """
  fromList: [String!]!

  """
  Array of addresses to transfer tokens to
  """
  toList: [String!]!
}

input ATKBondImplementationBatchFreezePartialTokensInput {
  """
  Array of amounts to freeze for each address
  """
  amounts: [String!]!

  """
  Array of addresses to freeze tokens for
  """
  userAddresses: [String!]!
}

input ATKBondImplementationBatchMintInput {
  """
  Array of amounts to mint to each address
  """
  _amounts: [String!]!

  """
  Array of addresses to mint tokens to
  """
  _toList: [String!]!
}

input ATKBondImplementationBatchSetAddressFrozenInput {
  """
  Array of booleans indicating freeze (true) or unfreeze (false) for each address
  """
  freeze: [Boolean!]!

  """
  Array of addresses to freeze/unfreeze
  """
  userAddresses: [String!]!
}

input ATKBondImplementationBatchTransferInput {
  """
  An array of corresponding token amounts.
  """
  amounts: [String!]!

  """
  An array of recipient addresses.
  """
  toList: [String!]!
}

input ATKBondImplementationBatchUnfreezePartialTokensInput {
  """
  Array of amounts to unfreeze for each address
  """
  amounts: [String!]!

  """
  Array of addresses to unfreeze tokens for
  """
  userAddresses: [String!]!
}

type ATKBondImplementationBondRedeemedOutput {
  redeemed: String
}

input ATKBondImplementationBurnInput {
  """
  The amount of tokens to burn
  """
  amount: String!

  """
  The address to burn tokens from
  """
  userAddress: String!
}

input ATKBondImplementationForcedRecoverTokensInput {
  """
  The address of the wallet that lost access
  """
  lostWallet: String!

  """
  The address of the new wallet to receive the tokens
  """
  newWallet: String!
}

input ATKBondImplementationForcedTransferInput {
  """
  The amount of tokens to transfer
  """
  amount: String!

  """
  The address to transfer tokens from
  """
  from: String!

  """
  The address to transfer tokens to
  """
  to: String!
}

input ATKBondImplementationFreezePartialTokensInput {
  """
  The amount of tokens to freeze
  """
  amount: String!

  """
  The address to freeze tokens for
  """
  userAddress: String!
}

input ATKBondImplementationInitializeInput {
  accessManager_: String!
  bondParams: ATKBondImplementationATKBondImplementationInitializeBondParamsInput!
  cap_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKBondImplementationATKBondImplementationInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKBondImplementationMintInput {
  """
  The amount of tokens to mint
  """
  _amount: String!

  """
  The address to mint tokens to
  """
  _to: String!
}

input ATKBondImplementationRecoverERC20Input {
  """
  The amount of tokens to recover
  """
  amount: String!

  """
  The address to send the recovered tokens to
  """
  to: String!

  """
  The address of the ERC20 token to recover
  """
  token: String!
}

input ATKBondImplementationRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  lostWallet: String!
}

input ATKBondImplementationRedeemInput {
  """
  The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.
  """
  amount: String!
}

input ATKBondImplementationRemoveComplianceModuleInput {
  """
  The address of the compliance module to remove
  """
  _module: String!
}

input ATKBondImplementationSetAddressFrozenInput {
  """
  True to freeze the address, false to unfreeze
  """
  freeze: Boolean!

  """
  The address to freeze/unfreeze
  """
  userAddress: String!
}

input ATKBondImplementationSetCapInput {
  """
  The new maximum supply cap
  """
  newCap: String!
}

input ATKBondImplementationSetComplianceInput {
  """
  The address of the new compliance contract
  """
  _compliance: String!
}

input ATKBondImplementationSetIdentityRegistryInput {
  """
  The address of the new identity registry contract
  """
  _identityRegistry: String!
}

input ATKBondImplementationSetOnchainIDInput {
  """
  The address of the new onchain identity contract
  """
  _onchainID: String!
}

input ATKBondImplementationSetParametersForComplianceModuleInput {
  """
  The address of the compliance module
  """
  _module: String!

  """
  The encoded parameters to set for the module
  """
  _params: String!
}

input ATKBondImplementationSetYieldScheduleInput {
  """
  The address of the yield schedule contract
  """
  schedule: String!
}

"""
Returns the transaction hash
"""
type ATKBondImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKBondImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKBondImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKBondImplementationTransferInput {
  """
  The amount of tokens to transfer
  """
  _amount: String!

  """
  The address to transfer tokens to
  """
  _to: String!
}

"""
Returns a list of all active compliance modules and their current parameters.
Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
"""
type ATKBondImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKBondImplementationUnfreezePartialTokensInput {
  """
  The amount of tokens to unfreeze
  """
  amount: String!

  """
  The address to unfreeze tokens for
  """
  userAddress: String!
}

type ATKBondProxy {
  id: ID
}

input ATKBondProxyDeployContractATKBondProxyBondParamsInput {
  denominationAsset: String!
  faceValue: String!
  maturityDate: String!
}

input ATKBondProxyDeployContractATKBondProxyInitialModulePairsInput {
  module: String!
  params: String!
}

"""
Returns the transaction hash
"""
type ATKBondProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKBondProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKComplianceImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a token transfer is compliant with all applicable modules.
  True if the transfer is compliant, false otherwise.
  """
  canTransfer(
    _amount: String!
    _from: String!
    _to: String!
    _token: String!
  ): Boolean

  """
  Returns all global compliance modules with their parameters.
  Array of module-parameter pairs for all global compliance modules.
  """
  getGlobalComplianceModules: [ATKComplianceImplementationTuple0GetGlobalComplianceModulesOutput!]

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if an address is on the compliance bypass list.
  True if the address is on the bypass list, false otherwise.
  """
  isBypassed(account: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if the contract supports a given interface.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKComplianceImplementationAddGlobalComplianceModuleInput {
  """
  Address of the compliance module to add
  """
  module: String!

  """
  ABI-encoded parameters for the module
  """
  params: String!
}

input ATKComplianceImplementationAddMultipleToBypassListInput {
  """
  Array of addresses to add to the bypass list
  """
  accounts: [String!]!
}

input ATKComplianceImplementationAddToBypassListInput {
  """
  The address to add to the bypass list
  """
  account: String!
}

input ATKComplianceImplementationCreatedInput {
  """
  Amount of tokens created
  """
  _amount: String!

  """
  Address tokens were created for
  """
  _to: String!

  """
  Address of the token contract
  """
  _token: String!
}

input ATKComplianceImplementationDestroyedInput {
  """
  Amount of tokens destroyed
  """
  _amount: String!

  """
  Address tokens were destroyed from
  """
  _from: String!

  """
  Address of the token contract
  """
  _token: String!
}

input ATKComplianceImplementationInitializeInput {
  """
  Address that will receive the DEFAULT_ADMIN_ROLE
  """
  accessManager: String!
}

input ATKComplianceImplementationRemoveFromBypassListInput {
  """
  The address to remove from the bypass list
  """
  account: String!
}

input ATKComplianceImplementationRemoveGlobalComplianceModuleInput {
  """
  Address of the compliance module to remove
  """
  module: String!
}

input ATKComplianceImplementationRemoveMultipleFromBypassListInput {
  """
  Array of addresses to remove from the bypass list
  """
  accounts: [String!]!
}

input ATKComplianceImplementationSetParametersForGlobalComplianceModuleInput {
  """
  Address of the compliance module to update
  """
  module: String!

  """
  New ABI-encoded parameters for the module
  """
  params: String!
}

"""
Returns the transaction hash
"""
type ATKComplianceImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKComplianceImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKComplianceImplementationTransferredInput {
  """
  Amount of tokens transferred
  """
  _amount: String!

  """
  Address tokens were transferred from
  """
  _from: String!

  """
  Address tokens were transferred to
  """
  _to: String!

  """
  Address of the token contract
  """
  _token: String!
}

"""
Returns all global compliance modules with their parameters.
Array of module-parameter pairs for all global compliance modules.
"""
type ATKComplianceImplementationTuple0GetGlobalComplianceModulesOutput {
  module: String
  params: String
}

type ATKComplianceModuleRegistryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the address of a compliance module by its type hash.
  The address of the compliance module, or zero address if not registered.
  """
  complianceModule(moduleTypeHash: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if the contract supports a given interface.
  bool True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKComplianceModuleRegistryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

input ATKComplianceModuleRegistryImplementationRegisterComplianceModuleInput {
  """
  The address of the compliance module to register
  """
  moduleAddress: String!
}

"""
Returns the transaction hash
"""
type ATKComplianceModuleRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKComplianceModuleRegistryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKContractIdentityImplementation {
  """
  Returns the address of the contract that owns this identity.
  The contract address.
  """
  contractAddress: String

  """
  Returns the address of the contract associated with this identity.
  Must be implemented by inheriting contracts.
  The contract address.
  """
  getAssociatedContract: String

  """
  Retrieves a claim by its ID.
  See {IERC735-getClaim}. Retrieves a claim by its ID. Claim ID is `keccak256(abi.encode(issuer_address, topic))`.
  The data of the claim, The address of the claim issuer, The signature scheme used, The signature of the claim, The topic of the claim, The URI of the claim.
  """
  getClaim(_claimId: String!): ATKContractIdentityImplementationGetClaimOutput

  """
  Returns all registered claim authorization contracts.
  Array of authorization contract addresses.
  """
  getClaimAuthorizationContracts: [String!]

  """
  Returns all claim IDs for a specific topic.
  See {IERC735-getClaimIdsByTopic}. Returns an array of claim IDs associated with a specific topic.
  Array of claim IDs associated with the topic.
  """
  getClaimIdsByTopic(
    _topic: String!
  ): ATKContractIdentityImplementationGetClaimIdsByTopicOutput

  """
  Gets information about a key.
  Key operations are not supported in contract identities.
  purposes Always reverts with UnsupportedKeyOperation, keyType Always reverts with UnsupportedKeyOperation, key Always reverts with UnsupportedKeyOperation.
  """
  getKey(bytes320: String!): ATKContractIdentityImplementationGetKeyOutput

  """
  Gets the purposes of a key.
  Key operations are not supported in contract identities.
  purposes Always reverts with UnsupportedKeyOperation.
  """
  getKeyPurposes(bytes320: String!): [String!]

  """
  Gets all keys with a specific purpose.
  Key operations are not supported in contract identities.
  keys Always reverts with UnsupportedKeyOperation.
  """
  getKeysByPurpose(uint2560: String!): [String!]
  id: ID

  """
  Checks if a contract is registered as a claim authorization contract.
  True if registered, false otherwise.
  """
  isClaimAuthorizationContractRegistered(
    authorizationContract: String!
  ): Boolean

  """
  Checks if a claim is revoked (always returns false for contract identities).
  Contract identities manage claims through existence, not revocation.      The parameter is unnamed as it is not used in this implementation.
  Always returns false as claims are not revoked, only removed.
  """
  isClaimRevoked(bytes0: String!): Boolean

  """
  Validates a CONTRACT scheme claim by checking its existence on the subject identity.
  For CONTRACT scheme claims, validation is done by existence rather than signature verification.
  True if the claim exists with matching parameters, false otherwise.
  """
  isClaimValid(
    bytes2: String!
    data: String!
    subject: String!
    topic: String!
  ): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a key has a specific purpose.
  Key operations are not supported in contract identities.
  hasIt Always reverts with UnsupportedKeyOperation.
  """
  keyHasPurpose(bytes320: String!, uint2561: String!): Boolean

  """
  Revokes a claim (not implemented for contract identities).
  Contract identities manage claims through existence, not revocation lists.      The parameters are unnamed as they are not used in this implementation.
  Always returns false as revocation is not supported.
  """
  revokeClaim(address1: String!, bytes320: String!): Boolean

  """
  Checks if the contract supports a given interface ID.
  Declares support for IATKContractIdentity, IERC735, IIdentity, IClaimIssuer, and IERC165.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKContractIdentityImplementationAddClaimInput {
  _data: String!
  _issuer: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
}

input ATKContractIdentityImplementationAddKeyInput {
  bytes320: String!
  uint2561: String!
  uint2562: String!
}

input ATKContractIdentityImplementationApproveInput {
  bool1: Boolean!
  uint2560: String!
}

input ATKContractIdentityImplementationExecuteInput {
  address0: String!
  bytes2: String!
  uint2561: String!
}

type ATKContractIdentityImplementationGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type ATKContractIdentityImplementationGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type ATKContractIdentityImplementationGetKeyOutput {
  bytes322: String
  uint256__0: [String!]
  uint2561: String
}

input ATKContractIdentityImplementationInitializeInput {
  """
  Array of addresses implementing IClaimAuthorizer to register as claim authorizers
  """
  claimAuthorizationContracts: [String!]!

  """
  The address of the contract that owns this identity
  """
  contractAddr: String!
}

input ATKContractIdentityImplementationIssueClaimToInput {
  """
  The claim data
  """
  data: String!

  """
  The identity contract to add the claim to
  """
  subject: String!

  """
  The claim topic
  """
  topic: String!

  """
  The claim URI (e.g., IPFS hash)
  """
  uri: String!
}

input ATKContractIdentityImplementationRegisterClaimAuthorizationContractInput {
  """
  The address of the contract implementing IClaimAuthorization
  """
  authorizationContract: String!
}

input ATKContractIdentityImplementationRemoveClaimAuthorizationContractInput {
  """
  The address of the contract to remove
  """
  authorizationContract: String!
}

input ATKContractIdentityImplementationRemoveClaimInput {
  _claimId: String!
}

input ATKContractIdentityImplementationRemoveKeyInput {
  bytes320: String!
  uint2561: String!
}

"""
Returns the transaction hash
"""
type ATKContractIdentityImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKContractIdentityImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKContractIdentityProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKContractIdentityProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKContractIdentityProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKDepositFactoryImplementation {
  """
  The unique identifier for this factory type.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an access manager address was deployed by this factory.
  """
  isFactoryAccessManager(
    accessManagerAddress: String!
  ): ATKDepositFactoryImplementationIsFactoryAccessManagerOutput

  """
  Mapping indicating whether a token address was deployed by this factory.
  """
  isFactoryToken(
    tokenAddress: String!
  ): ATKDepositFactoryImplementationIsFactoryTokenOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a given address implements the IATKDeposit interface.
  Uses ERC165 to check interface support for IATKDeposit.
  bool True if the contract supports the IATKDeposit interface, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictDepositAddress(
    decimals_: Int!
    initialModulePairs_: [ATKDepositFactoryImplementationPredictDepositAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): ATKDepositFactoryImplementationPredictDepositAddressOutput

  """
  Checks if the contract supports the given interface.
  Implements ERC165 interface detection.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the unique type identifier for this factory.
  The keccak256 hash of "ATKDepositFactory".
  """
  typeId: String
}

input ATKDepositFactoryImplementationATKDepositFactoryImplementationCreateDepositInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKDepositFactoryImplementationCreateDepositInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [ATKDepositFactoryImplementationATKDepositFactoryImplementationCreateDepositInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKDepositFactoryImplementationInitializeInput {
  """
  The address to be granted the DEFAULT_ADMIN_ROLE and DEPLOYER_ROLE.
  """
  initialAdmin: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The initial address of the token implementation contract.
  """
  tokenImplementation_: String!
}

type ATKDepositFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKDepositFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKDepositFactoryImplementationPredictDepositAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKDepositFactoryImplementationPredictDepositAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKDepositFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKDepositFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKDepositFactoryImplementationUpdateTokenImplementationInput {
  """
  The new address for the token implementation contract. Cannot be the zero address.
  """
  newImplementation: String!
}

type ATKDepositImplementation {
  """
  Returns the address of the current `SMARTTokenAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Permission check: can `actor` add a claim?.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim?.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Returns the `ISMARTCompliance` contract instance used by this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  ISMARTCompliance The current compliance contract.
  """
  compliance: String

  """
  Returns a list of all active compliance modules and their current parameters.
  Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
  SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
  """
  complianceModules: [ATKDepositImplementationTuple0ComplianceModulesOutput!]

  """
  Returns the number of decimals for the token.
  Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.
  uint8 The number of decimals.
  """
  decimals: Int

  """
  Gets the amount of tokens specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The value stored in `__frozenTokens[userAddress]`.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the `ISMARTIdentityRegistry` contract instance used by this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  ISMARTIdentityRegistry The current identity registry contract.
  """
  identityRegistry: String

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if `__frozen[userAddress]` is true, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the ONCHAINID associated with this contract.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  Reads the private `_paused` state variable.
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Standard ERC165 function to check interface support in an upgradeable context.
  Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.
  bool `true` if the interface is supported, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKDepositImplementationATKDepositImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKDepositImplementationAddComplianceModuleInput {
  """
  The address of the compliance module to add
  """
  _module: String!

  """
  The initialization parameters for the module
  """
  _params: String!
}

input ATKDepositImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKDepositImplementationBatchBurnInput {
  """
  Array of amounts to burn from each address
  """
  amounts: [String!]!

  """
  Array of addresses to burn tokens from
  """
  userAddresses: [String!]!
}

input ATKDepositImplementationBatchForcedTransferInput {
  """
  Array of amounts to transfer for each pair
  """
  amounts: [String!]!

  """
  Array of addresses to transfer tokens from
  """
  fromList: [String!]!

  """
  Array of addresses to transfer tokens to
  """
  toList: [String!]!
}

input ATKDepositImplementationBatchFreezePartialTokensInput {
  """
  Array of amounts to freeze for each address
  """
  amounts: [String!]!

  """
  Array of addresses whose tokens to freeze
  """
  userAddresses: [String!]!
}

input ATKDepositImplementationBatchMintInput {
  """
  Array of amounts to mint to each address
  """
  _amounts: [String!]!

  """
  Array of addresses to mint tokens to
  """
  _toList: [String!]!
}

input ATKDepositImplementationBatchSetAddressFrozenInput {
  """
  Array of boolean values (true to freeze, false to unfreeze)
  """
  freeze: [Boolean!]!

  """
  Array of addresses to freeze or unfreeze
  """
  userAddresses: [String!]!
}

input ATKDepositImplementationBatchTransferInput {
  """
  An array of corresponding token amounts.
  """
  amounts: [String!]!

  """
  An array of recipient addresses.
  """
  toList: [String!]!
}

input ATKDepositImplementationBatchUnfreezePartialTokensInput {
  """
  Array of amounts to unfreeze for each address
  """
  amounts: [String!]!

  """
  Array of addresses whose tokens to unfreeze
  """
  userAddresses: [String!]!
}

input ATKDepositImplementationBurnInput {
  """
  The amount of tokens to burn
  """
  amount: String!

  """
  The address to burn tokens from
  """
  userAddress: String!
}

input ATKDepositImplementationForcedRecoverTokensInput {
  """
  The address of the lost wallet
  """
  lostWallet: String!

  """
  The address to transfer all tokens to
  """
  newWallet: String!
}

input ATKDepositImplementationForcedTransferInput {
  """
  The amount of tokens to transfer
  """
  amount: String!

  """
  The address to transfer tokens from
  """
  from: String!

  """
  The address to transfer tokens to
  """
  to: String!
}

input ATKDepositImplementationFreezePartialTokensInput {
  """
  The amount of tokens to freeze
  """
  amount: String!

  """
  The address whose tokens to freeze
  """
  userAddress: String!
}

input ATKDepositImplementationInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKDepositImplementationATKDepositImplementationInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKDepositImplementationMintInput {
  """
  The amount of tokens to mint
  """
  _amount: String!

  """
  The address to mint tokens to
  """
  _to: String!
}

input ATKDepositImplementationRecoverERC20Input {
  """
  The amount of tokens to recover
  """
  amount: String!

  """
  The address to send the recovered tokens to
  """
  to: String!

  """
  The address of the ERC20 token to recover
  """
  token: String!
}

input ATKDepositImplementationRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  lostWallet: String!
}

input ATKDepositImplementationRemoveComplianceModuleInput {
  """
  The address of the compliance module to remove
  """
  _module: String!
}

input ATKDepositImplementationSetAddressFrozenInput {
  """
  True to freeze, false to unfreeze
  """
  freeze: Boolean!

  """
  The address to freeze or unfreeze
  """
  userAddress: String!
}

input ATKDepositImplementationSetComplianceInput {
  """
  The address of the compliance contract
  """
  _compliance: String!
}

input ATKDepositImplementationSetIdentityRegistryInput {
  """
  The address of the identity registry contract
  """
  _identityRegistry: String!
}

input ATKDepositImplementationSetOnchainIDInput {
  """
  The address of the OnchainID contract
  """
  _onchainID: String!
}

input ATKDepositImplementationSetParametersForComplianceModuleInput {
  """
  The address of the compliance module
  """
  _module: String!

  """
  The encoded parameters for the module
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type ATKDepositImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKDepositImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKDepositImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKDepositImplementationTransferInput {
  """
  The amount of tokens to transfer
  """
  _amount: String!

  """
  The address to transfer tokens to
  """
  _to: String!
}

"""
Returns a list of all active compliance modules and their current parameters.
Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
"""
type ATKDepositImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKDepositImplementationUnfreezePartialTokensInput {
  """
  The amount of tokens to unfreeze
  """
  amount: String!

  """
  The address whose tokens to unfreeze
  """
  userAddress: String!
}

type ATKDepositProxy {
  id: ID
}

input ATKDepositProxyDeployContractATKDepositProxyInitialModulePairsInput {
  module: String!
  params: String!
}

"""
Returns the transaction hash
"""
type ATKDepositProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKDepositProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKEquityFactoryImplementation {
  """
  Unique identifier for the ATK Equity Factory type.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an access manager address was deployed by this factory.
  """
  isFactoryAccessManager(
    accessManagerAddress: String!
  ): ATKEquityFactoryImplementationIsFactoryAccessManagerOutput

  """
  Mapping indicating whether a token address was deployed by this factory.
  """
  isFactoryToken(
    tokenAddress: String!
  ): ATKEquityFactoryImplementationIsFactoryTokenOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a given address implements the ISMARTEquity interface.
  bool True if the contract supports the ISMARTEquity interface, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictEquityAddress(
    decimals_: Int!
    initialModulePairs_: [ATKEquityFactoryImplementationPredictEquityAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): ATKEquityFactoryImplementationPredictEquityAddressOutput

  """
  Checks if this contract implements a specific interface.
  True if the contract implements the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the type identifier for this factory.
  The bytes32 identifier for the ATK Equity Factory.
  """
  typeId: String
}

input ATKEquityFactoryImplementationATKEquityFactoryImplementationCreateEquityInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKEquityFactoryImplementationCreateEquityInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [ATKEquityFactoryImplementationATKEquityFactoryImplementationCreateEquityInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKEquityFactoryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The initial address of the token implementation contract.
  """
  tokenImplementation_: String!
}

type ATKEquityFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKEquityFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKEquityFactoryImplementationPredictEquityAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKEquityFactoryImplementationPredictEquityAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKEquityFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKEquityFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKEquityFactoryImplementationUpdateTokenImplementationInput {
  """
  The new address for the token implementation contract. Cannot be the zero address.
  """
  newImplementation: String!
}

type ATKEquityImplementation {
  """
  Machine-readable description of the clock as specified in ERC-6372.
  """
  CLOCK_MODE: String

  """
  Returns the address of the current `SMARTTokenAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Permission check: can `actor` add a claim?.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim?.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Get the `pos`-th checkpoint for `account`.
  """
  checkpoints(
    account: String!
    pos: Float!
  ): ATKEquityImplementationTuple0CheckpointsOutput

  """
  Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.
  """
  clock: Float

  """
  Returns the `ISMARTCompliance` contract instance used by this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  ISMARTCompliance The current compliance contract.
  """
  compliance: String

  """
  Returns a list of all active compliance modules and their current parameters.
  Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
  SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
  """
  complianceModules: [ATKEquityImplementationTuple0ComplianceModulesOutput!]

  """
  Returns the number of decimals for the token.
  Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.
  uint8 The number of decimals.
  """
  decimals: Int

  """
  Returns the delegate that `account` has chosen.
  """
  delegates(account: String!): String

  """
  returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.
  """
  eip712Domain: ATKEquityImplementationEip712DomainOutput

  """
  Gets the amount of tokens specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The value stored in `__frozenTokens[userAddress]`.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastTotalSupply(timepoint: String!): String

  """
  Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastVotes(account: String!, timepoint: String!): String

  """
  Returns the current amount of votes that `account` has.
  """
  getVotes(account: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the `ISMARTIdentityRegistry` contract instance used by this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  ISMARTIdentityRegistry The current identity registry contract.
  """
  identityRegistry: String

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if `__frozen[userAddress]` is true, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the next unused nonce for an address.
  """
  nonces(owner: String!): String

  """
  Get number of checkpoints for `account`.
  """
  numCheckpoints(account: String!): Float

  """
  Returns the ONCHAINID associated with this contract.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  Reads the private `_paused` state variable.
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Standard ERC165 function to check interface support in an upgradeable context.
  Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.
  bool `true` if the interface is supported, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKEquityImplementationATKEquityImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKEquityImplementationAddComplianceModuleInput {
  """
  The address of the compliance module to add
  """
  _module: String!

  """
  The encoded parameters for the module
  """
  _params: String!
}

input ATKEquityImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKEquityImplementationBatchBurnInput {
  """
  Array of amounts to burn from each corresponding address
  """
  amounts: [String!]!

  """
  Array of addresses from which to burn tokens
  """
  userAddresses: [String!]!
}

input ATKEquityImplementationBatchForcedTransferInput {
  """
  Array of amounts to transfer for each corresponding address pair
  """
  amounts: [String!]!

  """
  Array of addresses to transfer tokens from
  """
  fromList: [String!]!

  """
  Array of addresses to transfer tokens to
  """
  toList: [String!]!
}

input ATKEquityImplementationBatchFreezePartialTokensInput {
  """
  Array of amounts to freeze for each corresponding address
  """
  amounts: [String!]!

  """
  Array of addresses for which to freeze tokens
  """
  userAddresses: [String!]!
}

input ATKEquityImplementationBatchMintInput {
  """
  Array of amounts to mint to each corresponding address
  """
  _amounts: [String!]!

  """
  Array of addresses to receive the minted tokens
  """
  _toList: [String!]!
}

input ATKEquityImplementationBatchSetAddressFrozenInput {
  """
  Array of boolean values indicating whether to freeze (true) or unfreeze (false)
  """
  freeze: [Boolean!]!

  """
  Array of addresses to freeze or unfreeze
  """
  userAddresses: [String!]!
}

input ATKEquityImplementationBatchTransferInput {
  """
  An array of corresponding token amounts.
  """
  amounts: [String!]!

  """
  An array of recipient addresses.
  """
  toList: [String!]!
}

input ATKEquityImplementationBatchUnfreezePartialTokensInput {
  """
  Array of amounts to unfreeze for each corresponding address
  """
  amounts: [String!]!

  """
  Array of addresses for which to unfreeze tokens
  """
  userAddresses: [String!]!
}

input ATKEquityImplementationBurnInput {
  """
  The amount of tokens to burn
  """
  amount: String!

  """
  The address from which to burn tokens
  """
  userAddress: String!
}

input ATKEquityImplementationDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input ATKEquityImplementationDelegateInput {
  delegatee: String!
}

type ATKEquityImplementationEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

input ATKEquityImplementationForcedRecoverTokensInput {
  """
  The address of the wallet that lost access
  """
  lostWallet: String!

  """
  The address of the new wallet to receive the tokens
  """
  newWallet: String!
}

input ATKEquityImplementationForcedTransferInput {
  """
  The amount of tokens to transfer
  """
  amount: String!

  """
  The address to transfer tokens from
  """
  from: String!

  """
  The address to transfer tokens to
  """
  to: String!
}

input ATKEquityImplementationFreezePartialTokensInput {
  """
  The amount of tokens to freeze
  """
  amount: String!

  """
  The address for which to freeze tokens
  """
  userAddress: String!
}

input ATKEquityImplementationInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKEquityImplementationATKEquityImplementationInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKEquityImplementationMintInput {
  """
  The amount of tokens to mint
  """
  _amount: String!

  """
  The address to receive the minted tokens
  """
  _to: String!
}

input ATKEquityImplementationRecoverERC20Input {
  """
  The amount of tokens to recover
  """
  amount: String!

  """
  The address to send the recovered tokens to
  """
  to: String!

  """
  The address of the ERC20 token to recover
  """
  token: String!
}

input ATKEquityImplementationRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  lostWallet: String!
}

input ATKEquityImplementationRemoveComplianceModuleInput {
  """
  The address of the compliance module to remove
  """
  _module: String!
}

input ATKEquityImplementationSetAddressFrozenInput {
  """
  True to freeze the address, false to unfreeze
  """
  freeze: Boolean!

  """
  The address to freeze or unfreeze
  """
  userAddress: String!
}

input ATKEquityImplementationSetComplianceInput {
  """
  The address of the main compliance contract
  """
  _compliance: String!
}

input ATKEquityImplementationSetIdentityRegistryInput {
  """
  The address of the Identity Registry contract
  """
  _identityRegistry: String!
}

input ATKEquityImplementationSetOnchainIDInput {
  """
  The address of the OnchainID contract to associate with this token
  """
  _onchainID: String!
}

input ATKEquityImplementationSetParametersForComplianceModuleInput {
  """
  The address of the compliance module
  """
  _module: String!

  """
  The encoded parameters to set for the module
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type ATKEquityImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKEquityImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKEquityImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKEquityImplementationTransferInput {
  """
  The amount of tokens to transfer
  """
  _amount: String!

  """
  The address to receive the tokens
  """
  _to: String!
}

"""
Get the `pos`-th checkpoint for `account`.
"""
type ATKEquityImplementationTuple0CheckpointsOutput {
  _key: Float
  _value: String
}

"""
Returns a list of all active compliance modules and their current parameters.
Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
"""
type ATKEquityImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKEquityImplementationUnfreezePartialTokensInput {
  """
  The amount of tokens to unfreeze
  """
  amount: String!

  """
  The address for which to unfreeze tokens
  """
  userAddress: String!
}

type ATKEquityProxy {
  id: ID
}

input ATKEquityProxyDeployContractATKEquityProxyInitialModulePairsInput {
  module: String!
  params: String!
}

"""
Returns the transaction hash
"""
type ATKEquityProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKEquityProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKFixedYieldProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKFixedYieldProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKFixedYieldProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKFixedYieldScheduleFactoryImplementation {
  """
  The unique type identifier for this factory.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the total number of fixed yield schedule proxy contracts created by this factory.
  The number of yield schedule proxies created by this factory.
  """
  allSchedulesLength: ATKFixedYieldScheduleFactoryImplementationAllSchedulesLengthOutput

  """
  Address of the current `ATKFixedYieldSchedule` logic contract (implementation).
  """
  atkFixedYieldScheduleImplementation: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an system addon address was deployed by this factory.
  """
  isFactorySystemAddon(
    systemAddonAddress: String!
  ): ATKFixedYieldScheduleFactoryImplementationIsFactorySystemAddonOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if this contract supports a given interface.
  True if the interface is supported.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the unique type identifier for this factory.
  The type identifier as a bytes32 hash.
  """
  typeId: String
}

type ATKFixedYieldScheduleFactoryImplementationAllSchedulesLengthOutput {
  count: String
}

input ATKFixedYieldScheduleFactoryImplementationCreateInput {
  """
  Country code for compliance purposes.
  """
  country: Int!

  """
  The Unix timestamp for the schedule end.
  """
  endTime: String!

  """
  The interval for yield distributions in seconds.
  """
  interval: String!

  """
  The yield rate in basis points.
  """
  rate: String!

  """
  The Unix timestamp for the schedule start.
  """
  startTime: String!

  """
  The `ISMARTYield`-compliant token for which the yield schedule is being created.
  """
  token: String!
}

input ATKFixedYieldScheduleFactoryImplementationInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type ATKFixedYieldScheduleFactoryImplementationIsFactorySystemAddonOutput {
  isFactorySystemAddon: Boolean
}

"""
Returns the transaction hash
"""
type ATKFixedYieldScheduleFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKFixedYieldScheduleFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKFixedYieldScheduleFactoryImplementationUpdateImplementationInput {
  """
  The address of the new `ATKFixedYieldSchedule` logic contract.
  """
  _newImplementation: String!
}

type ATKFixedYieldScheduleUpgradeable {
  DEFAULT_ADMIN_ROLE: String

  """
  Role for emergency operations including pausing the contract and ERC20 recovery.
  """
  EMERGENCY_ROLE: String

  """
  Role for managing token supply operations.
  """
  GOVERNANCE_ROLE: String

  """
  The denominator used for rate calculations (10,000 basis points = 100%).
  """
  RATE_BASIS_POINTS: String

  """
  Role for managing token supply operations.
  """
  SUPPLY_MANAGEMENT_ROLE: String

  """
  Returns an array of all period end timestamps for this yield schedule.
  Each timestamp in the array marks the conclusion of a yield distribution period. The number of elements in this array corresponds to the total number of periods in the schedule. This is useful for understanding the full timeline of the yield schedule.
  An array of Unix timestamps, each representing the end of a distribution period.
  """
  allPeriods: [String!]

  """
  Calculates the total accrued yield for the message sender (`_msgSender()`), including any pro-rata share for the current period.
  Convenience function so callers don't have to pass their own address.
  The total accrued yield amount for the caller.
  """
  calculateAccruedYield: String

  """
  Calculates the total accrued yield for a specific token holder up to the current moment, including any pro-rata share for the ongoing period.
  Calculates yield for completed, unclaimed periods using historical balances (`balanceOfAt`). For the current, ongoing period, it calculates a pro-rata share based on the holder's current balance and time elapsed in the period.
  The total amount of yield tokens accrued by the `holder`.
  """
  calculateAccruedYield1(holder: String!): String

  """
  Permission check: can `actor` add a claim?.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim?.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Returns the current, ongoing period number of the yield schedule.
  If the schedule has not yet started (`block.timestamp < startDate()`), this might return 0. If the schedule has ended (`block.timestamp >= endDate()`), this might return the total number of periods. Otherwise, it returns the 1-indexed number of the period that is currently in progress.
  The current period number (1-indexed), or 0 if not started / an indicator if ended.
  """
  currentPeriod: String

  """
  Returns the ERC20 token contract that is used for making yield payments.
  This is the actual token that holders will receive when they claim their yield. It can be the same as `token()` or a different token (e.g., a stablecoin).
  The `IERC20` compliant token contract address used for payments.
  """
  denominationAsset: String

  """
  Returns the timestamp representing the end date and time of the entire yield schedule.
  After this timestamp, no more yield will typically accrue or be distributed by this schedule.
  The Unix timestamp indicating when the yield schedule concludes.
  """
  endDate: String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the duration of each distribution interval or period in seconds.
  For example, if yield is distributed daily, the interval would be `86400` seconds. This, along with `startDate` and `endDate`, defines the periodicity of the schedule.
  The length of each yield period in seconds.
  """
  interval: String

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the last period number for which a specific token holder has successfully claimed their yield.
  This is crucial for tracking individual claim statuses. If a holder has never claimed, this might return 0.
  The 1-indexed number of the last period claimed by the `holder`.
  """
  lastClaimedPeriod(holder: String!): String

  """
  Returns the last claimed period for the message sender (`_msgSender()`).
  Convenience function so callers don't have to pass their own address.
  The last period number (1-indexed) claimed by the caller.
  """
  lastClaimedPeriod2: String

  """
  Returns the most recent period number that has been fully completed and is eligible for yield claims.
  This indicates up to which period users can typically claim their accrued yield. If no periods have completed (e.g., `block.timestamp < periodEnd(1)`), this might return 0.
  The 1-indexed number of the last fully completed period.
  """
  lastCompletedPeriod: String

  """
  Returns the ONCHAINID associated with this contract.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  Returns the end timestamp for a specific yield distribution period.
  Periods are 1-indexed. Accessing `_periodEndTimestamps` requires 0-indexed access (`period - 1`).
  The Unix timestamp marking the end of the specified `period`.
  """
  periodEnd(period: String!): String

  """
  Returns the yield rate for the schedule.
  The interpretation of this rate (e.g., annual percentage rate, per period rate) and its precision (e.g., basis points) depends on the specific implementation of the schedule contract. For a fixed schedule, this rate is a key parameter in calculating yield per period.
  The configured yield rate (e.g., in basis points, where 100 basis points = 1%).
  """
  rate: String

  """
  Returns the Unix timestamp (seconds since epoch) when the yield schedule starts.
  This is an immutable value set in the constructor. It defines the beginning of the yield accrual period. This function fulfills the `startDate()` requirement from the `ISMARTFixedYieldSchedule` interface (which itself inherits it from `ISMARTYieldSchedule`).
  The Unix timestamp when the yield schedule starts.
  """
  startDate: String

  """
  Checks if this contract supports a given interface.
  True if the interface is supported.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the remaining time in seconds until the start of the next yield distribution period.
  If the schedule has not started, this could be time until `startDate()`. If the schedule is ongoing, this is the time left in the `currentPeriod()`. If the schedule has ended, this might return 0.
  The time in seconds until the next period begins or current period ends.
  """
  timeUntilNextPeriod: String

  """
  Returns the address of the SMART token contract for which this yield schedule is defined.
  The schedule contract needs to interact with this token contract to query historical balances (e.g., `balanceOfAt`) and total supplies (`totalSupplyAt`). The returned token contract should implement the `ISMARTYield` interface.
  The `ISMARTYield` compliant token contract address.
  """
  token: String

  """
  Calculates the total amount of yield that has been accrued by all token holders across all completed periods but has not yet been claimed.
  This calculation can be gas-intensive as it iterates through all completed periods and queries historical total supply for each. It assumes `_token.yieldBasisPerUnit(address(0))` provides a generic or representative basis if it varies by holder.
  The total sum of unclaimed yield tokens.
  """
  totalUnclaimedYield: String

  """
  Calculates the total amount of yield that will be required to cover all token holders for the next upcoming distribution period.
  This calculation uses the current total supply. For a more precise estimate if supply changes rapidly, one might need a more complex projection. Assumes a generic basis from `_token.yieldBasisPerUnit(address(0))`.
  The estimated total yield tokens needed for the next period's distribution.
  """
  totalYieldForNextPeriod: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKFixedYieldScheduleUpgradeableGrantRoleInput {
  account: String!
  role: String!
}

input ATKFixedYieldScheduleUpgradeableInitializeInput {
  """
  End date of the yield schedule.
  """
  endDate_: String!

  """
  Array of addresses to be granted `DEFAULT_ADMIN_ROLE`.
  """
  initialAdmins_: [String!]!

  """
  Duration of each yield interval.
  """
  interval_: String!

  """
  Yield rate in basis points.
  """
  rate_: String!

  """
  Start date of the yield schedule.
  """
  startDate_: String!

  """
  Address of the `ISMARTYield` token.
  """
  tokenAddress_: String!
}

input ATKFixedYieldScheduleUpgradeableRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKFixedYieldScheduleUpgradeableRevokeRoleInput {
  account: String!
  role: String!
}

input ATKFixedYieldScheduleUpgradeableSetOnchainIdInput {
  """
  The address of the onchain ID contract
  """
  onchainID_: String!
}

input ATKFixedYieldScheduleUpgradeableTopUpDenominationAssetInput {
  """
  The quantity of the `denominationAsset` to deposit into the schedule contract.
  """
  amount: String!
}

"""
Returns the transaction hash
"""
type ATKFixedYieldScheduleUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKFixedYieldScheduleUpgradeableWithdrawAllDenominationAssetInput {
  """
  The address to which all `denominationAsset` tokens will be sent.
  """
  to: String!
}

input ATKFixedYieldScheduleUpgradeableWithdrawDenominationAssetInput {
  """
  The quantity of `denominationAsset` tokens to withdraw.
  """
  amount: String!

  """
  The address to which the withdrawn `denominationAsset` tokens will be sent.
  """
  to: String!
}

type ATKForwarder {
  """
  returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.
  """
  eip712Domain: ATKForwarderEip712DomainOutput
  id: ID

  """
  Returns the next unused nonce for an address.
  """
  nonces(owner: String!): String
  verify(request: ATKForwarderVerifyRequestInput!): Boolean
}

input ATKForwarderATKForwarderExecuteBatchRequestsInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

input ATKForwarderATKForwarderExecuteRequestInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

type ATKForwarderEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

input ATKForwarderExecuteBatchInput {
  refundReceiver: String!
  requests: [ATKForwarderATKForwarderExecuteBatchRequestsInput!]!
}

input ATKForwarderExecuteInput {
  request: ATKForwarderATKForwarderExecuteRequestInput!
}

"""
Returns the transaction hash
"""
type ATKForwarderTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKForwarderTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKForwarderVerifyRequestInput {
  data: String!
  deadline: Float!
  from: String!
  gas: String!
  signature: String!
  to: String!
  value: String!
}

type ATKFundFactoryImplementation {
  """
  Unique identifier for the ATK Fund Factory type.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an access manager address was deployed by this factory.
  """
  isFactoryAccessManager(
    accessManagerAddress: String!
  ): ATKFundFactoryImplementationIsFactoryAccessManagerOutput

  """
  Mapping indicating whether a token address was deployed by this factory.
  """
  isFactoryToken(
    tokenAddress: String!
  ): ATKFundFactoryImplementationIsFactoryTokenOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a given address implements the ISMARTFund interface.
  bool True if the contract supports the ISMARTFund interface, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictFundAddress(
    decimals_: Int!
    initialModulePairs_: [ATKFundFactoryImplementationPredictFundAddressInitialModulePairsInput!]!
    managementFeeBps_: Int!
    name_: String!
    symbol_: String!
  ): ATKFundFactoryImplementationPredictFundAddressOutput

  """
  Checks if this contract implements a specific interface.
  True if the contract implements the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the type identifier for this factory.
  The bytes32 identifier for the ATK Fund Factory.
  """
  typeId: String
}

input ATKFundFactoryImplementationATKFundFactoryImplementationCreateFundInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKFundFactoryImplementationCreateFundInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [ATKFundFactoryImplementationATKFundFactoryImplementationCreateFundInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  symbol_: String!
}

input ATKFundFactoryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The initial address of the token implementation contract.
  """
  tokenImplementation_: String!
}

type ATKFundFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKFundFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKFundFactoryImplementationPredictFundAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKFundFactoryImplementationPredictFundAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKFundFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKFundFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKFundFactoryImplementationUpdateTokenImplementationInput {
  """
  The new address for the token implementation contract. Cannot be the zero address.
  """
  newImplementation: String!
}

type ATKFundImplementation {
  """
  Machine-readable description of the clock as specified in ERC-6372.
  """
  CLOCK_MODE: String

  """
  Returns the address of the current `SMARTTokenAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Permission check: can `actor` add a claim?.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim?.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Get the `pos`-th checkpoint for `account`.
  """
  checkpoints(
    account: String!
    pos: Float!
  ): ATKFundImplementationTuple0CheckpointsOutput

  """
  Returns the current timestamp for voting snapshots.
  Implementation of ERC20Votes clock method for voting delay and period calculations.
  uint48 Current block timestamp cast to uint48.
  """
  clock: Float

  """
  Returns the `ISMARTCompliance` contract instance used by this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  ISMARTCompliance The current compliance contract.
  """
  compliance: String

  """
  Returns a list of all active compliance modules and their current parameters.
  Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
  SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
  """
  complianceModules: [ATKFundImplementationTuple0ComplianceModulesOutput!]

  """
  Returns the number of decimals for the token.
  Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.
  uint8 The number of decimals.
  """
  decimals: Int

  """
  Returns the delegate that `account` has chosen.
  """
  delegates(account: String!): String

  """
  returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.
  """
  eip712Domain: ATKFundImplementationEip712DomainOutput

  """
  Gets the amount of tokens specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The value stored in `__frozenTokens[userAddress]`.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastTotalSupply(timepoint: String!): String

  """
  Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.
  """
  getPastVotes(account: String!, timepoint: String!): String

  """
  Returns the current amount of votes that `account` has.
  """
  getVotes(account: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the `ISMARTIdentityRegistry` contract instance used by this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  ISMARTIdentityRegistry The current identity registry contract.
  """
  identityRegistry: String

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if `__frozen[userAddress]` is true, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the management fee in basis points.
  One basis point equals 0.01%.
  uint16 The management fee in basis points.
  """
  managementFeeBps: Int

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the next unused nonce for an address.
  """
  nonces(owner: String!): String

  """
  Get number of checkpoints for `account`.
  """
  numCheckpoints(account: String!): Float

  """
  Returns the ONCHAINID associated with this contract.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  Reads the private `_paused` state variable.
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Standard ERC165 function to check interface support in an upgradeable context.
  Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.
  bool `true` if the interface is supported, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKFundImplementationATKFundImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKFundImplementationAddComplianceModuleInput {
  """
  The address of the compliance module to add
  """
  _module: String!

  """
  The encoded parameters for the module
  """
  _params: String!
}

input ATKFundImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKFundImplementationBatchBurnInput {
  """
  Array of amounts to burn from each corresponding address
  """
  amounts: [String!]!

  """
  Array of addresses from which to burn tokens
  """
  userAddresses: [String!]!
}

input ATKFundImplementationBatchForcedTransferInput {
  """
  Array of amounts to transfer for each corresponding address pair
  """
  amounts: [String!]!

  """
  Array of addresses to transfer tokens from
  """
  fromList: [String!]!

  """
  Array of addresses to transfer tokens to
  """
  toList: [String!]!
}

input ATKFundImplementationBatchFreezePartialTokensInput {
  """
  Array of amounts to freeze for each corresponding address
  """
  amounts: [String!]!

  """
  Array of addresses for which to freeze tokens
  """
  userAddresses: [String!]!
}

input ATKFundImplementationBatchMintInput {
  """
  Array of amounts to mint to each corresponding address
  """
  _amounts: [String!]!

  """
  Array of addresses to receive the minted tokens
  """
  _toList: [String!]!
}

input ATKFundImplementationBatchSetAddressFrozenInput {
  """
  Array of boolean values indicating whether to freeze (true) or unfreeze (false)
  """
  freeze: [Boolean!]!

  """
  Array of addresses to freeze or unfreeze
  """
  userAddresses: [String!]!
}

input ATKFundImplementationBatchTransferInput {
  """
  An array of corresponding token amounts.
  """
  amounts: [String!]!

  """
  An array of recipient addresses.
  """
  toList: [String!]!
}

input ATKFundImplementationBatchUnfreezePartialTokensInput {
  """
  Array of amounts to unfreeze for each corresponding address
  """
  amounts: [String!]!

  """
  Array of addresses for which to unfreeze tokens
  """
  userAddresses: [String!]!
}

input ATKFundImplementationBurnInput {
  """
  The amount of tokens to burn
  """
  amount: String!

  """
  The address from which to burn tokens
  """
  userAddress: String!
}

input ATKFundImplementationDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input ATKFundImplementationDelegateInput {
  delegatee: String!
}

type ATKFundImplementationEip712DomainOutput {
  chainId: String
  extensions: [String!]
  fields: String
  name: String
  salt: String
  verifyingContract: String
  version: String
}

input ATKFundImplementationForcedRecoverTokensInput {
  """
  The address of the wallet that lost access
  """
  lostWallet: String!

  """
  The address of the new wallet to receive the tokens
  """
  newWallet: String!
}

input ATKFundImplementationForcedTransferInput {
  """
  The amount of tokens to transfer
  """
  amount: String!

  """
  The address to transfer tokens from
  """
  from: String!

  """
  The address to transfer tokens to
  """
  to: String!
}

input ATKFundImplementationFreezePartialTokensInput {
  """
  The amount of tokens to freeze
  """
  amount: String!

  """
  The address for which to freeze tokens
  """
  userAddress: String!
}

input ATKFundImplementationInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKFundImplementationATKFundImplementationInitializeInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  symbol_: String!
}

input ATKFundImplementationMintInput {
  """
  The amount of tokens to mint
  """
  _amount: String!

  """
  The address to receive the minted tokens
  """
  _to: String!
}

input ATKFundImplementationRecoverERC20Input {
  """
  The amount of tokens to recover
  """
  amount: String!

  """
  The address to send the recovered tokens to
  """
  to: String!

  """
  The address of the ERC20 token to recover
  """
  token: String!
}

input ATKFundImplementationRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  lostWallet: String!
}

input ATKFundImplementationRemoveComplianceModuleInput {
  """
  The address of the compliance module to remove
  """
  _module: String!
}

input ATKFundImplementationSetAddressFrozenInput {
  """
  True to freeze the address, false to unfreeze
  """
  freeze: Boolean!

  """
  The address to freeze or unfreeze
  """
  userAddress: String!
}

input ATKFundImplementationSetComplianceInput {
  """
  The address of the main compliance contract
  """
  _compliance: String!
}

input ATKFundImplementationSetIdentityRegistryInput {
  """
  The address of the Identity Registry contract
  """
  _identityRegistry: String!
}

input ATKFundImplementationSetOnchainIDInput {
  """
  The address of the OnchainID contract to associate with this token
  """
  _onchainID: String!
}

input ATKFundImplementationSetParametersForComplianceModuleInput {
  """
  The address of the compliance module
  """
  _module: String!

  """
  The encoded parameters to set for the module
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type ATKFundImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKFundImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKFundImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKFundImplementationTransferInput {
  """
  The amount of tokens to transfer
  """
  _amount: String!

  """
  The address to receive the tokens
  """
  _to: String!
}

"""
Get the `pos`-th checkpoint for `account`.
"""
type ATKFundImplementationTuple0CheckpointsOutput {
  _key: Float
  _value: String
}

"""
Returns a list of all active compliance modules and their current parameters.
Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
"""
type ATKFundImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKFundImplementationUnfreezePartialTokensInput {
  """
  The amount of tokens to unfreeze
  """
  amount: String!

  """
  The address for which to unfreeze tokens
  """
  userAddress: String!
}

type ATKFundProxy {
  id: ID
}

input ATKFundProxyDeployContractATKFundProxyInitialModulePairsInput {
  module: String!
  params: String!
}

"""
Returns the transaction hash
"""
type ATKFundProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKFundProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityFactoryImplementation {
  """
  Prefix used in salt calculation for creating contract identities to ensure unique salt generation.
  """
  CONTRACT_SALT_PREFIX: String

  """
  Prefix used in salt calculation for creating wallet identities to ensure unique salt generation.
  """
  WALLET_SALT_PREFIX: String

  """
  Computes the deterministic address at which an identity proxy for a contract will be deployed (or was deployed) using address-based salt.
  Uses the contract address to calculate a deterministic salt for deployment address prediction.      This provides predictable addresses based on the contract address.
  address The pre-computed CREATE2 deployment address for the contract's identity contract.
  """
  calculateContractIdentityAddress(_contractAddress: String!): String

  """
  Computes the deterministic address at which a `ATKIdentityProxy` for an investor wallet will be deployed (or was deployed).
  This function uses the `CREATE2` address calculation logic. It first calculates a unique salt using      the `WALLET_SALT_PREFIX` and the `_walletAddress`. Then, it calls `_computeWalletProxyAddress` with this salt      and the `_initialManager` (which is part of the proxy's constructor arguments, affecting its creation code hash).      The claim authorization contracts array (containing the trusted issuers registry) is retrieved from the system for address calculation.      This allows prediction of the identity address before actual deployment.
  address The pre-computed CREATE2 deployment address for the wallet's identity contract.
  """
  calculateWalletIdentityAddress(
    _initialManager: String!
    _walletAddress: String!
  ): String

  """
  Checks if the caller can add a claim to the identity contract.
  The identity factory allows the system admin to add claims.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(caller: String!): Boolean

  """
  Checks if the caller can remove a claim from the identity contract.
  The identity factory allows the system admin to remove claims.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(caller: String!): Boolean

  """
  Retrieves the deployed identity proxy address associated with a given contract.
  address The address of the identity proxy if one has been created for the `_contract`, otherwise `address(0)`.
  """
  getContractIdentity(_contract: String!): String

  """
  Retrieves the deployed `ATKIdentityProxy` address associated with a given investor wallet.
  address The address of the `ATKIdentityProxy` if one has been created for the `_wallet`, otherwise `address(0)`.
  """
  getIdentity(_wallet: String!): String

  """
  Returns the address of the `IATKSystem` contract that this factory uses.
  The `IATKSystem` contract provides the addresses for the actual logic implementations      of `ATKIdentity` and `ATKContractIdentity` that the deployed proxies will delegate to.
  address The address of the configured `IATKSystem` contract.
  """
  getSystem: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the address of the identity factory's own OnChain ID.
  This is set during bootstrap when the factory creates its own identity.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to query what interfaces this contract implements. It declares support for the `IATKIdentityFactory` interface and any interfaces supported by its parent contracts (like `ERC165Upgradeable`).
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKIdentityFactoryImplementationCreateContractIdentityInput {
  """
  The address of the contract implementing IContractWithIdentity for which the identity is being created.
  """
  _contract: String!
}

input ATKIdentityFactoryImplementationCreateIdentityInput {
  """
  An array of `bytes32` values representing additional management keys (keccak256 hashes of public keys or addresses) to be added to the identity.                        These keys are granted `MANAGEMENT_KEY` purpose (purpose 1) according to ERC734.
  """
  _managementKeys: [String!]!

  """
  The investor wallet address for which the identity is being created. This address will also be set as an initial manager of the identity.
  """
  _wallet: String!
}

input ATKIdentityFactoryImplementationInitializeInput {
  """
  The address of the central `IATKSystem` contract. This contract is crucial as it dictates                      which identity logic implementation contracts the new identity proxies will point to.
  """
  systemAddress: String!
}

input ATKIdentityFactoryImplementationSetOnchainIDInput {
  """
  The address of the identity factory's own identity contract.
  """
  identityAddress: String!
}

"""
Returns the transaction hash
"""
type ATKIdentityFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKIdentityFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityImplementation {
  """
  Retrieves a claim by its ID.
  Retrieves a claim by its ID from the claims storage.
  topic The claim's topic, scheme The claim's scheme, issuer The claim's issuer address, signature The claim's signature, data The claim's data, uri The claim's URI.
  """
  getClaim(_claimId: String!): ATKIdentityImplementationGetClaimOutput

  """
  Returns all registered claim authorization contracts.
  Array of authorization contract addresses.
  """
  getClaimAuthorizationContracts: [String!]

  """
  Returns all claim IDs for a specific topic.
  See {IERC735-getClaimIdsByTopic}. Returns an array of claim IDs associated with a specific topic.
  Array of claim IDs associated with the topic.
  """
  getClaimIdsByTopic(
    _topic: String!
  ): ATKIdentityImplementationGetClaimIdsByTopicOutput

  """
  Retrieves information about a key.
  See {IERC734-getKey}. Returns the purposes, key type, and the key itself for a given `_key` hash.
  The key identifier itself, The type of the key, Array of purposes associated with the key.
  """
  getKey(_key: String!): ATKIdentityImplementationGetKeyOutput

  """
  Returns all purposes associated with a key.
  See {IERC734-getKeyPurposes}. Returns the list of purposes associated with a `_key`.
  Array of purposes associated with the key.
  """
  getKeyPurposes(_key: String!): ATKIdentityImplementationGetKeyPurposesOutput

  """
  Returns all keys that have a specific purpose.
  See {IERC734-getKeysByPurpose}. Returns an array of key hashes that have the given `_purpose`.
  Array of key identifiers that have the specified purpose.
  """
  getKeysByPurpose(
    _purpose: String!
  ): ATKIdentityImplementationGetKeysByPurposeOutput

  """
  Recovers the address that signed the given data.
  returns the address that signed the given data.
  the address that signed dataHash and created the signature sig.
  """
  getRecoveredAddress(
    dataHash: String!
    sig: String!
  ): ATKIdentityImplementationGetRecoveredAddressOutput
  id: ID

  """
  Checks if a contract is registered as a claim authorization contract.
  True if registered, false otherwise.
  """
  isClaimAuthorizationContractRegistered(
    authorizationContract: String!
  ): Boolean

  """
  Checks if a claim is revoked.
  Checks if a claim is revoked.
  True if the claim is revoked, false otherwise.
  """
  isClaimRevoked(_sig: String!): Boolean

  """
  Validates a claim and checks if it has been revoked.
  Checks if a claim is valid by first checking the parent implementation and then verifying it's not revoked.
  true if the claim is valid and not revoked, false otherwise.
  """
  isClaimValid(
    _identity: String!
    claimTopic: String!
    data: String!
    sig: String!
  ): ATKIdentityImplementationIsClaimValidOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a key has a specific purpose.
  True if the key has the specified purpose, false otherwise.
  """
  keyHasPurpose(
    _key: String!
    _purpose: String!
  ): ATKIdentityImplementationKeyHasPurposeOutput

  """
  Mapping to track revoked claims by their signature hash.
  """
  revokedClaims(bytes320: String!): Boolean

  """
  Checks if the contract supports a given interface ID.
  It declares support for `IIdentity`, `IERC734`, `IERC735` (components of `IIdentity`),      and `IERC165` itself. It chains to `ERC165Upgradeable.supportsInterface`.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKIdentityImplementationAddClaimInput {
  _data: String!
  _issuer: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
}

input ATKIdentityImplementationAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input ATKIdentityImplementationApproveInput {
  _id: String!
  _toApprove: Boolean!
}

input ATKIdentityImplementationExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type ATKIdentityImplementationGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type ATKIdentityImplementationGetClaimOutput {
  address2: String
  bytes3: String
  bytes4: String
  string5: String
  uint2560: String
  uint2561: String
}

type ATKIdentityImplementationGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type ATKIdentityImplementationGetKeyPurposesOutput {
  purposes: [String!]
}

type ATKIdentityImplementationGetKeysByPurposeOutput {
  keys: [String!]
}

type ATKIdentityImplementationGetRecoveredAddressOutput {
  addr: String
}

input ATKIdentityImplementationInitializeInput {
  """
  Array of addresses implementing IClaimAuthorizer to register as claim authorizers.
  """
  claimAuthorizationContracts: [String!]!

  """
  The address to be set as the initial management key for this identity.
  """
  initialManagementKey: String!
}

type ATKIdentityImplementationIsClaimValidOutput {
  claimValid: Boolean
}

type ATKIdentityImplementationKeyHasPurposeOutput {
  exists: Boolean
}

input ATKIdentityImplementationRegisterClaimAuthorizationContractInput {
  """
  The address of the contract implementing IClaimAuthorization
  """
  authorizationContract: String!
}

input ATKIdentityImplementationRemoveClaimAuthorizationContractInput {
  """
  The address of the contract to remove
  """
  authorizationContract: String!
}

input ATKIdentityImplementationRemoveClaimInput {
  _claimId: String!
}

input ATKIdentityImplementationRemoveKeyInput {
  _key: String!
  _purpose: String!
}

input ATKIdentityImplementationRevokeClaimBySignatureInput {
  """
  The signature of the claim to revoke
  """
  signature: String!
}

input ATKIdentityImplementationRevokeClaimInput {
  """
  The ID of the claim to revoke
  """
  _claimId: String!

  """
  The address of the identity (not used in this implementation)
  """
  _identity: String!
}

"""
Returns the transaction hash
"""
type ATKIdentityImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKIdentityImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKIdentityProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKIdentityProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKIdentityRegistryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given user address is registered in the identity system.
  This function queries the `_identityStorage` contract by attempting to retrieve the `storedIdentity`. If the retrieval is successful (does not revert), it means the identity exists, and the function returns `true`. If the retrieval reverts (e.g., identity not found in storage), it's caught, and the function returns `false`. This approach avoids a direct "exists" function on the storage if not available, relying on try/catch.
  `true` if the `_userAddress` is registered, `false` otherwise.
  """
  contains(_userAddress: String!): Boolean

  """
  Gets the new wallet address that replaced a lost wallet during recovery.
  This is the key function for token recovery validation.
  The new wallet address that replaced the lost wallet, or address(0) if not found.
  """
  getRecoveredWallet(lostWallet: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the `IIdentity` contract address associated with a given user address.
  This function directly calls `_identityStorage.storedIdentity()` to fetch the identity contract. It's a public view function, meaning it can be called externally without gas costs for reading data. If the `_userAddress` is not registered, this call will likely revert (behavior depends on the storage contract). Consider using `contains()` first if a revert is not desired for non-existent users.
  The address of the `IIdentity` contract associated with the `_userAddress`. Returns address(0) or reverts if the user is not registered, depending on storage implementation.
  """
  identity(_userAddress: String!): String

  """
  Returns the address of the currently configured identity storage contract.
  This allows external contracts or UIs to discover the location of the storage layer.
  The address of the `ISMARTIdentityRegistryStorage` contract.
  """
  identityStorage: String

  """
  Retrieves the country code associated with a registered user address.
  This function first checks if the `_userAddress` is registered using `this.contains()`. If not registered, it reverts with `IdentityNotRegistered`. Otherwise, it calls `_identityStorage.storedInvestorCountry()` to fetch the country code.
  The numerical country code (uint16) associated with the `_userAddress`. Reverts if the user is not registered.
  """
  investorCountry(_userAddress: String!): Int

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean
  isVerified(
    _userAddress: String!
    expression: [ATKIdentityRegistryImplementationIsVerifiedExpressionInput!]!
  ): Boolean

  """
  Checks if a wallet address has been marked as lost.
  True if the wallet is marked as lost, false otherwise.
  """
  isWalletLost(userWallet: String!): Boolean

  """
  Returns the address of the currently configured trusted issuers registry contract.
  This allows external contracts or UIs to discover the location of the trusted issuers list.
  The address of the `IERC3643TrustedIssuersRegistry` contract.
  """
  issuersRegistry: String

  """
  Indicates whether this contract supports a given interface ID.
  This function is part of the ERC165 standard for interface detection.      It checks if the contract implements the `ISMARTIdentityRegistry` interface      or any interfaces supported by its parent contracts (via `super.supportsInterface`).      This allows other contracts to query if this registry conforms to the expected interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the currently configured topic scheme registry contract.
  This allows external contracts or UIs to discover the location of the topic scheme registry.
  The address of the `ISMARTTopicSchemeRegistry` contract.
  """
  topicSchemeRegistry: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKIdentityRegistryImplementationBatchRegisterIdentityInput {
  """
  An array of numerical country codes (uint16) corresponding to each user address. Reverts with `ArrayLengthMismatch` if the lengths of the input arrays are inconsistent.
  """
  _countries: [Int!]!

  """
  An array of `IIdentity` contract addresses corresponding to each user address.
  """
  _identities: [String!]!

  """
  An array of user blockchain addresses to be registered.
  """
  _userAddresses: [String!]!
}

input ATKIdentityRegistryImplementationDeleteIdentityInput {
  """
  The blockchain address of the user whose identity is to be deleted. Reverts with `IdentityNotRegistered` if the address is not found.
  """
  _userAddress: String!
}

input ATKIdentityRegistryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the deployed `ISMARTIdentityRegistryStorage` contract. This contract will be used to store all identity data.
  """
  identityStorage_: String!

  """
  The address of the deployed `ISMARTTopicSchemeRegistry` contract. This contract will be used to validate claim topics against registered schemes.
  """
  topicSchemeRegistry_: String!

  """
  The address of the deployed `IERC3643TrustedIssuersRegistry` contract. This contract will be used to verify claims against trusted issuers.
  """
  trustedIssuersRegistry_: String!
}

input ATKIdentityRegistryImplementationIsVerifiedExpressionInput {
  nodeType: Int!
  value: String!
}

input ATKIdentityRegistryImplementationRecoverIdentityInput {
  """
  The current wallet address to be marked as lost.
  """
  lostWallet: String!

  """
  The new IIdentity contract address for the new wallet.
  """
  newOnchainId: String!

  """
  The new wallet address to be registered.
  """
  newWallet: String!
}

input ATKIdentityRegistryImplementationRegisterIdentityInput {
  """
  A numerical code (uint16) representing the user's country of residence or jurisdiction.
  """
  _country: Int!

  """
  The address of the `IIdentity` (ERC725/ERC734) contract representing the user's on-chain identity.
  """
  _identity: String!

  """
  The blockchain address of the user whose identity is being registered. This address will be linked to the `_identity` contract.
  """
  _userAddress: String!
}

input ATKIdentityRegistryImplementationSetIdentityRegistryStorageInput {
  """
  The new address for the `ISMARTIdentityRegistryStorage` contract.
  """
  identityStorage_: String!
}

input ATKIdentityRegistryImplementationSetTopicSchemeRegistryInput {
  """
  The new address for the `ISMARTTopicSchemeRegistry` contract.
  """
  topicSchemeRegistry_: String!
}

input ATKIdentityRegistryImplementationSetTrustedIssuersRegistryInput {
  """
  The new address for the `IERC3643TrustedIssuersRegistry` contract.
  """
  trustedIssuersRegistry_: String!
}

"""
Returns the transaction hash
"""
type ATKIdentityRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKIdentityRegistryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKIdentityRegistryImplementationUpdateCountryInput {
  """
  The new numerical country code (uint16) for the user.
  """
  _country: Int!

  """
  The blockchain address of the user whose country code is to be updated. Reverts with `IdentityNotRegistered` if the address is not found.
  """
  _userAddress: String!
}

input ATKIdentityRegistryImplementationUpdateIdentityInput {
  """
  The address of the new `IIdentity` contract to associate with the `_userAddress`. Reverts with `InvalidIdentityAddress` if this is the zero address.
  """
  _identity: String!

  """
  The blockchain address of the user whose `IIdentity` contract is to be updated. Reverts with `IdentityNotRegistered` if the address is not found.
  """
  _userAddress: String!
}

type ATKIdentityRegistryStorageImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns an array of all wallet addresses that have a registered identity in this storage contract.
  This function provides a way to enumerate all users who currently have an active identity record stored. It's useful for administrative purposes, data analysis, or for front-ends that need to display a list of all registered users.
  An array of `address` types, where each address is a wallet address that has a stored identity. The array will be empty if no identities are currently registered.
  """
  getIdentityWallets: [String!]

  """
  Gets the new wallet address that replaced a lost wallet during recovery.
  This is the key function for token recovery - allows checking if caller is authorized to recover from lostWallet.
  The new wallet address that replaced the lost wallet, or address(0) if not found.
  """
  getRecoveredWalletFromStorage(lostWallet: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a user wallet is globally marked as lost in the storage.
  A "globally lost" wallet means it has been declared lost in the context of at least one identity      it was associated with.
  True if the wallet has been marked as lost at least once, false otherwise.
  """
  isWalletMarkedAsLost(userWallet: String!): Boolean

  """
  Returns an array of addresses of all `SMARTIdentityRegistry` contracts currently bound to this storage.
  "Bound" means these registry contracts have been granted the `IDENTITY_REGISTRY_MODULE_ROLE` and are authorized to write data to this storage contract. This function provides a way to discover which registry contracts are active and can modify identity data.
  An array of `address` types, where each address is that of a bound identity registry contract. The array will be empty if no registries are currently bound.
  """
  linkedIdentityRegistries: [String!]

  """
  Retrieves the `IIdentity` contract address associated with a registered user's wallet address.
  This function performs a direct lookup in the `_identities` mapping. It first checks if an `identityContract` is stored for the `_userAddress` (i.e., it's not `address(0)`). If no identity contract is found (meaning the `_userAddress` is not registered or has been removed), the function reverts with the `IdentityDoesNotExist` error.Reverts with `IdentityDoesNotExist(_userAddress)` if no identity record is found for the `_userAddress`.
  The `IIdentity` contract address linked to the `_userAddress`. This is returned as an `IIdentity` type for type safety, but it's fundamentally an address.
  """
  storedIdentity(_userAddress: String!): String

  """
  Retrieves the numerical country code associated with a registered user's wallet address.
  This function performs a direct lookup in the `_identities` mapping for the given `_userAddress`. It first checks if an `identityContract` is associated with the `_userAddress`. This is a crucial check because a country code should only be considered valid if there's an active identity registration. If no `identityContract` is found (i.e., the address is `address(0)`), it implies the user is not registered or their identity has been removed, so the function reverts with `IdentityDoesNotExist`. If an identity contract exists, the function returns the `country` field from the `Identity` struct.Reverts with `IdentityDoesNotExist(_userAddress)` if no identity record (specifically, no identity contract) is found for the `_userAddress`.
  The `uint16` country code associated with the `_userAddress`.
  """
  storedInvestorCountry(_userAddress: String!): Int

  """
  Indicates whether this contract supports a given interface ID, as per the ERC165 standard.
  This function allows other contracts or off-chain tools to query if this contract implements specific interfaces. It checks if the `interfaceId` matches: 1.  `type(ISMARTIdentityRegistryStorage).interfaceId`: This confirms that the contract adheres to the     standard interface for ERC-3643 compliant identity registry storage. 2.  Any interfaces supported by its parent contracts (e.g., `AccessControlUpgradeable`,     `ERC165Upgradeable` itself) by calling `super.supportsInterface(interfaceId)`. This is crucial for interoperability within the ecosystem, allowing, for example, a `SMARTIdentityRegistry` to verify that it's interacting with a compatible storage contract.
  `true` if the contract supports the specified `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKIdentityRegistryStorageImplementationAddIdentityToStorageInput {
  """
  The numerical country code (uint16) representing the user's jurisdiction, used for compliance.
  """
  _country: Int!

  """
  The address of the `IIdentity` contract representing the user's on-chain identity. This contract would hold claims and keys for the user.
  """
  _identity: String!

  """
  The user's external wallet address (e.g., their EOA). This is the primary key for the identity record.
  """
  _userAddress: String!
}

input ATKIdentityRegistryStorageImplementationBindIdentityRegistryInput {
  """
  The address of the `SMARTIdentityRegistry` contract to bind. This registry will then be able to call functions like `addIdentityToStorage` if it has the proper role in the access manager.
  """
  _identityRegistry: String!
}

input ATKIdentityRegistryStorageImplementationInitializeInput {
  """
  The address of the centralized ATKSystemAccessManager contract that will handle role checks.
  """
  accessManager: String!
}

input ATKIdentityRegistryStorageImplementationLinkWalletRecoveryInput {
  """
  The lost wallet address.
  """
  lostWallet: String!

  """
  The new replacement wallet address.
  """
  newWallet: String!
}

input ATKIdentityRegistryStorageImplementationMarkWalletAsLostInput {
  """
  The IIdentity contract address to which the userWallet was associated.
  """
  identityContract: String!

  """
  The user wallet address to be marked as lost.
  """
  userWallet: String!
}

input ATKIdentityRegistryStorageImplementationModifyStoredIdentityInput {
  """
  The new `IIdentity` contract address to associate with the `_userAddress`.
  """
  _identity: String!

  """
  The user's external wallet address whose associated `IIdentity` contract is to be updated.
  """
  _userAddress: String!
}

input ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountryInput {
  """
  The new numerical country code (uint16) to associate with the `_userAddress`.
  """
  _country: Int!

  """
  The user's external wallet address whose associated country code is to be updated.
  """
  _userAddress: String!
}

input ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorageInput {
  """
  The user's external wallet address whose identity record is to be removed.
  """
  _userAddress: String!
}

"""
Returns the transaction hash
"""
type ATKIdentityRegistryStorageImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKIdentityRegistryStorageImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKIdentityRegistryStorageImplementationUnbindIdentityRegistryInput {
  """
  The address of the `SMARTIdentityRegistry` contract to unbind. This registry will no longer be able to modify storage data.
  """
  _identityRegistry: String!
}

type ATKLinearVestingStrategy {
  """
  The cliff duration before any tokens can be claimed, in seconds.
  """
  CLIFF_DURATION: String

  """
  Type identifier for this vesting strategy contract.
  """
  TYPE_ID: String

  """
  The total duration of the vesting period in seconds.
  """
  VESTING_DURATION: String

  """
  Calculates the amount claimable based on linear vesting parameters.
  Implements linear vesting with optional cliff period. No tokens are claimable before cliff.      After cliff, tokens vest linearly until the full vesting duration is reached.      The first parameter (account) is unused but kept for interface compatibility.
  The amount that can be claimed now.
  """
  calculateClaimableAmount(
    address0: String!
    claimedAmount: String!
    totalAmount: String!
    vestingStartTime: String!
  ): ATKLinearVestingStrategyCalculateClaimableAmountOutput

  """
  Returns the cliff duration.
  The cliff duration in seconds.
  """
  cliffDuration: String
  id: ID

  """
  Returns whether this strategy supports multiple claims over time.
  Linear vesting requires multiple claims as tokens become available gradually.
  Always true for linear vesting strategy.
  """
  supportsMultipleClaims: ATKLinearVestingStrategySupportsMultipleClaimsOutput

  """
  Returns the unique type identifier for this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String

  """
  Returns the total vesting duration.
  The vesting duration in seconds.
  """
  vestingDuration: String
}

type ATKLinearVestingStrategyCalculateClaimableAmountOutput {
  claimableAmount: String
}

type ATKLinearVestingStrategySupportsMultipleClaimsOutput {
  supportsMultiple: Boolean
}

"""
Returns the transaction hash
"""
type ATKLinearVestingStrategyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKLinearVestingStrategyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKPeopleRoles {
  """
  Role identifier for addresses that can manage the addons.
  """
  ADDON_MANAGER_ROLE: String

  """
  Role identifier for addresses that can audit the system.
  """
  AUDITOR_ROLE: String

  """
  Role identifier for addresses that can manage the claim policies.
  """
  CLAIM_POLICY_MANAGER_ROLE: String

  """
  Role identifier for addresses that can manage the compliance.
  """
  COMPLIANCE_MANAGER_ROLE: String

  """
  Role identifier for addresses that can manage the identity registry.
  """
  IDENTITY_MANAGER_ROLE: String

  """
  Role identifier for addresses that can manage organisation identity claims.
  """
  ORGANISATION_IDENTITY_MANAGER_ROLE: String

  """
  Role identifier for addresses that can manage the system.
  """
  SYSTEM_MANAGER_ROLE: String

  """
  Role identifier for addresses that can manage the token.
  """
  TOKEN_MANAGER_ROLE: String
  id: ID
}

"""
Returns the transaction hash
"""
type ATKPeopleRolesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKPeopleRolesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKPushAirdropFactoryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the total number of push airdrop proxy contracts created by this factory.
  The number of push airdrop proxies created.
  """
  allAirdropsLength: ATKPushAirdropFactoryImplementationAllAirdropsLengthOutput

  """
  Address of the current `ATKPushAirdrop` logic contract (implementation).
  """
  atkPushAirdropImplementation: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an system addon address was deployed by this factory.
  """
  isFactorySystemAddon(
    systemAddonAddress: String!
  ): ATKPushAirdropFactoryImplementationIsFactorySystemAddonOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the deployment address of a push airdrop proxy.
  The predicted address of the push airdrop proxy.
  """
  predictPushAirdropAddress(
    distributionCap: String!
    name: String!
    owner: String!
    root: String!
    token: String!
  ): ATKPushAirdropFactoryImplementationPredictPushAirdropAddressOutput

  """
  Checks if the factory supports a specific interface.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Type identifier for the factory.
  The keccak256 hash of "ATKPushAirdropFactory".
  """
  typeId: String
}

type ATKPushAirdropFactoryImplementationAllAirdropsLengthOutput {
  count: String
}

input ATKPushAirdropFactoryImplementationCreateInput {
  """
  The maximum tokens that can be distributed (0 for no cap).
  """
  distributionCap: String!

  """
  The human-readable name for the airdrop.
  """
  name: String!

  """
  The initial owner of the contract (admin who can distribute tokens).
  """
  owner: String!

  """
  The Merkle root for verifying distributions.
  """
  root: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token: String!
}

input ATKPushAirdropFactoryImplementationInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type ATKPushAirdropFactoryImplementationIsFactorySystemAddonOutput {
  isFactorySystemAddon: Boolean
}

type ATKPushAirdropFactoryImplementationPredictPushAirdropAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKPushAirdropFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKPushAirdropFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKPushAirdropFactoryImplementationUpdateImplementationInput {
  """
  The address of the new `ATKPushAirdrop` logic contract.
  """
  _newImplementation: String!
}

type ATKPushAirdropImplementation {
  """
  Maximum number of items allowed in batch operations to prevent OOM and gas limit issues.
  """
  MAX_BATCH_SIZE: String

  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Returns the distribution cap.
  The maximum tokens that can be distributed (0 for no cap).
  """
  distributionCap: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String
  id: ID

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Checks if tokens have been distributed to a specific index.
  distributed True if tokens have been distributed for this index.
  """
  isDistributed(index: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the address of the current owner.
  """
  owner: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String

  """
  Returns the total amount of tokens distributed so far.
  The total amount distributed.
  """
  totalDistributed: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKPushAirdropImplementationBatchDistributeInput {
  """
  The amounts of tokens to distribute to each recipient.
  """
  amounts: [String!]!

  """
  The indices of the distributions in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proof arrays for verification of each distribution.
  """
  merkleProofs: [[String!]!]!

  """
  The addresses to receive tokens.
  """
  recipients: [String!]!
}

input ATKPushAirdropImplementationDistributeInput {
  """
  The amount of tokens to distribute.
  """
  amount: String!

  """
  The index of the distribution in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array for verification.
  """
  merkleProof: [String!]!

  """
  The address to receive tokens.
  """
  recipient: String!
}

input ATKPushAirdropImplementationInitializeInput {
  """
  The maximum tokens that can be distributed (0 for no cap).
  """
  distributionCap_: String!

  """
  The human-readable name for this airdrop.
  """
  name_: String!

  """
  The initial owner of the contract (admin who can distribute tokens).
  """
  owner_: String!

  """
  The Merkle root for verifying distributions.
  """
  root_: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token_: String!
}

input ATKPushAirdropImplementationSetDistributionCapInput {
  """
  The new distribution cap (0 for no cap).
  """
  newDistributionCap_: String!
}

"""
Returns the transaction hash
"""
type ATKPushAirdropImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKPushAirdropImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKPushAirdropImplementationTransferOwnershipInput {
  newOwner: String!
}

input ATKPushAirdropImplementationWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type ATKPushAirdropProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKPushAirdropProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKPushAirdropProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKRoles {
  """
  The default admin role that can grant and revoke other roles.
  """
  DEFAULT_ADMIN_ROLE: String
  id: ID
}

"""
Returns the transaction hash
"""
type ATKRolesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKRolesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKStableCoinFactoryImplementation {
  """
  Type identifier for this factory contract.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an access manager address was deployed by this factory.
  """
  isFactoryAccessManager(
    accessManagerAddress: String!
  ): ATKStableCoinFactoryImplementationIsFactoryAccessManagerOutput

  """
  Mapping indicating whether a token address was deployed by this factory.
  """
  isFactoryToken(
    tokenAddress: String!
  ): ATKStableCoinFactoryImplementationIsFactoryTokenOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a given address implements the IATKStableCoin interface.
  bool True if the contract supports the IATKStableCoin interface, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictStableCoinAddress(
    decimals_: Int!
    initialModulePairs_: [ATKStableCoinFactoryImplementationPredictStableCoinAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): ATKStableCoinFactoryImplementationPredictStableCoinAddressOutput

  """
  Checks if the contract supports a given interface.
  True if the contract supports the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the type identifier for this factory contract.
  The TYPE_ID constant value.
  """
  typeId: String
}

input ATKStableCoinFactoryImplementationATKStableCoinFactoryImplementationCreateStableCoinInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKStableCoinFactoryImplementationCreateStableCoinInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [ATKStableCoinFactoryImplementationATKStableCoinFactoryImplementationCreateStableCoinInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKStableCoinFactoryImplementationInitializeInput {
  """
  The address to be granted the DEFAULT_ADMIN_ROLE and DEPLOYER_ROLE.
  """
  initialAdmin: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The initial address of the token implementation contract.
  """
  tokenImplementation_: String!
}

type ATKStableCoinFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type ATKStableCoinFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

input ATKStableCoinFactoryImplementationPredictStableCoinAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type ATKStableCoinFactoryImplementationPredictStableCoinAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKStableCoinFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKStableCoinFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKStableCoinFactoryImplementationUpdateTokenImplementationInput {
  """
  The new address for the token implementation contract. Cannot be the zero address.
  """
  newImplementation: String!
}

type ATKStableCoinImplementation {
  """
  Returns the address of the current `SMARTTokenAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Permission check: can `actor` add a claim?.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim?.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Returns the `ISMARTCompliance` contract instance used by this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  ISMARTCompliance The current compliance contract.
  """
  compliance: String

  """
  Returns a list of all active compliance modules and their current parameters.
  Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
  SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
  """
  complianceModules: [ATKStableCoinImplementationTuple0ComplianceModulesOutput!]

  """
  Returns the number of decimals for the token.
  Need to explicitly override because ERC20Upgradeable also defines decimals(). Ensures we read the value set by __SMART_init_unchained via _SMARTLogic.
  uint8 The number of decimals.
  """
  decimals: Int

  """
  Attempts to find the first valid collateral claim on the token contract's own identity.
  Implements the `ISMARTCollateral` interface function.      It fetches trusted issuers for the `collateralProofTopic` from the `identityRegistry`.      Then, it retrieves all claims with this topic from the token's own `onchainID` contract.      It iterates through these claims, calling `__checkSingleClaim` for each to find the first one      that is valid, issued by a trusted issuer, not expired, and correctly decodable.      `virtual` allows this to be overridden in derived contracts if more specific logic is needed.
  The collateral amount from the first valid claim found (0 if none)., The expiry timestamp of the first valid claim (0 if none or expired)., The address of the claim issuer for the first valid claim (address(0) if none).
  """
  findValidCollateralClaim: ATKStableCoinImplementationFindValidCollateralClaimOutput

  """
  Gets the amount of tokens specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The value stored in `__frozenTokens[userAddress]`.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the `ISMARTIdentityRegistry` contract instance used by this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  ISMARTIdentityRegistry The current identity registry contract.
  """
  identityRegistry: String

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if `__frozen[userAddress]` is true, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the ONCHAINID associated with this contract.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  Reads the private `_paused` state variable.
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Standard ERC165 function to check interface support in an upgradeable context.
  Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.
  bool `true` if the interface is supported, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKStableCoinImplementationATKStableCoinImplementationInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

input ATKStableCoinImplementationAddComplianceModuleInput {
  """
  The address of the compliance module to add
  """
  _module: String!

  """
  The encoded parameters for the compliance module
  """
  _params: String!
}

input ATKStableCoinImplementationApproveInput {
  spender: String!
  value: String!
}

input ATKStableCoinImplementationBatchBurnInput {
  """
  Array of amounts to burn from each address
  """
  amounts: [String!]!

  """
  Array of addresses to burn tokens from
  """
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBatchForcedTransferInput {
  """
  Array of amounts to transfer
  """
  amounts: [String!]!

  """
  Array of addresses to transfer tokens from
  """
  fromList: [String!]!

  """
  Array of addresses to transfer tokens to
  """
  toList: [String!]!
}

input ATKStableCoinImplementationBatchFreezePartialTokensInput {
  """
  Array of amounts to freeze for each address
  """
  amounts: [String!]!

  """
  Array of addresses to freeze tokens for
  """
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBatchMintInput {
  """
  Array of amounts to mint to each address
  """
  _amounts: [String!]!

  """
  Array of addresses to mint tokens to
  """
  _toList: [String!]!
}

input ATKStableCoinImplementationBatchSetAddressFrozenInput {
  """
  Array of booleans indicating freeze (true) or unfreeze (false) for each address
  """
  freeze: [Boolean!]!

  """
  Array of addresses to freeze or unfreeze
  """
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBatchTransferInput {
  """
  An array of corresponding token amounts.
  """
  amounts: [String!]!

  """
  An array of recipient addresses.
  """
  toList: [String!]!
}

input ATKStableCoinImplementationBatchUnfreezePartialTokensInput {
  """
  Array of amounts to unfreeze for each address
  """
  amounts: [String!]!

  """
  Array of addresses to unfreeze tokens for
  """
  userAddresses: [String!]!
}

input ATKStableCoinImplementationBurnInput {
  """
  The amount of tokens to burn
  """
  amount: String!

  """
  The address to burn tokens from
  """
  userAddress: String!
}

type ATKStableCoinImplementationFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

input ATKStableCoinImplementationForcedRecoverTokensInput {
  """
  The address of the lost wallet
  """
  lostWallet: String!

  """
  The address of the new wallet to transfer tokens to
  """
  newWallet: String!
}

input ATKStableCoinImplementationForcedTransferInput {
  """
  The amount of tokens to transfer
  """
  amount: String!

  """
  The address to transfer tokens from
  """
  from: String!

  """
  The address to transfer tokens to
  """
  to: String!
}

input ATKStableCoinImplementationFreezePartialTokensInput {
  """
  The amount of tokens to freeze
  """
  amount: String!

  """
  The address to freeze tokens for
  """
  userAddress: String!
}

input ATKStableCoinImplementationInitializeInput {
  accessManager_: String!
  collateralTopicId_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [ATKStableCoinImplementationATKStableCoinImplementationInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input ATKStableCoinImplementationMintInput {
  """
  The amount of tokens to mint
  """
  _amount: String!

  """
  The address to mint tokens to
  """
  _to: String!
}

input ATKStableCoinImplementationRecoverERC20Input {
  """
  The amount of tokens to recover
  """
  amount: String!

  """
  The address to send recovered tokens to
  """
  to: String!

  """
  The address of the ERC20 token to recover
  """
  token: String!
}

input ATKStableCoinImplementationRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  lostWallet: String!
}

input ATKStableCoinImplementationRedeemInput {
  """
  The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.
  """
  amount: String!
}

input ATKStableCoinImplementationRemoveComplianceModuleInput {
  """
  The address of the compliance module to remove
  """
  _module: String!
}

input ATKStableCoinImplementationSetAddressFrozenInput {
  """
  True to freeze, false to unfreeze
  """
  freeze: Boolean!

  """
  The address to freeze or unfreeze
  """
  userAddress: String!
}

input ATKStableCoinImplementationSetComplianceInput {
  """
  The address of the compliance contract
  """
  _compliance: String!
}

input ATKStableCoinImplementationSetIdentityRegistryInput {
  """
  The address of the identity registry contract
  """
  _identityRegistry: String!
}

input ATKStableCoinImplementationSetOnchainIDInput {
  """
  The address of the on-chain identity contract
  """
  _onchainID: String!
}

input ATKStableCoinImplementationSetParametersForComplianceModuleInput {
  """
  The address of the compliance module
  """
  _module: String!

  """
  The encoded parameters for the compliance module
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type ATKStableCoinImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKStableCoinImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKStableCoinImplementationTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ATKStableCoinImplementationTransferInput {
  """
  The amount of tokens to transfer
  """
  _amount: String!

  """
  The address to transfer tokens to
  """
  _to: String!
}

"""
Returns a list of all active compliance modules and their current parameters.
Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
"""
type ATKStableCoinImplementationTuple0ComplianceModulesOutput {
  module: String
  params: String
}

input ATKStableCoinImplementationUnfreezePartialTokensInput {
  """
  The amount of tokens to unfreeze
  """
  amount: String!

  """
  The address to unfreeze tokens for
  """
  userAddress: String!
}

type ATKStableCoinProxy {
  id: ID
}

input ATKStableCoinProxyDeployContractATKStableCoinProxyInitialModulePairsInput {
  module: String!
  params: String!
}

"""
Returns the transaction hash
"""
type ATKStableCoinProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKStableCoinProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKSystemAccessManaged {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID
}

"""
Returns the transaction hash
"""
type ATKSystemAccessManagedTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKSystemAccessManagedTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKSystemAccessManagerImplementation {
  DEFAULT_ADMIN_ROLE: String
  UPGRADE_INTERFACE_VERSION: String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Checks if an account has any of the specified roles.
  True if the account has at least one of the specified roles, false otherwise.
  """
  hasAnyRole(account: String!, roles: [String!]!): Boolean

  """
  Checks if an account has a specific role.
  bool True if the account has the role, false otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
  """
  proxiableUUID: String

  """
  Checks if the contract supports a given interface.
  bool True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKSystemAccessManagerImplementationBatchGrantRoleInput {
  """
  Array of addresses to grant the role to
  """
  accounts: [String!]!

  """
  The role identifier to grant
  """
  role: String!
}

input ATKSystemAccessManagerImplementationBatchRevokeRoleInput {
  """
  Array of addresses to revoke the role from
  """
  accounts: [String!]!

  """
  The role identifier to revoke
  """
  role: String!
}

input ATKSystemAccessManagerImplementationGrantMultipleRolesInput {
  """
  The address to grant roles to
  """
  account: String!

  """
  Array of role identifiers to grant
  """
  roles: [String!]!
}

input ATKSystemAccessManagerImplementationGrantRoleInput {
  """
  The address to grant the role to
  """
  account: String!

  """
  The role identifier to grant
  """
  role: String!
}

input ATKSystemAccessManagerImplementationInitializeInput {
  """
  Array of addresses to be granted the default admin role
  """
  initialAdmins: [String!]!
}

input ATKSystemAccessManagerImplementationRenounceMultipleRolesInput {
  """
  Address confirmation (must match msg.sender)
  """
  callerConfirmation: String!

  """
  Array of role identifiers to renounce
  """
  roles: [String!]!
}

input ATKSystemAccessManagerImplementationRenounceRoleInput {
  """
  The address renouncing the role (must be msg.sender)
  """
  account: String!

  """
  The role identifier to renounce
  """
  role: String!
}

input ATKSystemAccessManagerImplementationRevokeMultipleRolesInput {
  """
  The address to revoke roles from
  """
  account: String!

  """
  Array of role identifiers to revoke
  """
  roles: [String!]!
}

input ATKSystemAccessManagerImplementationRevokeRoleInput {
  """
  The address to revoke the role from
  """
  account: String!

  """
  The role identifier to revoke
  """
  role: String!
}

input ATKSystemAccessManagerImplementationSetRoleAdminInput {
  """
  The admin role to set for the given role.
  """
  adminRole: String!

  """
  The role identifier to set the admin role for.
  """
  role: String!
}

"""
Returns the transaction hash
"""
type ATKSystemAccessManagerImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKSystemAccessManagerImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKSystemAccessManagerImplementationUpgradeToAndCallInput {
  data: String!
  newImplementation: String!
}

type ATKSystemAddonRegistryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the proxy address for a given addon type.
  The address of the addon proxy contract.
  """
  addon(addonTypeHash: String!): String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the implementation address for a given addon type.
  The address of the implementation contract.
  """
  implementation(addonTypeHash: String!): String

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if the contract supports a given interface.
  bool True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKSystemAddonRegistryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the ATK system contract
  """
  systemAddress: String!
}

input ATKSystemAddonRegistryImplementationRegisterSystemAddonInput {
  """
  The implementation contract address for the addon
  """
  implementation_: String!

  """
  The initialization data to pass to the addon proxy
  """
  initializationData: String!

  """
  The unique name identifier for the addon
  """
  name: String!
}

input ATKSystemAddonRegistryImplementationSetAddonImplementationInput {
  """
  The type hash of the addon to update
  """
  addonTypeHash: String!

  """
  The new implementation contract address
  """
  implementation_: String!
}

"""
Returns the transaction hash
"""
type ATKSystemAddonRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKSystemAddonRegistryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKSystemFactory {
  """
  The default contract address for the system access manager module's logic.
  """
  ATK_SYSTEM_ACCESS_MANAGER_IMPLEMENTATION: String

  """
  The address of the ATKSystem implementation contract.
  """
  ATK_SYSTEM_IMPLEMENTATION: String

  """
  The default contract address for the addon registry module's logic.
  """
  DEFAULT_ADDON_REGISTRY_IMPLEMENTATION: String

  """
  The default contract address for the compliance module's logic (implementation).
  """
  DEFAULT_COMPLIANCE_IMPLEMENTATION: String

  """
  The default contract address for the compliance module registry module's logic.
  """
  DEFAULT_COMPLIANCE_MODULE_REGISTRY_IMPLEMENTATION: String

  """
  The default contract address for the contract identity contract's logic (template/implementation).
  """
  DEFAULT_CONTRACT_IDENTITY_IMPLEMENTATION: String

  """
  The default contract address for the identity factory module's logic (implementation).
  """
  DEFAULT_IDENTITY_FACTORY_IMPLEMENTATION: String

  """
  The default contract address for the standard identity contract's logic (template/implementation).
  """
  DEFAULT_IDENTITY_IMPLEMENTATION: String

  """
  The default contract address for the identity registry module's logic (implementation).
  """
  DEFAULT_IDENTITY_REGISTRY_IMPLEMENTATION: String

  """
  The default contract address for the identity registry storage module's logic (implementation).
  """
  DEFAULT_IDENTITY_REGISTRY_STORAGE_IMPLEMENTATION: String

  """
  The default contract address for the token access manager contract's logic (implementation).
  """
  DEFAULT_TOKEN_ACCESS_MANAGER_IMPLEMENTATION: String

  """
  The default contract address for the token factory registry module's logic.
  """
  DEFAULT_TOKEN_FACTORY_REGISTRY_IMPLEMENTATION: String

  """
  The default contract address for the topic scheme registry module's logic (implementation).
  """
  DEFAULT_TOPIC_SCHEME_REGISTRY_IMPLEMENTATION: String

  """
  The default contract address for the trusted issuers registry module's logic (implementation).
  """
  DEFAULT_TRUSTED_ISSUERS_REGISTRY_IMPLEMENTATION: String

  """
  The address of the trusted forwarder contract used by this factory for meta-transactions (ERC2771).
  """
  FACTORY_FORWARDER: String

  """
  An array storing the addresses of all `ATKSystem` instances that have been created by this factory.
  """
  atkSystems(uint2560: String!): String

  """
  Returns the default compliance implementation address.
  The address of the default compliance implementation.
  """
  defaultComplianceImplementation: String

  """
  Returns the default contract identity implementation address.
  The address of the default contract identity implementation.
  """
  defaultContractIdentityImplementation: String

  """
  Returns the default identity factory implementation address.
  The address of the default identity factory implementation.
  """
  defaultIdentityFactoryImplementation: String

  """
  Returns the default identity implementation address.
  The address of the default identity implementation.
  """
  defaultIdentityImplementation: String

  """
  Returns the default identity registry implementation address.
  The address of the default identity registry implementation.
  """
  defaultIdentityRegistryImplementation: String

  """
  Returns the default identity registry storage implementation address.
  The address of the default identity registry storage implementation.
  """
  defaultIdentityRegistryStorageImplementation: String

  """
  Returns the default token access manager implementation address.
  The address of the default token access manager implementation.
  """
  defaultTokenAccessManagerImplementation: String

  """
  Returns the default topic scheme registry implementation address.
  The address of the default topic scheme registry implementation.
  """
  defaultTopicSchemeRegistryImplementation: String

  """
  Returns the default trusted issuers registry implementation address.
  The address of the default trusted issuers registry implementation.
  """
  defaultTrustedIssuersRegistryImplementation: String

  """
  Returns the factory forwarder address.
  The address of the factory forwarder.
  """
  factoryForwarder: String

  """
  Gets the blockchain address of a `ATKSystem` instance at a specific index in the list of created systems.
  This allows retrieval of addresses for previously deployed `ATKSystem` contracts. It will revert with an `IndexOutOfBounds` error if the provided `index` is greater than or equal to the current number of created systems (i.e., if `index >= atkSystems.length`). This is a view function.
  address The blockchain address of the `ATKSystem` contract found at the given `index`.
  """
  getSystemAtIndex(index: String!): String

  """
  Gets the total number of `ATKSystem` instances that have been created by this factory.
  This is a view function, meaning it only reads blockchain state and does not cost gas to call (if called externally, not in a transaction).
  uint256 The count of `ATKSystem` instances currently stored in the `atkSystems` array.
  """
  getSystemCount: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

"""
Returns the transaction hash
"""
type ATKSystemFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKSystemFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKSystemImplementation {
  UPGRADE_INTERFACE_VERSION: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if the caller can add claims to the issuer identity.
  Only accounts with ISSUER_CLAIM_MANAGER_ROLE can add claims.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Checks if the caller can remove claims from the issuer identity.
  Only accounts with ISSUER_CLAIM_MANAGER_ROLE can remove claims.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Gets the address of the compliance module's proxy contract.
  The address of the compliance proxy contract.
  """
  compliance: String

  """
  Gets the address of the compliance module registry's proxy contract.
  The address of the compliance module registry proxy contract.
  """
  complianceModuleRegistry: String

  """
  Returns the address of the contract identity implementation.
  The address of the contract identity implementation contract.
  """
  contractIdentityImplementation: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Gets the address of the identity factory module's proxy contract.
  The address of the identity factory proxy contract.
  """
  identityFactory: String

  """
  Returns the address of the identity implementation.
  The address of the identity implementation contract.
  """
  identityImplementation: String

  """
  Gets the address of the identity registry module's proxy contract.
  The address of the identity registry proxy contract.
  """
  identityRegistry: String

  """
  Gets the address of the identity registry storage module's proxy contract.
  The address of the identity registry storage proxy contract.
  """
  identityRegistryStorage: String

  """
  Gets the implementation address for a given module type.
  The address of the implementation logic contract.
  """
  implementation(moduleType: String!): String

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the address of the issuer identity.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Gets the address of the organisation identity contract.
  The address of the organisation identity contract.
  """
  organisationIdentity: String

  """
  Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.
  """
  proxiableUUID: String

  """
  Checks if the contract supports a given interface ID, according to ERC165.
  This function is part of the ERC165 standard for interface detection. It returns `true` if this contract implements the interface specified by `interfaceId`. It explicitly supports the `IATKSystem` interface and inherits support for other interfaces like `IERC165` (from `ERC165`) and `IAccessControl` (from `AccessControl`).
  supported `true` if the contract supports the interface, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Gets the address of the addon registry's proxy contract.
  The address of the addon registry proxy contract.
  """
  systemAddonRegistry: String

  """
  Returns the address of the access manager implementation.
  The address of the access manager implementation contract.
  """
  tokenAccessManagerImplementation: String

  """
  Gets the address of the token factory registry's proxy contract.
  The address of the token factory registry proxy contract.
  """
  tokenFactoryRegistry: String

  """
  Gets the address of the topic scheme registry module's proxy contract.
  The address of the topic scheme registry proxy contract.
  """
  topicSchemeRegistry: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Gets the address of the trusted issuers registry module's proxy contract.
  The address of the trusted issuers registry proxy contract.
  """
  trustedIssuersRegistry: String
}

input ATKSystemImplementationInitializeInput {
  """
  The initial address of the access manager module's logic contract.
  """
  accessManager_: String!

  """
  The initial address of the addon registry module's logic contract.
  """
  addonRegistryImplementation_: String!

  """
  The initial address of the compliance module's logic contract.
  """
  complianceImplementation_: String!

  """
  The initial address of the compliance module registry module's logic contract.
  """
  complianceModuleRegistryImplementation_: String!

  """
  The initial address of the contract identity contract's logic (template). Must be IERC734/IIdentity compliant.
  """
  contractIdentityImplementation_: String!

  """
  The initial address of the identity factory module's logic contract.
  """
  identityFactoryImplementation_: String!

  """
  The initial address of the standard identity contract's logic (template). Must be IERC734/IIdentity compliant.
  """
  identityImplementation_: String!

  """
  The initial address of the identity registry module's logic contract.
  """
  identityRegistryImplementation_: String!

  """
  The initial address of the identity registry storage module's logic contract.
  """
  identityRegistryStorageImplementation_: String!

  """
  The address that will be granted the `DEFAULT_ADMIN_ROLE`, giving it administrative control over this contract.
  """
  initialAdmin_: String!

  """
  The initial address of the token access manager contract's logic. Must be ISMARTTokenAccessManager compliant.
  """
  tokenAccessManagerImplementation_: String!

  """
  The initial address of the token factory registry module's logic contract.
  """
  tokenFactoryRegistryImplementation_: String!

  """
  The initial address of the topic scheme registry module's logic contract.
  """
  topicSchemeRegistryImplementation_: String!

  """
  The initial address of the trusted issuers registry module's logic contract.
  """
  trustedIssuersRegistryImplementation_: String!
}

input ATKSystemImplementationIssueClaimByOrganisationInput {
  """
  The claim data
  """
  claimData: String!

  """
  The identity contract to receive the claim
  """
  targetIdentity: String!

  """
  The topic ID of the claim
  """
  topicId: String!
}

input ATKSystemImplementationSetAddonRegistryImplementationInput {
  """
  The new address for the addon registry logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetComplianceImplementationInput {
  """
  The new address for the compliance module logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetComplianceModuleRegistryImplementationInput {
  """
  The new address for the compliance module registry logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetContractIdentityImplementationInput {
  """
  The new address for the contract identity logic template.
  """
  implementation_: String!
}

input ATKSystemImplementationSetIdentityFactoryImplementationInput {
  """
  The new address for the identity factory logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetIdentityImplementationInput {
  """
  The new address for the standard identity logic template.
  """
  implementation_: String!
}

input ATKSystemImplementationSetIdentityRegistryImplementationInput {
  """
  The new address for the identity registry logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetIdentityRegistryStorageImplementationInput {
  """
  The new address for the identity registry storage logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetTokenAccessManagerImplementationInput {
  """
  The new address for the token access manager logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetTokenFactoryRegistryImplementationInput {
  """
  The new address for the token factory registry logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetTopicSchemeRegistryImplementationInput {
  """
  The new address for the topic scheme registry logic contract.
  """
  implementation_: String!
}

input ATKSystemImplementationSetTrustedIssuersRegistryImplementationInput {
  """
  The new address for the trusted issuers registry logic contract.
  """
  implementation_: String!
}

"""
Returns the transaction hash
"""
type ATKSystemImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKSystemImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKSystemImplementationUpgradeToAndCallInput {
  data: String!
  newImplementation: String!
}

type ATKSystemRoles {
  """
  Role identifier for addresses that can manage the addon module.
  """
  ADDON_FACTORY_MODULE_ROLE: String

  """
  Role identifier for addresses that can manage the addon registry module.
  """
  ADDON_FACTORY_REGISTRY_MODULE_ROLE: String

  """
  Role identifier for addresses that can manage the identity registry module.
  """
  IDENTITY_REGISTRY_MODULE_ROLE: String

  """
  Role identifier for addresses that can manage the system modules.
  """
  SYSTEM_MODULE_ROLE: String

  """
  Role identifier for addresses that can manage the token factory module.
  """
  TOKEN_FACTORY_MODULE_ROLE: String

  """
  Role identifier for addresses that can manage the token factory registry module.
  """
  TOKEN_FACTORY_REGISTRY_MODULE_ROLE: String
  id: ID
}

"""
Returns the transaction hash
"""
type ATKSystemRolesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKSystemRolesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTimeBoundAirdropFactoryImplementation {
  """
  Unique type identifier for this factory contract.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the total number of time-bound airdrop proxy contracts created by this factory.
  The number of time-bound airdrop proxy contracts created.
  """
  allAirdropsLength: ATKTimeBoundAirdropFactoryImplementationAllAirdropsLengthOutput

  """
  Address of the current `ATKTimeBoundAirdrop` logic contract (implementation).
  """
  atkTimeBoundAirdropImplementation: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an system addon address was deployed by this factory.
  """
  isFactorySystemAddon(
    systemAddonAddress: String!
  ): ATKTimeBoundAirdropFactoryImplementationIsFactorySystemAddonOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the deployment address of a time-bound airdrop proxy.
  The predicted address of the time-bound airdrop proxy.
  """
  predictTimeBoundAirdropAddress(
    endTime: String!
    name: String!
    owner: String!
    root: String!
    startTime: String!
    token: String!
  ): ATKTimeBoundAirdropFactoryImplementationPredictTimeBoundAirdropAddressOutput

  """
  Checks if the contract supports a given interface.
  True if the contract supports the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the unique type identifier for this factory.
  The type identifier as a bytes32 hash.
  """
  typeId: String
}

type ATKTimeBoundAirdropFactoryImplementationAllAirdropsLengthOutput {
  count: String
}

input ATKTimeBoundAirdropFactoryImplementationCreateInput {
  """
  The timestamp when claims end.
  """
  endTime: String!

  """
  The human-readable name for the airdrop.
  """
  name: String!

  """
  The initial owner of the contract.
  """
  owner: String!

  """
  The Merkle root for verifying claims.
  """
  root: String!

  """
  The timestamp when claims can begin.
  """
  startTime: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token: String!
}

input ATKTimeBoundAirdropFactoryImplementationInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type ATKTimeBoundAirdropFactoryImplementationIsFactorySystemAddonOutput {
  isFactorySystemAddon: Boolean
}

type ATKTimeBoundAirdropFactoryImplementationPredictTimeBoundAirdropAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKTimeBoundAirdropFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTimeBoundAirdropFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKTimeBoundAirdropFactoryImplementationUpdateImplementationInput {
  """
  The address of the new `ATKTimeBoundAirdrop` logic contract.
  """
  _newImplementation: String!
}

type ATKTimeBoundAirdropImplementation {
  """
  Maximum number of items allowed in batch operations to prevent OOM and gas limit issues.
  """
  MAX_BATCH_SIZE: String

  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Returns the end time when claims are no longer available.
  The timestamp when claims end.
  """
  endTime: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String

  """
  Returns the time remaining until the airdrop starts (if not started) or ends (if active).
  The number of seconds remaining, 0 if ended.
  """
  getTimeRemaining: ATKTimeBoundAirdropImplementationGetTimeRemainingOutput
  id: ID

  """
  Checks if the airdrop is currently active (within the time window).
  True if the current time is within the claim window.
  """
  isActive: ATKTimeBoundAirdropImplementationIsActiveOutput

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the address of the current owner.
  """
  owner: String

  """
  Returns the start time when claims become available.
  The timestamp when claims can begin.
  """
  startTime: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKTimeBoundAirdropImplementationBatchClaimInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proof arrays for verification of each claim.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input ATKTimeBoundAirdropImplementationClaimInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array for verification.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

type ATKTimeBoundAirdropImplementationGetTimeRemainingOutput {
  timeRemaining: String
}

input ATKTimeBoundAirdropImplementationInitializeInput {
  """
  The timestamp when claims end.
  """
  endTime_: String!

  """
  The human-readable name for this airdrop.
  """
  name_: String!

  """
  The initial owner of the contract.
  """
  owner_: String!

  """
  The Merkle root for verifying claims.
  """
  root_: String!

  """
  The timestamp when claims can begin.
  """
  startTime_: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token_: String!
}

type ATKTimeBoundAirdropImplementationIsActiveOutput {
  active: Boolean
}

"""
Returns the transaction hash
"""
type ATKTimeBoundAirdropImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTimeBoundAirdropImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKTimeBoundAirdropImplementationTransferOwnershipInput {
  newOwner: String!
}

input ATKTimeBoundAirdropImplementationWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type ATKTimeBoundAirdropProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKTimeBoundAirdropProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTimeBoundAirdropProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenAccessManagerImplementation {
  DEFAULT_ADMIN_ROLE: String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Checks if a given account has a specific role.
  This function implements `hasRole` from both `ISMARTTokenAccessManager` and OpenZeppelin's `IAccessControlUpgradeable`.      It directly uses the `hasRole` function inherited from OpenZeppelin's `AccessControlUpgradeable` contract,      which contains the actual logic for checking role assignments.      The `override` keyword is used because this function is redefining a function from its parent contracts/interfaces.      The `virtual` keyword indicates that this function can, in turn, be overridden by contracts that inherit from `ATKTokenAccessManager`.
  hasIt true if the account has the specified role, false otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Declares support for interfaces, including `ISMARTTokenAccessManager`.
  This function allows other contracts to query if this contract implements a specific interface,      adhering to the ERC165 standard (Standard Interface Detection).      It checks if the given `interfaceId` matches `type(ISMARTTokenAccessManager).interfaceId`      or any interface supported by its parent `AccessControlUpgradeable` (which includes ERC165 itself      and `IAccessControl`).
  supported true if the contract supports the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKTokenAccessManagerImplementationBatchGrantRoleInput {
  """
  The addresses that will receive the role.
  """
  accounts: [String!]!

  """
  The role identifier to grant.
  """
  role: String!
}

input ATKTokenAccessManagerImplementationBatchRevokeRoleInput {
  """
  The addresses that will lose the role.
  """
  accounts: [String!]!

  """
  The role identifier to revoke.
  """
  role: String!
}

input ATKTokenAccessManagerImplementationGrantMultipleRolesInput {
  """
  The address that will receive all the roles.
  """
  account: String!

  """
  The array of role identifiers to grant.
  """
  roles: [String!]!
}

input ATKTokenAccessManagerImplementationGrantRoleInput {
  account: String!
  role: String!
}

input ATKTokenAccessManagerImplementationInitializeInput {
  """
  Address of the initial admin for the token.
  """
  initialAdmins: [String!]!
}

input ATKTokenAccessManagerImplementationRenounceMultipleRolesInput {
  """
  The address that will confirm the renouncement.
  """
  callerConfirmation: String!

  """
  The array of role identifiers to renounce.
  """
  roles: [String!]!
}

input ATKTokenAccessManagerImplementationRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKTokenAccessManagerImplementationRevokeMultipleRolesInput {
  """
  The address that will lose all the roles.
  """
  account: String!

  """
  The array of role identifiers to revoke.
  """
  roles: [String!]!
}

input ATKTokenAccessManagerImplementationRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type ATKTokenAccessManagerImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTokenAccessManagerImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenAccessManagerProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKTokenAccessManagerProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTokenAccessManagerProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenFactoryRegistryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns the implementation address for a given factory type.
  The implementation contract address.
  """
  implementation(factoryTypeHash: String!): String

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if the contract supports a given interface.
  bool True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the proxy address for a given factory type.
  The factory proxy contract address.
  """
  tokenFactory(factoryTypeHash: String!): String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKTokenFactoryRegistryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the ATK system contract
  """
  systemAddress: String!
}

input ATKTokenFactoryRegistryImplementationRegisterTokenFactoryInput {
  """
  The implementation contract address for this factory type
  """
  _factoryImplementation: String!

  """
  The name of the token factory type (e.g., "Bond", "Equity")
  """
  _name: String!

  """
  The implementation contract address for tokens created by this factory
  """
  _tokenImplementation: String!
}

input ATKTokenFactoryRegistryImplementationSetTokenFactoryImplementationInput {
  """
  The type hash of the factory to update
  """
  factoryTypeHash: String!

  """
  The new implementation contract address
  """
  implementation_: String!
}

"""
Returns the transaction hash
"""
type ATKTokenFactoryRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTokenFactoryRegistryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenSale {
  DEFAULT_ADMIN_ROLE: String

  """
  Role for withdrawing funds from the sale.
  """
  FUNDS_MANAGER_ROLE: String

  """
  Role for managing the token sale parameters and operations.
  """
  SALE_ADMIN_ROLE: String

  """
  Base price of the token in smallest units.
  """
  basePrice: String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns various sale parameters.
  Number of tokens remaining for sale, Timestamp when the sale ends, Timestamp when the sale starts, Total number of tokens sold.
  """
  getSaleInfo: ATKTokenSaleGetSaleInfoOutput

  """
  Returns the token price in a specific payment currency.
  The price in the specified currency.
  """
  getTokenPrice(
    amount: String!
    currency: String!
  ): ATKTokenSaleGetTokenPriceOutput

  """
  Maximum number of tokens that can be sold.
  """
  hardCap: String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Maximum purchase amount per buyer in tokens.
  """
  maxPurchase: String

  """
  Minimum purchase amount in tokens.
  """
  minPurchase: String

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  Mapping of payment currencies to their configurations.
  """
  paymentCurrencies(address0: String!): ATKTokenSalePaymentCurrenciesOutput

  """
  Returns the amount of tokens a buyer has purchased.
  Amount of tokens purchased.
  """
  purchasedAmount(buyer: String!): ATKTokenSalePurchasedAmountOutput

  """
  Mapping of buyers to their purchase records.
  """
  purchases(address0: String!): ATKTokenSalePurchasesOutput

  """
  End time of the sale (Unix timestamp).
  """
  saleEndTime: String

  """
  Start time of the sale (Unix timestamp).
  """
  saleStartTime: String

  """
  Returns the current sale status.
  Current status of the sale (e.g., setup, active, paused, ended).
  """
  saleStatus: Int

  """
  Current status of the sale.
  """
  status: Int

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  The SMART token being sold.
  """
  token: String

  """
  Total number of tokens sold so far.
  """
  totalSold: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Vesting configuration.
  """
  vesting: ATKTokenSaleVestingOutput

  """
  Returns the amount of tokens a buyer can withdraw based on vesting.
  Amount of tokens withdrawable.
  """
  withdrawableAmount(buyer: String!): ATKTokenSaleWithdrawableAmountOutput
}

input ATKTokenSaleAddPaymentCurrencyInput {
  """
  Address of the ERC20 token to be used as payment
  """
  currency: String!

  """
  Price ratio compared to the base price (scaled by 10^18)
  """
  priceRatio: String!
}

input ATKTokenSaleBuyTokensWithERC20Input {
  """
  Amount of payment currency to spend
  """
  amount: String!

  """
  Address of the ERC20 token used for payment
  """
  currency: String!
}

input ATKTokenSaleConfigureVestingInput {
  """
  Duration before any tokens can be claimed (in seconds)
  """
  vestingCliff: String!

  """
  Duration of the full vesting period in seconds
  """
  vestingDuration: String!

  """
  Timestamp when vesting begins
  """
  vestingStart: String!
}

type ATKTokenSaleFactory {
  DEFAULT_ADMIN_ROLE: String

  """
  Role for deploying new token sales.
  """
  DEPLOYER_ROLE: String

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  The address of the token sale implementation contract.
  """
  implementation: String

  """
  Mapping to track if an address is a token sale deployed by this factory.
  """
  isTokenSale(address0: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKTokenSaleFactoryDeployTokenSaleInput {
  """
  Base price of tokens in smallest units
  """
  basePrice: String!

  """
  Maximum amount of tokens to be sold
  """
  hardCap: String!

  """
  The address that will be granted admin roles for the sale
  """
  saleAdmin: String!

  """
  Duration of the sale in seconds
  """
  saleDuration: String!

  """
  Timestamp when the sale starts
  """
  saleStart: String!

  """
  A nonce to use in the salt for CREATE2 deployment
  """
  saltNonce: String!

  """
  The address of the token to be sold
  """
  tokenAddress: String!
}

input ATKTokenSaleFactoryGrantRoleInput {
  account: String!
  role: String!
}

input ATKTokenSaleFactoryInitializeInput {
  """
  The address of the token sale implementation contract
  """
  implementation_: String!
}

input ATKTokenSaleFactoryRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKTokenSaleFactoryRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type ATKTokenSaleFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTokenSaleFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKTokenSaleFactoryUpdateImplementationInput {
  """
  The address of the new implementation
  """
  newImplementation: String!
}

type ATKTokenSaleGetSaleInfoOutput {
  remainingTokens: String
  saleEndTime_: String
  saleStartTime_: String
  soldAmount: String
}

type ATKTokenSaleGetTokenPriceOutput {
  price: String
}

input ATKTokenSaleGrantRoleInput {
  account: String!
  role: String!
}

input ATKTokenSaleInitializeInput {
  basePrice_: String!
  hardCap_: String!

  """
  Duration of the sale in seconds
  """
  saleDuration: String!

  """
  Timestamp when the sale starts
  """
  saleStart: String!

  """
  The address of the SMART token being sold
  """
  tokenAddress: String!
}

type ATKTokenSalePaymentCurrenciesOutput {
  accepted: Boolean
  priceRatio: String
}

type ATKTokenSaleProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKTokenSaleProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTokenSaleProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenSalePurchasedAmountOutput {
  purchased: String
}

type ATKTokenSalePurchasesOutput {
  purchased: String
  withdrawn: String
}

input ATKTokenSaleRemovePaymentCurrencyInput {
  """
  Address of the ERC20 token to remove
  """
  currency: String!
}

input ATKTokenSaleRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKTokenSaleRevokeRoleInput {
  account: String!
  role: String!
}

input ATKTokenSaleSetPurchaseLimitsInput {
  maxPurchase_: String!
  minPurchase_: String!
}

"""
Returns the transaction hash
"""
type ATKTokenSaleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTokenSaleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTokenSaleVestingOutput {
  cliff: String
  duration: String
  enabled: Boolean
  startTime: String
}

input ATKTokenSaleWithdrawFundsInput {
  """
  Address of the currency to withdraw (address(0) for native currency)
  """
  currency: String!

  """
  Address to receive the funds
  """
  recipient: String!
}

type ATKTokenSaleWithdrawableAmountOutput {
  withdrawable: String
}

type ATKTopicSchemeRegistryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Gets all registered topic IDs.
  Array of all registered topic scheme identifiers.
  """
  getAllTopicIds: ATKTopicSchemeRegistryImplementationGetAllTopicIdsOutput

  """
  Gets the topic ID for a given name.
  The unique identifier generated from the name.
  """
  getTopicId(
    name: String!
  ): ATKTopicSchemeRegistryImplementationGetTopicIdOutput

  """
  Gets the total number of registered topic schemes.
  The number of registered topic schemes.
  """
  getTopicSchemeCount: ATKTopicSchemeRegistryImplementationGetTopicSchemeCountOutput

  """
  Gets the signature for a specific topic scheme by ID.
  The signature string for the topic scheme.
  """
  getTopicSchemeSignature(
    topicId: String!
  ): ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureOutput

  """
  Gets the signature for a specific topic scheme by name.
  The signature string for the topic scheme.
  """
  getTopicSchemeSignatureByName(
    name: String!
  ): ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureByNameOutput

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean

  """
  Checks if a topic scheme exists by ID.
  True if the topic scheme is registered, false otherwise.
  """
  hasTopicScheme(
    topicId: String!
  ): ATKTopicSchemeRegistryImplementationHasTopicSchemeOutput

  """
  Checks if a topic scheme exists by name.
  True if the topic scheme is registered, false otherwise.
  """
  hasTopicSchemeByName(
    name: String!
  ): ATKTopicSchemeRegistryImplementationHasTopicSchemeByNameOutput
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns true if this contract implements the interface defined by interfaceId.
  Supports ISMARTTopicSchemeRegistry and inherited interfaces.
  True if the interface is supported.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemesInput {
  """
  Array of human-readable names for the topic schemes
  """
  names: [String!]!

  """
  Array of signature strings used for encoding/decoding data
  """
  signatures: [String!]!
}

type ATKTopicSchemeRegistryImplementationGetAllTopicIdsOutput {
  topicIds: [String!]
}

type ATKTopicSchemeRegistryImplementationGetTopicIdOutput {
  topicId: String
}

type ATKTopicSchemeRegistryImplementationGetTopicSchemeCountOutput {
  count: String
}

type ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureByNameOutput {
  signature: String
}

type ATKTopicSchemeRegistryImplementationGetTopicSchemeSignatureOutput {
  signature: String
}

type ATKTopicSchemeRegistryImplementationHasTopicSchemeByNameOutput {
  exists: Boolean
}

type ATKTopicSchemeRegistryImplementationHasTopicSchemeOutput {
  exists: Boolean
}

input ATKTopicSchemeRegistryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

input ATKTopicSchemeRegistryImplementationRegisterTopicSchemeInput {
  """
  The human-readable name for the topic scheme
  """
  name: String!

  """
  The signature string used for encoding/decoding data
  """
  signature: String!
}

input ATKTopicSchemeRegistryImplementationRemoveTopicSchemeInput {
  """
  The name of the topic scheme to remove
  """
  name: String!
}

"""
Returns the transaction hash
"""
type ATKTopicSchemeRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTopicSchemeRegistryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKTopicSchemeRegistryImplementationUpdateTopicSchemeInput {
  """
  The name of the topic scheme to update
  """
  name: String!

  """
  The new signature string
  """
  newSignature: String!
}

type ATKTopics {
  """
  Topic identifier for Anti-Money Laundering (AML) compliance claims.
  """
  TOPIC_AML: String

  """
  Topic identifier for asset classification claims.
  """
  TOPIC_ASSET_CLASSIFICATION: String

  """
  Claim topic representing the legal issuer of the asset.
  """
  TOPIC_ASSET_ISSUER: String

  """
  Topic identifier for base price claims.
  """
  TOPIC_BASE_PRICE: String

  """
  Topic identifier for collateral-related claims.
  """
  TOPIC_COLLATERAL: String

  """
  Topic identifier for contract identity claims.
  """
  TOPIC_CONTRACT_IDENTITY: String

  """
  Topic identifier for International Securities Identification Number (ISIN) claims.
  """
  TOPIC_ISIN: String

  """
  Topic identifier for Know Your Customer (KYC) verification claims.
  """
  TOPIC_KYC: String
  id: ID
}

"""
Returns the transaction hash
"""
type ATKTopicsTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTopicsTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKTrustedIssuersRegistryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Retrieves the list of claim topics for which a specific trusted issuer is authorized.
  It first checks if the provided `_trustedIssuer` address actually exists as a registered issuer using the `exists` flag in the `_trustedIssuers` mapping. If not, it reverts. If the issuer exists, it returns the `claimTopics` array stored in their `TrustedIssuer` struct.Reverts with `IssuerDoesNotExist(address(_trustedIssuer))` if the issuer is not found in the registry.
  An array of `uint256` values, where each value is a claim topic the issuer is trusted for. Returns an empty array if the issuer is trusted for no topics (though `addTrustedIssuer` and `updateIssuerClaimTopics` prevent setting an empty list initially).
  """
  getTrustedIssuerClaimTopics(_trustedIssuer: String!): [String!]

  """
  Returns an array of all currently registered and active trusted issuer contract addresses.
  This function iterates through the `_issuerAddresses` array and casts each `address` to an `IClaimIssuer` type for the return array. This is useful for clients wanting to get a complete list of entities considered trusted by this registry.
  An array of `IClaimIssuer` interface types. Each element is a contract address of a trusted issuer. Returns an empty array if no issuers are registered.
  """
  getTrustedIssuers: [String!]

  """
  Retrieves an array of all issuer contract addresses that are trusted for a specific claim topic.
  This function directly accesses the `_issuersByClaimTopic` mapping using the given `claimTopic` as a key. It then converts the stored array of `address` types into an array of `IClaimIssuer` interface types. This is a primary query function for relying parties to discover who can issue valid claims for a certain topic.
  An array of `IClaimIssuer` interface types. Each element is a contract address of an issuer trusted for the specified `claimTopic`. Returns an empty array if no issuers are trusted for that topic.
  """
  getTrustedIssuersForClaimTopic(claimTopic: String!): [String!]

  """
  Checks if a specific issuer is trusted for a specific claim topic.
  This function uses the `_claimTopicIssuerIndex` mapping for an efficient O(1) lookup. If `_claimTopicIssuerIndex[_claimTopic][_issuer]` is greater than 0, it means the issuer is present in the list of trusted issuers for that `_claimTopic`, so the function returns `true`. Otherwise (if the value is 0), the issuer is not trusted for that topic, and it returns `false`.
  `true` if the `_issuer` is trusted for the `_claimTopic`, `false` otherwise.
  """
  hasClaimTopic(_claimTopic: String!, _issuer: String!): Boolean

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if an issuer is authorized to add a claim for a specific topic.
  This function checks if the issuer is registered as a trusted issuer and      if they are authorized for the specific claim topic using the existing registry logic.
  True if the issuer is trusted for this topic, false otherwise.
  """
  isAuthorizedToAddClaim(issuer: String!, topic: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a given address is registered as a trusted issuer in the registry.
  This function performs a direct lookup in the `_trustedIssuers` mapping and checks the `exists` flag of the `TrustedIssuer` struct associated with the `_issuer` address.
  `true` if the `_issuer` address is found in the registry and its `exists` flag is true; `false` otherwise (e.g., if the issuer was never added or has been removed).
  """
  isTrustedIssuer(_issuer: String!): Boolean

  """
  Indicates whether this contract supports a given interface ID, as per ERC165.
  This function allows other contracts/tools to query if this contract implements specific interfaces. It checks for: 1.  `type(IERC3643TrustedIssuersRegistry).interfaceId`: Confirms adherence to the ERC-3643 standard for     trusted issuer registries. 2.  `type(IClaimAuthorization).interfaceId`: Confirms implementation of claim authorization interface. 3.  Interfaces supported by parent contracts (e.g., `AccessControlUpgradeable`, `ERC165Upgradeable`)     via `super.supportsInterface(interfaceId)`. Crucial for interoperability, allowing other components to verify compatibility.
  `true` if the contract supports `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKTrustedIssuersRegistryImplementationAddTrustedIssuerInput {
  """
  An array of `uint256` values representing the claim topics for which this issuer will be trusted.
  """
  _claimTopics: [String!]!

  """
  The `IClaimIssuer` compliant contract address of the issuer to be added.
  """
  _trustedIssuer: String!
}

input ATKTrustedIssuersRegistryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

input ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuerInput {
  """
  The `IClaimIssuer` compliant contract address of the issuer to be removed.
  """
  _trustedIssuer: String!
}

"""
Returns the transaction hash
"""
type ATKTrustedIssuersRegistryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopicsInput {
  """
  An array of `uint256` values representing the new set of claim topics for which this issuer will be trusted.
  """
  _newClaimTopics: [String!]!

  """
  The `IClaimIssuer` compliant contract address of the issuer whose claim topics are to be updated.
  """
  _trustedIssuer: String!
}

type ATKTypedImplementationProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKTypedImplementationProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKTypedImplementationProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKVault {
  DEFAULT_ADMIN_ROLE: String

  """
  Role identifier for emergency operations (pause/unpause).
  """
  EMERGENCY_ROLE: String

  """
  Role identifier for governance operations (changing requirements, setting onchain ID).
  """
  GOVERNANCE_ROLE: String

  """
  Role identifier for signers who can submit and confirm transactions.
  """
  SIGNER_ROLE: String

  """
  Permission check: can `actor` add a claim to the vault's identity?.
  Vaults implement permission logic directly - only governance role can manage claims.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim from the vault's identity?.
  Vaults implement permission logic directly - only governance role can manage claims.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean

  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
  """
  getRoleMember(index: String!, role: String!): String

  """
  Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
  """
  getRoleMemberCount(role: String!): String

  """
  Return all accounts that have `role` WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that this function has an unbounded cost, and using it as part of a state-changing function may render the function uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.
  """
  getRoleMembers(role: String!): [String!]

  """
  Returns detailed information about a transaction.
  Transaction description, Call data, Execution status, Number of signatures required, Array of addresses that signed, Destination address, ETH value.
  """
  getTransaction(txIndex: String!): ATKVaultGetTransactionOutput

  """
  Returns the transaction hash for signature generation.
  dataHash The hash to be signed.
  """
  getTransactionHash(txIndex: String!): String

  """
  Returns `true` if `account` has been granted `role`.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the ONCHAINID associated with this vault.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns true if the contract is paused, and false otherwise.
  """
  paused: Boolean

  """
  Number of confirmations required to execute a transaction (default).
  """
  required: String

  """
  Gets the number of confirmations required to execute a transaction.
  The number of required confirmations.
  """
  requirement: String

  """
  Mapping of signer addresses to their voting weight (only used if useWeightedSignatures is true).
  """
  signerWeights(address0: String!): String

  """
  Returns a list of all current signers.
  Array of signer addresses.
  """
  signers: ATKVaultSignersOutput

  """
  Checks if this contract implements an interface (ERC-165).
  True if the contract implements the interface.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Total weight required for transaction execution (only used if useWeightedSignatures is true).
  """
  totalWeightRequired: String

  """
  Array of all transactions (pending and executed).
  """
  transactions(uint2560: String!): ATKVaultTransactionsOutput

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Optional: Enable weighted signatures where different signers have different voting power.
  """
  useWeightedSignatures: Boolean
}

input ATKVaultAddSignaturesInput {
  """
  Array of signatures
  """
  signatures: [String!]!

  """
  Array of signer addresses
  """
  signerAddresses: [String!]!

  """
  Index of the transaction
  """
  txIndex: String!
}

type ATKVaultFactoryImplementation {
  """
  Type identifier for the ATKVaultFactory.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the total number of vault contracts created by this factory.
  The total number of vaults created.
  """
  allVaultsLength: ATKVaultFactoryImplementationAllVaultsLengthOutput

  """
  Returns the address of the ATKVault implementation (not used in this pattern).
  Since we deploy ATKVault contracts directly, this returns address(0).
  The address of the ATKVault implementation (always address(0) in this pattern).
  """
  atkVaultImplementation: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an system addon address was deployed by this factory.
  """
  isFactorySystemAddon(
    systemAddonAddress: String!
  ): ATKVaultFactoryImplementationIsFactorySystemAddonOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the address where an ATK Vault contract would be deployed.
  The predicted address of the vault.
  """
  predictVaultAddress(
    initialOwner: String!
    required: String!
    salt: String!
    signers: [String!]!
  ): ATKVaultFactoryImplementationPredictVaultAddressOutput

  """
  Checks if a contract supports a given interface.
  True if the contract implements the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the type identifier for this factory.
  The TYPE_ID constant representing the factory type.
  """
  typeId: String
}

type ATKVaultFactoryImplementationAllVaultsLengthOutput {
  count: String
}

input ATKVaultFactoryImplementationCreateVaultInput {
  """
  Country code for compliance purposes
  """
  country: Int!

  """
  Address that will have admin role
  """
  initialOwner: String!

  """
  Number of confirmations required to execute a transaction
  """
  required: String!

  """
  Salt value for deterministic address generation
  """
  salt: String!

  """
  Array of initial signer addresses
  """
  signers: [String!]!
}

input ATKVaultFactoryImplementationInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type ATKVaultFactoryImplementationIsFactorySystemAddonOutput {
  isFactorySystemAddon: Boolean
}

type ATKVaultFactoryImplementationPredictVaultAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKVaultFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKVaultFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKVaultGetTransactionOutput {
  comment: String
  data: String
  executed: Boolean
  requiredSignatures: String
  signersList: [String!]
  to: String
  value: String
}

input ATKVaultGrantRoleInput {
  account: String!
  role: String!
}

input ATKVaultRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ATKVaultRevokeRoleInput {
  account: String!
  role: String!
}

input ATKVaultSetOnchainIdInput {
  """
  The new OnchainID address
  """
  newOnchainId: String!
}

input ATKVaultSetRequirementInput {
  """
  New number of required confirmations
  """
  _required: String!
}

input ATKVaultSetSignerWeightInput {
  """
  Address of the signer
  """
  signer: String!

  """
  Voting weight for the signer
  """
  weight: String!
}

input ATKVaultSetTotalWeightRequiredInput {
  """
  Total weight threshold
  """
  weightRequired: String!
}

input ATKVaultSetWeightedSignaturesInput {
  """
  Whether to use weighted signatures
  """
  enabled: Boolean!
}

type ATKVaultSignersOutput {
  signers_: [String!]
}

input ATKVaultSubmitTransactionWithSignaturesInput {
  """
  Description of the transaction
  """
  comment: String!

  """
  Call data for the transaction
  """
  data: String!

  """
  Number of signatures required (0 uses default requirement)
  """
  requiredSigs: String!

  """
  Array of signatures corresponding to signerAddresses
  """
  signatures: [String!]!

  """
  Array of signer addresses
  """
  signerAddresses: [String!]!

  """
  Destination address
  """
  to: String!

  """
  Amount of ETH to send
  """
  value: String!
}

"""
Returns the transaction hash
"""
type ATKVaultTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKVaultTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKVaultTransactionsOutput {
  comment: String
  data: String
  dataHash: String
  executed: Boolean
  requiredSignatures: String
  to: String
  value: String
}

type ATKVestingAirdropFactoryImplementation {
  """
  Unique type identifier for this factory contract.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the total number of vesting airdrop proxy contracts created by this factory.
  The total number of vesting airdrop proxy contracts created.
  """
  allAirdropsLength: ATKVestingAirdropFactoryImplementationAllAirdropsLengthOutput

  """
  Address of the current `ATKVestingAirdrop` logic contract (implementation).
  """
  atkVestingAirdropImplementation: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an system addon address was deployed by this factory.
  """
  isFactorySystemAddon(
    systemAddonAddress: String!
  ): ATKVestingAirdropFactoryImplementationIsFactorySystemAddonOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Predicts the deployment address of a vesting airdrop proxy.
  The predicted address of the vesting airdrop proxy.
  """
  predictVestingAirdropAddress(
    initializationDeadline: String!
    name: String!
    owner: String!
    root: String!
    token: String!
    vestingStrategy: String!
  ): ATKVestingAirdropFactoryImplementationPredictVestingAirdropAddressOutput

  """
  Checks if this contract supports a specific interface.
  bool True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the unique type identifier for this factory.
  The type identifier as a bytes32 hash.
  """
  typeId: String
}

type ATKVestingAirdropFactoryImplementationAllAirdropsLengthOutput {
  count: String
}

input ATKVestingAirdropFactoryImplementationCreateInput {
  """
  The timestamp after which no new vesting can be initialized.
  """
  initializationDeadline: String!

  """
  The human-readable name for this airdrop.
  """
  name: String!

  """
  The initial owner of the contract.
  """
  owner: String!

  """
  The Merkle root for verifying claims.
  """
  root: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token: String!

  """
  The address of the vesting strategy contract for vesting calculations.
  """
  vestingStrategy: String!
}

input ATKVestingAirdropFactoryImplementationInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type ATKVestingAirdropFactoryImplementationIsFactorySystemAddonOutput {
  isFactorySystemAddon: Boolean
}

type ATKVestingAirdropFactoryImplementationPredictVestingAirdropAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type ATKVestingAirdropFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKVestingAirdropFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKVestingAirdropFactoryImplementationUpdateImplementationInput {
  """
  The address of the new `ATKVestingAirdrop` logic contract.
  """
  _newImplementation: String!
}

type ATKVestingAirdropImplementation {
  """
  Maximum number of items allowed in batch operations to prevent OOM and gas limit issues.
  """
  MAX_BATCH_SIZE: String

  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String

  """
  Returns the initialization timestamp for a specific claim index.
  timestamp The timestamp when vesting was initialized for this index (0 if not initialized).
  """
  getInitializationTimestamp(index: String!): String
  id: ID

  """
  Returns the initialization deadline timestamp.
  The timestamp after which no new vesting can be initialized.
  """
  initializationDeadline: String

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if vesting has been initialized for a specific index.
  initialized True if vesting has been initialized for this index.
  """
  isVestingInitialized(index: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the address of the current owner.
  """
  owner: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the current vesting strategy contract.
  The vesting strategy contract.
  """
  vestingStrategy: String
}

input ATKVestingAirdropImplementationBatchClaimInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proof arrays (required by base contract but not used in verification here).
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input ATKVestingAirdropImplementationBatchInitializeVestingInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proof arrays for verification of each index.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input ATKVestingAirdropImplementationClaimInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array (required by base contract but not used in verification here).
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

input ATKVestingAirdropImplementationInitializeInput {
  """
  The timestamp after which no new vesting can be initialized.
  """
  initializationDeadline_: String!

  """
  The human-readable name for this airdrop.
  """
  name_: String!

  """
  The initial owner of the contract.
  """
  owner_: String!

  """
  The Merkle root for verifying claims.
  """
  root_: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token_: String!

  """
  The address of the vesting strategy contract for vesting calculations.
  """
  vestingStrategy_: String!
}

input ATKVestingAirdropImplementationInitializeVestingInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array for verification.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

input ATKVestingAirdropImplementationSetVestingStrategyInput {
  """
  The address of the new vesting strategy contract.
  """
  newVestingStrategy_: String!
}

"""
Returns the transaction hash
"""
type ATKVestingAirdropImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKVestingAirdropImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKVestingAirdropImplementationTransferOwnershipInput {
  newOwner: String!
}

input ATKVestingAirdropImplementationWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type ATKVestingAirdropProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type ATKVestingAirdropProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKVestingAirdropProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ATKXvPSettlementFactoryImplementation {
  """
  Type identifier for this factory contract.
  """
  TYPE_ID: String

  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the total number of settlements created by this factory.
  The total number of settlements created.
  """
  allSettlementsLength: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if an address was deployed by this factory.
  Returns true if the address was created by this factory, false otherwise.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(settlement: String!): Boolean

  """
  Mapping indicating whether an system addon address was deployed by this factory.
  """
  isFactorySystemAddon(
    systemAddonAddress: String!
  ): ATKXvPSettlementFactoryImplementationIsFactorySystemAddonOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean
  predictAddress(
    autoExecute: Boolean!
    cutoffDate: String!
    flows: [ATKXvPSettlementFactoryImplementationPredictAddressFlowsInput!]!
    name: String!
  ): ATKXvPSettlementFactoryImplementationPredictAddressOutput

  """
  Checks if the contract implements an interface.
  True if the contract implements the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns the type identifier for this factory.
  The bytes32 type identifier.
  """
  typeId: String

  """
  Address of the current XvPSettlement logic contract (implementation).
  """
  xvpSettlementImplementation: String
}

input ATKXvPSettlementFactoryImplementationATKXvPSettlementFactoryImplementationCreateFlowsInput {
  amount: String!
  asset: String!
  from: String!
  to: String!
}

input ATKXvPSettlementFactoryImplementationCreateInput {
  autoExecute: Boolean!
  cutoffDate: String!
  flows: [ATKXvPSettlementFactoryImplementationATKXvPSettlementFactoryImplementationCreateFlowsInput!]!
  name: String!
}

input ATKXvPSettlementFactoryImplementationInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type ATKXvPSettlementFactoryImplementationIsFactorySystemAddonOutput {
  isFactorySystemAddon: Boolean
}

input ATKXvPSettlementFactoryImplementationPredictAddressFlowsInput {
  amount: String!
  asset: String!
  from: String!
  to: String!
}

type ATKXvPSettlementFactoryImplementationPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type ATKXvPSettlementFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKXvPSettlementFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ATKXvPSettlementFactoryImplementationUpdateImplementationInput {
  """
  The address of the new XvPSettlement logic contract.
  """
  _newImplementation: String!
}

type ATKXvPSettlementImplementation {
  """
  Returns whether an account has approved the settlement.
  True if the account has approved the settlement, false otherwise.
  """
  approvals(account: String!): Boolean

  """
  Returns whether the settlement should auto-execute when all approvals are received.
  True if auto-execute is enabled, false otherwise.
  """
  autoExecute: Boolean

  """
  Returns whether the settlement has been cancelled.
  True if the settlement has been cancelled, false otherwise.
  """
  cancelled: Boolean

  """
  Returns the timestamp when the settlement was created.
  The creation timestamp in seconds since epoch.
  """
  createdAt: String

  """
  Returns the cutoff date after which the settlement expires.
  The cutoff date timestamp in seconds since epoch.
  """
  cutoffDate: String

  """
  Returns whether the settlement has been executed.
  True if the settlement has been executed, false otherwise.
  """
  executed: Boolean

  """
  Returns all flows in the settlement.
  Array of all flows defined in the settlement.
  """
  flows: [ATKXvPSettlementImplementationTuple0FlowsOutput!]
  id: ID

  """
  Checks if all parties have approved the settlement.
  approved True if all parties have approved.
  """
  isFullyApproved: Boolean

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the name of the settlement.
  The settlement name as a string.
  """
  name: String

  """
  Checks if the contract implements an interface.
  True if the contract implements the interface.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String
}

input ATKXvPSettlementImplementationATKXvPSettlementImplementationInitializeSettlementFlowsInput {
  amount: String!
  asset: String!
  from: String!
  to: String!
}

input ATKXvPSettlementImplementationInitializeInput {
  settlementAutoExecute: Boolean!
  settlementCutoffDate: String!
  settlementFlows: [ATKXvPSettlementImplementationATKXvPSettlementImplementationInitializeSettlementFlowsInput!]!
  settlementName: String!
}

"""
Returns the transaction hash
"""
type ATKXvPSettlementImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKXvPSettlementImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

"""
Returns all flows in the settlement.
Array of all flows defined in the settlement.
"""
type ATKXvPSettlementImplementationTuple0FlowsOutput {
  amount: String
  asset: String
  from: String
  to: String
}

type ATKXvPSettlementProxy {
  id: ID
}

input ATKXvPSettlementProxyDeployContractATKXvPSettlementProxyFlowsInput {
  amount: String!
  asset: String!
  from: String!
  to: String!
}

"""
Returns the transaction hash
"""
type ATKXvPSettlementProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ATKXvPSettlementProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type AbstractATKSystemAddonFactoryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an system addon address was deployed by this factory.
  """
  isFactorySystemAddon(
    systemAddonAddress: String!
  ): AbstractATKSystemAddonFactoryImplementationIsFactorySystemAddonOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if a contract supports a given interface.
  bool True if the contract supports the interface, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

type AbstractATKSystemAddonFactoryImplementationIsFactorySystemAddonOutput {
  isFactorySystemAddon: Boolean
}

"""
Returns the transaction hash
"""
type AbstractATKSystemAddonFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AbstractATKSystemAddonFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type AbstractATKSystemProxy {
  id: ID
}

"""
Returns the transaction hash
"""
type AbstractATKSystemProxyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AbstractATKSystemProxyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type AbstractATKTokenFactoryImplementation {
  """
  Returns the address of the current `ATKSystemAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements access management by delegating the role check to the      `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Mapping indicating whether an access manager address was deployed by this factory.
  """
  isFactoryAccessManager(
    accessManagerAddress: String!
  ): AbstractATKTokenFactoryImplementationIsFactoryAccessManagerOutput

  """
  Mapping indicating whether a token address was deployed by this factory.
  """
  isFactoryToken(
    tokenAddress: String!
  ): AbstractATKTokenFactoryImplementationIsFactoryTokenOutput

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Checks if the provided address is a valid token implementation.
  True if the address is a valid token implementation, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean

  """
  Checks if the contract supports a specific interface.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

input AbstractATKTokenFactoryImplementationInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The initial address of the token implementation contract.
  """
  tokenImplementation_: String!
}

type AbstractATKTokenFactoryImplementationIsFactoryAccessManagerOutput {
  isFactoryAccessManager: Boolean
}

type AbstractATKTokenFactoryImplementationIsFactoryTokenOutput {
  isFactoryToken: Boolean
}

"""
Returns the transaction hash
"""
type AbstractATKTokenFactoryImplementationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AbstractATKTokenFactoryImplementationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractATKTokenFactoryImplementationUpdateTokenImplementationInput {
  """
  The new address for the token implementation contract. Cannot be the zero address.
  """
  newImplementation: String!
}

type AbstractAddressListComplianceModule {
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Concrete compliance modules MUST implement this function to return a human-readable name for the module.
  This function is used to identify the type or purpose of the compliance module. For example, "Country Allow List Module". It should be a `pure` function as the name is typically hardcoded and doesn't depend on state.
  A string representing the name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

input AbstractAddressListComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input AbstractAddressListComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type AbstractAddressListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AbstractAddressListComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractAddressListComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

type AbstractComplianceModule {
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Concrete compliance modules MUST implement this function to return a human-readable name for the module.
  This function is used to identify the type or purpose of the compliance module. For example, "Country Allow List Module". It should be a `pure` function as the name is typically hardcoded and doesn't depend on state.
  A string representing the name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

input AbstractComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input AbstractComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type AbstractComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AbstractComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

type AbstractCountryComplianceModule {
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Concrete compliance modules MUST implement this function to return a human-readable name for the module.
  This function is used to identify the type or purpose of the compliance module. For example, "Country Allow List Module". It should be a `pure` function as the name is typically hardcoded and doesn't depend on state.
  A string representing the name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

input AbstractCountryComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input AbstractCountryComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type AbstractCountryComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AbstractCountryComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractCountryComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

type AbstractIdentityComplianceModule {
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Concrete compliance modules MUST implement this function to return a human-readable name for the module.
  This function is used to identify the type or purpose of the compliance module. For example, "Country Allow List Module". It should be a `pure` function as the name is typically hardcoded and doesn't depend on state.
  A string representing the name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

input AbstractIdentityComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input AbstractIdentityComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type AbstractIdentityComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AbstractIdentityComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input AbstractIdentityComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

type AddressBlockListComplianceModule {
  """
  Unique type identifier for this compliance module.
  """
  TYPE_ID: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the human-readable name of this compliance module.
  The name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  This identifier is used to distinguish this compliance module type from others in the system.
  The unique type identifier for the AddressBlockListComplianceModule.
  """
  typeId: String
}

input AddressBlockListComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input AddressBlockListComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type AddressBlockListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type AddressBlockListComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input AddressBlockListComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

type ClaimAuthorizationExtension {
  """
  Returns all registered claim authorization contracts.
  Array of authorization contract addresses.
  """
  getClaimAuthorizationContracts: [String!]
  id: ID

  """
  Checks if a contract is registered as a claim authorization contract.
  True if registered, false otherwise.
  """
  isClaimAuthorizationContractRegistered(
    authorizationContract: String!
  ): Boolean
}

"""
Returns the transaction hash
"""
type ClaimAuthorizationExtensionTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ClaimAuthorizationExtensionTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar ConstructorArguments

type Contract {
  abiName: String
  address: String

  """
  Created at
  """
  createdAt: String
  transaction: TransactionOutput
  transactionHash: String
}

type ContractDeployStatus {
  abiName: String
  address: String

  """
  Created at
  """
  createdAt: String

  """
  Deployed at
  """
  deployedAt: String

  """
  Reverted at
  """
  revertedAt: String
  transaction: TransactionOutput
  transactionHash: String
}

"""
Returns the transaction hash
"""
type ContractDeploymentTransactionOutput {
  transactionHash: String
}

"""
ContractsDeployStatus paginated output
"""
type ContractsDeployStatusPaginatedOutput {
  """
  Total number of results
  """
  count: Int!
  records: [ContractDeployStatus!]!
}

"""
Contracts paginated output
"""
type ContractsPaginatedOutput {
  """
  Total number of results
  """
  count: Int!
  records: [Contract!]!
}

type CountryAllowListComplianceModule {
  """
  Unique type identifier for this compliance module.
  """
  TYPE_ID: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the human-readable name of this compliance module.
  This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., "KYC Module", "Country Restriction Module").
  The string "Country AllowList Compliance Module".
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  This identifier is used to distinguish this compliance module type from others in the system.
  The unique type identifier for the CountryAllowListComplianceModule.
  """
  typeId: String
}

input CountryAllowListComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input CountryAllowListComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type CountryAllowListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type CountryAllowListComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input CountryAllowListComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

type CountryBlockListComplianceModule {
  """
  Unique type identifier for this compliance module.
  """
  TYPE_ID: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the human-readable name of this compliance module.
  This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., "KYC Module", "Country Restriction Module").
  The string "Country BlockList Compliance Module".
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  This identifier is used to distinguish this compliance module type from others in the system.
  The unique type identifier for the CountryBlockListComplianceModule.
  """
  typeId: String
}

input CountryBlockListComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input CountryBlockListComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type CountryBlockListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type CountryBlockListComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input CountryBlockListComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

input CreateWalletInfoInput {
  """
  The name of the wallet
  """
  name: String!

  """
  Optional index for the wallet, walletIndex enables HD derivation paths
  """
  walletIndex: Int
}

"""
Details of the created wallet
"""
type CreateWalletOutput {
  """
  The Ethereum address of the created wallet
  """
  address: String

  """
  The derivation path used to generate the wallet
  """
  derivationPath: String

  """
  The unique identifier of the created wallet
  """
  id: String

  """
  The name of the created wallet
  """
  name: String
}

input CreateWalletVerificationInput {
  """
  OTP verification settings. Provide this for OTP verification.
  """
  otp: OTPSettingsInput

  """
  PINCODE verification settings. Provide this for PINCODE verification.
  """
  pincode: PincodeSettingsInput

  """
  Secret codes verification settings. Provide this for secret codes verification.
  """
  secretCodes: SecretCodesSettingsInput
}

"""
Output for creating a wallet verification
"""
type CreateWalletVerificationOutput {
  """
  Unique identifier of the created wallet verification
  """
  id: String

  """
  Name of the created wallet verification
  """
  name: String

  """
  Additional parameters of the created wallet verification
  """
  parameters: JSON

  """
  Type of the created wallet verification
  """
  verificationType: WalletVerificationType
}

"""
Output for deleting a wallet verification
"""
type DeleteWalletVerificationOutput {
  """
  Indicates whether the wallet verification was successfully deleted
  """
  success: Boolean
}

input DeployContractATKAmountClaimTrackerInput {
  """
  The address that will own this claim tracker (typically the airdrop contract).
  """
  owner_: String!
}

input DeployContractATKBitmapClaimTrackerInput {
  """
  The address that will own this claim tracker (typically the airdrop contract).
  """
  owner_: String!
}

input DeployContractATKBondFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions.
  """
  forwarder: String!
}

input DeployContractATKBondImplementationInput {
  """
  The address of the trusted forwarder contract for meta-transactions
  """
  forwarder_: String!
}

input DeployContractATKBondProxyInput {
  """
  The access manager of the bond.
  """
  accessManager_: String!

  """
  Bond-specific parameters (maturityDate, faceValue, denominationAsset).
  """
  bondParams: ATKBondProxyDeployContractATKBondProxyBondParamsInput!

  """
  The cap of the bond.
  """
  cap_: String!

  """
  The compliance of the bond.
  """
  compliance_: String!

  """
  The number of decimals of the bond.
  """
  decimals_: Int!

  """
  The identity registry of the bond.
  """
  identityRegistry_: String!

  """
  The initial module pairs of the bond.
  """
  initialModulePairs_: [ATKBondProxyDeployContractATKBondProxyInitialModulePairsInput!]!

  """
  The name of the bond.
  """
  name_: String!

  """
  The symbol of the bond.
  """
  symbol_: String!

  """
  The address of the token factory contract.
  """
  tokenFactoryAddress: String!
}

input DeployContractATKComplianceImplementationInput {
  """
  Address of the trusted forwarder for meta-transactions
  """
  trustedForwarder: String!
}

input DeployContractATKComplianceModuleRegistryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  trustedForwarder: String!
}

input DeployContractATKContractIdentityImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  trustedForwarder: String!
}

input DeployContractATKContractIdentityProxyInput {
  """
  Array of addresses implementing IClaimAuthorizer to register as claim authorizers.
  """
  claimAuthorizationContracts: [String!]!

  """
  The address of the contract that will own this identity.
  """
  contractAddress: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

input DeployContractATKDepositFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions.
  """
  forwarder: String!
}

input DeployContractATKDepositImplementationInput {
  """
  The address of the trusted forwarder contract for meta-transactions
  """
  forwarder_: String!
}

input DeployContractATKDepositProxyInput {
  """
  The access manager of the deposit.
  """
  accessManager_: String!

  """
  The compliance of the deposit.
  """
  compliance_: String!

  """
  The number of decimals of the deposit.
  """
  decimals_: Int!

  """
  The identity registry of the deposit.
  """
  identityRegistry_: String!

  """
  The initial module pairs of the deposit.
  """
  initialModulePairs_: [ATKDepositProxyDeployContractATKDepositProxyInitialModulePairsInput!]!

  """
  The name of the deposit.
  """
  name_: String!

  """
  The symbol of the deposit.
  """
  symbol_: String!

  """
  The address of the token factory contract.
  """
  tokenFactoryAddress: String!
}

input DeployContractATKEquityFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions.
  """
  forwarder: String!
}

input DeployContractATKEquityImplementationInput {
  """
  The address of the trusted forwarder contract for meta-transactions
  """
  forwarder_: String!
}

input DeployContractATKEquityProxyInput {
  """
  The access manager of the equity.
  """
  accessManager_: String!

  """
  The compliance of the equity.
  """
  compliance_: String!

  """
  The number of decimals of the equity.
  """
  decimals_: Int!

  """
  The identity registry of the equity.
  """
  identityRegistry_: String!

  """
  The initial module pairs of the equity.
  """
  initialModulePairs_: [ATKEquityProxyDeployContractATKEquityProxyInitialModulePairsInput!]!

  """
  The name of the equity.
  """
  name_: String!

  """
  The symbol of the equity.
  """
  symbol_: String!

  """
  The address of the token factory contract.
  """
  tokenFactoryAddress: String!
}

input DeployContractATKFixedYieldProxyInput {
  """
  The end date of the yield schedule.
  """
  endDate: String!

  """
  The address of the IATKFixedYieldScheduleFactory contract.
  """
  factoryAddress: String!

  """
  The initial admins of the yield schedule.
  """
  initialAdmins: [String!]!

  """
  The interval of the yield schedule.
  """
  interval: String!

  """
  The rate of the yield schedule.
  """
  rate: String!

  """
  The start date of the yield schedule.
  """
  startDate: String!

  """
  The address of the ISMARTYield token.
  """
  tokenAddress: String!
}

input DeployContractATKFixedYieldScheduleFactoryImplementationInput {
  """
  The address of the trusted forwarder
  """
  forwarder: String!
}

input DeployContractATKFixedYieldScheduleUpgradeableInput {
  """
  The address of the trusted forwarder
  """
  forwarder: String!
}

input DeployContractATKFundFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions.
  """
  forwarder: String!
}

input DeployContractATKFundImplementationInput {
  """
  The address of the trusted forwarder contract for meta-transactions
  """
  forwarder_: String!
}

input DeployContractATKFundProxyInput {
  """
  The access manager of the fund.
  """
  accessManager_: String!

  """
  The compliance of the fund.
  """
  compliance_: String!

  """
  The number of decimals of the fund.
  """
  decimals_: Int!

  """
  The identity registry of the fund.
  """
  identityRegistry_: String!

  """
  The initial module pairs of the fund.
  """
  initialModulePairs_: [ATKFundProxyDeployContractATKFundProxyInitialModulePairsInput!]!

  """
  The management fee of the fund.
  """
  managementFeeBps_: Int!

  """
  The name of the fund.
  """
  name_: String!

  """
  The symbol of the fund.
  """
  symbol_: String!

  """
  The address of the token factory contract.
  """
  tokenFactoryAddress: String!
}

input DeployContractATKIdentityFactoryImplementationInput {
  """
  The address of the ERC-2771 trusted forwarder for gasless transactions.
  """
  trustedForwarder: String!
}

input DeployContractATKIdentityImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions.
  """
  forwarder: String!
}

input DeployContractATKIdentityProxyInput {
  """
  Array of addresses implementing IClaimAuthorizer to register as claim authorizers.
  """
  claimAuthorizationContracts: [String!]!

  """
  The address to be set as the first management key for this identity.
  """
  initialManagementKey: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

input DeployContractATKIdentityRegistryImplementationInput {
  """
  The address of the trusted forwarder contract for meta-transactions. If address(0) is provided, meta-transactions are effectively disabled for this context.
  """
  trustedForwarder: String!
}

input DeployContractATKIdentityRegistryStorageImplementationInput {
  """
  The address of the trusted forwarder contract for ERC2771 meta-transactions. If this is `address(0)`, meta-transactions via a forwarder are effectively disabled for this context, and `_msgSender()` will behave like the standard `msg.sender`.
  """
  trustedForwarder: String!
}

input DeployContractATKLinearVestingStrategyInput {
  """
  The initial cliff duration in seconds (must be <= vestingDuration_).
  """
  cliffDuration_: String!

  """
  The total vesting duration in seconds (must be > 0).
  """
  vestingDuration_: String!
}

input DeployContractATKPushAirdropFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractATKPushAirdropImplementationInput {
  """
  The address of the forwarder contract.
  """
  forwarder_: String!
}

input DeployContractATKPushAirdropProxyInput {
  """
  The maximum tokens that can be distributed (0 for no cap).
  """
  distributionCap: String!

  """
  The address of the IATKPushAirdropFactory contract.
  """
  factoryAddress: String!

  """
  The human-readable name for the airdrop.
  """
  name: String!

  """
  The initial owner of the contract (admin who can distribute tokens).
  """
  owner: String!

  """
  The Merkle root for verifying distributions.
  """
  root: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token: String!
}

input DeployContractATKStableCoinFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions.
  """
  forwarder: String!
}

input DeployContractATKStableCoinImplementationInput {
  """
  The address of the forwarder contract.
  """
  forwarder_: String!
}

input DeployContractATKStableCoinProxyInput {
  """
  The access manager of the stable coin.
  """
  accessManager_: String!

  """
  The topic ID of the collateral claim.
  """
  collateralTopicId_: String!

  """
  The compliance of the stable coin.
  """
  compliance_: String!

  """
  The number of decimals of the stable coin.
  """
  decimals_: Int!

  """
  The identity registry of the stable coin.
  """
  identityRegistry_: String!

  """
  The initial module pairs of the stable coin.
  """
  initialModulePairs_: [ATKStableCoinProxyDeployContractATKStableCoinProxyInitialModulePairsInput!]!

  """
  The name of the stable coin.
  """
  name_: String!

  """
  The symbol of the stable coin.
  """
  symbol_: String!

  """
  The address of the token factory contract.
  """
  tokenFactoryAddress: String!
}

input DeployContractATKSystemAccessManagerImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractATKSystemAddonRegistryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  trustedForwarder: String!
}

input DeployContractATKSystemFactoryInput {
  """
  The default address for the addon registry module's logic contract.
  """
  addonRegistryImplementation_: String!

  """
  The address of the ATKSystem implementation contract.
  """
  atkSystemImplementation_: String!

  """
  The default address for the compliance module's logic contract.
  """
  complianceImplementation_: String!

  """
  The default address for the compliance module registry module's logic contract.
  """
  complianceModuleRegistryImplementation_: String!

  """
  The default address for the contract identity contract's logic (template).
  """
  contractIdentityImplementation_: String!

  """
  The address of the trusted forwarder contract to be used for meta-transactions (ERC2771).
  """
  forwarder_: String!

  """
  The default address for the identity factory module's logic contract.
  """
  identityFactoryImplementation_: String!

  """
  The default address for the standard identity contract's logic (template).
  """
  identityImplementation_: String!

  """
  The default address for the identity registry module's logic contract.
  """
  identityRegistryImplementation_: String!

  """
  The default address for the identity registry storage module's logic contract.
  """
  identityRegistryStorageImplementation_: String!

  """
  The default address for the system access manager module's logic contract.
  """
  systemAccessManagerImplementation_: String!

  """
  The default address for the token access manager contract's logic (template).
  """
  tokenAccessManagerImplementation_: String!

  """
  The default address for the token factory registry module's logic contract.
  """
  tokenFactoryRegistryImplementation_: String!

  """
  The default address for the topic scheme registry module's logic contract.
  """
  topicSchemeRegistryImplementation_: String!

  """
  The default address for the trusted issuers registry module's logic contract.
  """
  trustedIssuersRegistryImplementation_: String!
}

input DeployContractATKSystemImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder_: String!
}

input DeployContractATKTimeBoundAirdropFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractATKTimeBoundAirdropImplementationInput {
  """
  The address of the forwarder contract.
  """
  forwarder_: String!
}

input DeployContractATKTimeBoundAirdropProxyInput {
  """
  The timestamp when claims end.
  """
  endTime: String!

  """
  The address of the IATKTimeBoundAirdropFactory contract.
  """
  factoryAddress: String!

  """
  The human-readable name for the airdrop.
  """
  name: String!

  """
  The initial owner of the contract.
  """
  owner: String!

  """
  The Merkle root for verifying claims.
  """
  root: String!

  """
  The timestamp when claims can begin.
  """
  startTime: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token: String!
}

input DeployContractATKTokenAccessManagerImplementationInput {
  """
  The address of the trusted forwarder contract.
  """
  forwarder: String!
}

input DeployContractATKTokenAccessManagerProxyInput {
  """
  The addresses that will be granted initial administrative privileges.
  """
  initialAdmins: [String!]!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

input DeployContractATKTokenFactoryRegistryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  trustedForwarder: String!
}

input DeployContractATKTokenSaleFactoryInput {
  """
  The address of the forwarder contract for ERC2771
  """
  forwarder: String!
}

input DeployContractATKTokenSaleInput {
  """
  The address of the forwarder contract for ERC2771
  """
  forwarder: String!
}

input DeployContractATKTokenSaleProxyInput {
  """
  The address of the admin of the proxy
  """
  _admin: String!

  """
  Data to pass to the implementation for initialization function call, or empty bytes if no call
  """
  _data: String!

  """
  The address of the initial implementation of the proxy
  """
  _logic: String!
}

input DeployContractATKTopicSchemeRegistryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  trustedForwarder: String!
}

input DeployContractATKTrustedIssuersRegistryImplementationInput {
  """
  The address of the trusted forwarder contract for ERC2771 meta-transactions. If `address(0)`, meta-transactions via a forwarder are effectively disabled.
  """
  trustedForwarder: String!
}

input DeployContractATKTypedImplementationProxyInput {
  """
  The data to pass to the implementation's `initialize` function.
  """
  initializeData_: String!

  """
  The address of the IATKTypedImplementationRegistry contract.
  """
  registryAddress_: String!

  """
  The type hash of the implementation.
  """
  typeHash_: String!
}

input DeployContractATKVaultFactoryImplementationInput {
  """
  Address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractATKVaultInput {
  """
  Number of confirmations required to execute a transaction
  """
  _required: String!

  """
  Array of initial signer addresses
  """
  _signers: [String!]!

  """
  Address of the ERC2771 forwarder for meta-transactions
  """
  forwarder: String!

  """
  Addresses that will have admin role
  """
  initialAdmins: [String!]!

  """
  Address of the OnchainID (IIdentity contract) to associate with this vault (can be address(0) to set later)
  """
  onchainId: String!
}

input DeployContractATKVestingAirdropFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractATKVestingAirdropImplementationInput {
  """
  The address of the forwarder contract.
  """
  forwarder_: String!
}

input DeployContractATKVestingAirdropProxyInput {
  """
  The address of the IATKVestingAirdropFactory contract.
  """
  factoryAddress: String!

  """
  The timestamp after which no new vesting can be initialized.
  """
  initializationDeadline: String!

  """
  The human-readable name for this airdrop.
  """
  name: String!

  """
  The initial owner of the contract.
  """
  owner: String!

  """
  The Merkle root for verifying claims.
  """
  root: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token: String!

  """
  The address of the vesting strategy contract for vesting calculations.
  """
  vestingStrategy: String!
}

input DeployContractATKXvPSettlementFactoryImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractATKXvPSettlementImplementationInput {
  """
  The address of the trusted forwarder for meta-transactions
  """
  forwarder: String!
}

input DeployContractATKXvPSettlementProxyInput {
  """
  Whether to auto-execute after all approvals
  """
  autoExecute: Boolean!

  """
  Timestamp after which the settlement expires
  """
  cutoffDate: String!

  """
  The address of the IATKXvPSettlementFactory contract.
  """
  factoryAddress: String!

  """
  Array of token flows for this settlement
  """
  flows: [ATKXvPSettlementProxyDeployContractATKXvPSettlementProxyFlowsInput!]!

  """
  The name of the settlement
  """
  name: String!
}

input DeployContractAddressBlockListComplianceModuleInput {
  """
  Address of the trusted forwarder for meta transactions
  """
  _trustedForwarder: String!
}

input DeployContractCountryAllowListComplianceModuleInput {
  """
  Address of the trusted forwarder for meta transactions
  """
  _trustedForwarder: String!
}

input DeployContractCountryBlockListComplianceModuleInput {
  """
  Address of the trusted forwarder for meta transactions
  """
  _trustedForwarder: String!
}

input DeployContractERC734Input {
  """
  Flag indicating if this is deployed as a library (skips initialization)
  """
  _isLibrary: Boolean!

  """
  The address to be set as the initial management key
  """
  initialManagementKey: String!
}

input DeployContractIdentityAllowListComplianceModuleInput {
  """
  Address of the trusted forwarder for meta transactions
  """
  _trustedForwarder: String!
}

input DeployContractIdentityBlockListComplianceModuleInput {
  """
  Address of the trusted forwarder for meta transactions
  """
  _trustedForwarder: String!
}

input DeployContractSMARTIdentityVerificationComplianceModuleInput {
  """
  Address of the trusted forwarder for meta transactions
  """
  trustedForwarder_: String!
}

type ERC734 {
  """
  Retrieves information about a key.
  See {IERC734-getKey}. Returns the purposes, key type, and the key itself for a given `_key` hash.
  The key identifier itself, The type of the key, Array of purposes associated with the key.
  """
  getKey(_key: String!): ERC734GetKeyOutput

  """
  Returns all purposes associated with a key.
  See {IERC734-getKeyPurposes}. Returns the list of purposes associated with a `_key`.
  Array of purposes associated with the key.
  """
  getKeyPurposes(_key: String!): ERC734GetKeyPurposesOutput

  """
  Returns all keys that have a specific purpose.
  See {IERC734-getKeysByPurpose}. Returns an array of key hashes that have the given `_purpose`.
  Array of key identifiers that have the specified purpose.
  """
  getKeysByPurpose(_purpose: String!): ERC734GetKeysByPurposeOutput
  id: ID

  """
  Checks if a key has a specific purpose.
  See {IERC734-keyHasPurpose}. Returns `true` if a `_key` is present and has the given `_purpose`.
  True if the key has the specified purpose.
  """
  keyHasPurpose(_key: String!, _purpose: String!): ERC734KeyHasPurposeOutput
}

input ERC734AddKeyInput {
  """
  The key identifier to add
  """
  _key: String!

  """
  The type of key (e.g., 1 for ECDSA)
  """
  _keyType: String!

  """
  The purpose for the key (e.g., MANAGEMENT_KEY, ACTION_KEY, CLAIM_SIGNER_KEY)
  """
  _purpose: String!
}

input ERC734ApproveInput {
  """
  True to approve, false to disapprove
  """
  _approve: Boolean!

  """
  The ID of the execution request
  """
  _id: String!
}

input ERC734ExecuteInput {
  """
  The data payload for the call
  """
  _data: String!

  """
  The address to execute the call to
  """
  _to: String!

  """
  The amount of ETH to send
  """
  _value: String!
}

type ERC734GetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type ERC734GetKeyPurposesOutput {
  purposes: [String!]
}

type ERC734GetKeysByPurposeOutput {
  keys: [String!]
}

input ERC734InitializeInput {
  """
  The address to be set as the initial management key
  """
  initialManagementKey: String!
}

type ERC734KeyHasPurposeOutput {
  exists: Boolean
}

type ERC734KeyPurposes {
  """
  Action key purpose - allows performing actions on behalf of the identity.
  """
  ACTION_KEY: String

  """
  Claim signer key purpose - allows signing claims about the identity or other identities.
  """
  CLAIM_SIGNER_KEY: String

  """
  Encryption key purpose - allows encrypting data for the identity.
  """
  ENCRYPTION_KEY: String

  """
  Management key purpose - allows managing the identity, including adding/removing other keys.
  """
  MANAGEMENT_KEY: String
  id: ID
}

"""
Returns the transaction hash
"""
type ERC734KeyPurposesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ERC734KeyPurposesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ERC734KeyTypes {
  """
  ECDSA key type identifier for elliptic curve digital signature algorithm keys.
  """
  ECDSA: String

  """
  RSA key type identifier for RSA cryptographic keys.
  """
  RSA: String
  id: ID
}

"""
Returns the transaction hash
"""
type ERC734KeyTypesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ERC734KeyTypesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ERC734RemoveKeyInput {
  """
  The key identifier to remove the purpose from
  """
  _key: String!

  """
  The purpose to remove from the key
  """
  _purpose: String!
}

"""
Returns the transaction hash
"""
type ERC734TransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ERC734TransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ERC735 {
  """
  Retrieves a claim by its ID.
  See {IERC735-getClaim}. Retrieves a claim by its ID. Claim ID is `keccak256(abi.encode(issuer_address, topic))`.
  The data of the claim, The address of the claim issuer, The signature scheme used, The signature of the claim, The topic of the claim, The URI of the claim.
  """
  getClaim(_claimId: String!): ERC735GetClaimOutput

  """
  Returns all claim IDs for a specific topic.
  See {IERC735-getClaimIdsByTopic}. Returns an array of claim IDs associated with a specific topic.
  Array of claim IDs associated with the topic.
  """
  getClaimIdsByTopic(_topic: String!): ERC735GetClaimIdsByTopicOutput
  id: ID
}

input ERC735AddClaimInput {
  """
  The data of the claim
  """
  _data: String!

  """
  The address of the claim issuer
  """
  _issuer: String!

  """
  The signature scheme used (e.g., ECDSA or CONTRACT)
  """
  _scheme: String!

  """
  The signature of the claim
  """
  _signature: String!

  """
  The topic of the claim
  """
  _topic: String!

  """
  The URI of the claim (e.g., IPFS hash)
  """
  _uri: String!
}

type ERC735ClaimSchemes {
  id: ID
}

"""
Returns the transaction hash
"""
type ERC735ClaimSchemesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ERC735ClaimSchemesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ERC735GetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type ERC735GetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

input ERC735RemoveClaimInput {
  """
  The ID of the claim to remove
  """
  _claimId: String!
}

"""
Returns the transaction hash
"""
type ERC735TransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ERC735TransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKAirdrop {
  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String
  id: ID

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String
}

input IATKAirdropBatchClaimInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proofs for each index.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input IATKAirdropClaimInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

"""
Returns the transaction hash
"""
type IATKAirdropTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKAirdropTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKAirdropWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type IATKBond {
  """
  Returns the address of the access manager for the token.
  The address of the access manager.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the token balance of a specific `account` at a given `timepoint`.
  The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String

  """
  Returns the maximum allowed total supply for this token (the "cap").
  This function provides a way to query the hard limit on the token's supply.      It is a `view` function, meaning it does not modify the contract's state and does not      cost gas when called externally as a read-only operation (e.g., from a user interface).
  uint256 The maximum number of tokens that can be in circulation.
  """
  cap: String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: IATKBondComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: IATKBondComplianceModulesOutput

  """
  Returns the decimals places of the token.
  """
  decimals: Int

  """
  Returns the ERC20 contract address of the denomination asset.
  The IERC20 contract instance of the denomination asset.
  """
  denominationAsset: String

  """
  Returns the amount of denomination assets currently held by this bond contract.
  The balance of denomination assets.
  """
  denominationAssetBalance: String

  """
  Returns the face value of the bond per token.
  The bond's face value in the denomination asset's base units.
  """
  faceValue: String

  """
  Gets the amount of tokens that are specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The amount of tokens partially frozen for the address.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Checks if a given account has a specific role.
  This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).
  A boolean value: `true` if the account has the specified role,         `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: IATKBondIdentityRegistryOutput

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if the address is frozen, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Returns true if the bond has matured (i.e., the current timestamp is past or at the maturity date).
  A boolean indicating if the bond has matured.
  """
  isMatured: Boolean

  """
  Returns the Unix timestamp when the bond matures.
  The maturity date timestamp.
  """
  maturityDate: String

  """
  Returns the amount of denomination assets missing to cover all potential redemptions.
  The amount of denomination assets missing (0 if there's enough or an excess).
  """
  missingDenominationAssetAmount: String

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: IATKBondOnchainIDOutput

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  This is a `view` function, meaning it does not modify the blockchain state and does not      cost gas when called externally (e.g., from an off-chain script or another contract's view function).
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Retrieves a list of all currently active interfaces for this token.
  This function returns an array of bytes4 interface IDs that the token supports.
  An array of bytes4 interface IDs.
  """
  registeredInterfaces: IATKBondRegisteredInterfacesOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token.
  """
  symbol: String

  """
  Returns the total amount of denomination assets needed to cover all potential redemptions of outstanding bond tokens.
  The total amount of denomination assets needed.
  """
  totalDenominationAssetNeeded: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the total token supply at a given `timepoint`.
  Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String

  """
  Returns the amount of excess denomination assets that can be withdrawn by the issuer after ensuring all redemptions can be met.
  The amount of excess denomination assets that are withdrawable.
  """
  withdrawableDenominationAssetAmount: String

  """
  Returns the basis amount used to calculate yield per single unit of the token (e.g., per 1 token with 18 decimals).
  The "yield basis" is a fundamental value upon which yield calculations are performed. For example: - For a bond-like token, this might be its face value (e.g., 100 USD). - For an equity-like token, it might be its nominal value or a value derived from an oracle. This function allows the basis to be specific to a `holder`, enabling scenarios where different holders might have different yield bases (though often it will be a global value, in which case `holder` might be ignored). The returned value is typically a raw number (e.g., if basis is $100 and token has 2 decimals, this might return 10000).
  The amount (in the smallest unit of the basis currency/asset) per single unit of the token, used for yield calculations.
  """
  yieldBasisPerUnit(holder: String!): IATKBondYieldBasisPerUnitOutput

  """
  Returns the address of the yield schedule contract for this token.
  The address of the yield schedule contract.
  """
  yieldSchedule: IATKBondYieldScheduleOutput

  """
  Returns the ERC20 token contract that is used for paying out the yield.
  Yield can be paid in the token itself or in a different token (e.g., a stablecoin). This function specifies which ERC20 token will be transferred to holders when they claim their accrued yield.
  An `IERC20` interface instance representing the token used for yield payments.
  """
  yieldToken: IATKBondYieldTokenOutput
}

input IATKBondAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input IATKBondApproveInput {
  spender: String!
  value: String!
}

input IATKBondBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input IATKBondBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input IATKBondBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKBondBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input IATKBondBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKBondBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input IATKBondBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKBondBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

type IATKBondComplianceModulesOutput {
  modulesList: [IATKBondModulesListComplianceModulesOutput!]
}

type IATKBondComplianceOutput {
  complianceContract: String
}

type IATKBondFactory {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if the provided address is a valid token implementation.
  True if the address is a valid token implementation, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictBondAddress(
    bondParams: IATKBondFactoryPredictBondAddressBondParamsInput!
    cap_: String!
    decimals_: Int!
    initialModulePairs_: [IATKBondFactoryPredictBondAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): IATKBondFactoryPredictBondAddressOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String
}

input IATKBondFactoryCreateBondInput {
  bondParams: IATKBondFactoryIATKBondFactoryCreateBondBondParamsInput!
  cap_: String!
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [IATKBondFactoryIATKBondFactoryCreateBondInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKBondFactoryIATKBondFactoryCreateBondBondParamsInput {
  denominationAsset: String!
  faceValue: String!
  maturityDate: String!
}

input IATKBondFactoryIATKBondFactoryCreateBondInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKBondFactoryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The address of the token implementation contract.
  """
  tokenImplementation_: String!
}

input IATKBondFactoryPredictBondAddressBondParamsInput {
  denominationAsset: String!
  faceValue: String!
  maturityDate: String!
}

input IATKBondFactoryPredictBondAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKBondFactoryPredictBondAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKBondFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKBondFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKBondForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input IATKBondForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input IATKBondFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

input IATKBondIATKBondInitializeBondParamsInput {
  denominationAsset: String!
  faceValue: String!
  maturityDate: String!
}

input IATKBondIATKBondInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKBondIdentityRegistryOutput {
  registryContract: String
}

input IATKBondInitializeInput {
  accessManager_: String!
  bondParams: IATKBondIATKBondInitializeBondParamsInput!
  cap_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKBondIATKBondInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKBondMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type IATKBondModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKBondOnchainIDOutput {
  idAddress: String
}

input IATKBondRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input IATKBondRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input IATKBondRedeemInput {
  """
  The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.
  """
  amount: String!
}

type IATKBondRegisteredInterfacesOutput {
  interfacesList: [String!]
}

input IATKBondRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input IATKBondSetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

input IATKBondSetCapInput {
  """
  The new maximum total supply. Must be >= the current total supply.
  """
  newCap: String!
}

input IATKBondSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input IATKBondSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input IATKBondSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input IATKBondSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

input IATKBondSetYieldScheduleInput {
  """
  The address of the smart contract that defines the yield schedule. This contract must adhere to `ISMARTYieldSchedule`.
  """
  schedule: String!
}

"""
Returns the transaction hash
"""
type IATKBondTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKBondTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKBondTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKBondTransferInput {
  to: String!
  value: String!
}

input IATKBondUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type IATKBondYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type IATKBondYieldScheduleOutput {
  schedule: String
}

type IATKBondYieldTokenOutput {
  paymentToken: String
}

type IATKClaimTracker {
  """
  Gets the amount already claimed for a specific index.
  The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): IATKClaimTrackerGetClaimedAmountOutput
  id: ID

  """
  Checks if a new claim amount is valid for a specific index.
  True if the new claim amount is valid, false otherwise.
  """
  isClaimAmountValid(
    claimedAmount: String!
    index: String!
    totalAmount: String!
  ): IATKClaimTrackerIsClaimAmountValidOutput

  """
  Checks if a claim has been fully claimed for a specific index.
  True if the index has been fully claimed, false otherwise.
  """
  isClaimed(
    index: String!
    totalAmount: String!
  ): IATKClaimTrackerIsClaimedOutput
}

type IATKClaimTrackerGetClaimedAmountOutput {
  claimedAmount: String
}

type IATKClaimTrackerIsClaimAmountValidOutput {
  isValid: Boolean
}

type IATKClaimTrackerIsClaimedOutput {
  claimed: Boolean
}

input IATKClaimTrackerRecordClaimInput {
  """
  The amount being claimed.
  """
  claimedAmount: String!

  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

"""
Returns the transaction hash
"""
type IATKClaimTrackerTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKClaimTrackerTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKCompliance {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if a potential token operation (transfer, mint, or burn) is compliant with all configured rules.
  This function MUST be a `view` function (it should not modify state).      It is called by the `ISMART` token contract *before* executing an operation.      The implementation should iterate through all active compliance modules associated with the `_token`,      calling each module's `canTransfer` function with the operation details and module-specific parameters.      If any module indicates non-compliance (e.g., by reverting), this `canTransfer` function should also revert.      If all modules permit the operation, it returns `true`.
  `true` if the operation is compliant with all rules, otherwise the function should revert.
  """
  canTransfer(
    _amount: String!
    _from: String!
    _to: String!
    _token: String!
  ): IATKComplianceCanTransferOutput

  """
  Returns all global compliance modules.
  Array of global compliance module-parameter pairs.
  """
  getGlobalComplianceModules: [IATKComplianceTuple0GetGlobalComplianceModulesOutput!]

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if an address is on the bypass list.
  True if the address is on the bypass list, false otherwise.
  """
  isBypassed(account: String!): Boolean

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input IATKComplianceAddGlobalComplianceModuleInput {
  """
  The address of the compliance module to add
  """
  module: String!

  """
  The ABI-encoded parameters for the module
  """
  params: String!
}

input IATKComplianceAddMultipleToBypassListInput {
  """
  Array of addresses to add to the bypass list.
  """
  accounts: [String!]!
}

input IATKComplianceAddToBypassListInput {
  """
  The address to add to the bypass list.
  """
  account: String!
}

type IATKComplianceCanTransferOutput {
  isCompliant: Boolean
}

input IATKComplianceCreatedInput {
  """
  The quantity of tokens that were minted.
  """
  _amount: String!

  """
  The address that received the newly minted tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where the mint occurred.
  """
  _token: String!
}

input IATKComplianceDestroyedInput {
  """
  The quantity of tokens that were burned.
  """
  _amount: String!

  """
  The address from which tokens were burned.
  """
  _from: String!

  """
  The address of the `ISMART` token contract where the burn occurred.
  """
  _token: String!
}

input IATKComplianceInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

type IATKComplianceModuleRegistry {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Returns the address of a compliance module by its type hash.
  The address of the compliance module, or zero address if not registered.
  """
  complianceModule(moduleTypeHash: String!): String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID
}

input IATKComplianceModuleRegistryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

input IATKComplianceModuleRegistryRegisterComplianceModuleInput {
  """
  The address of the compliance module to register
  """
  moduleAddress: String!
}

"""
Returns the transaction hash
"""
type IATKComplianceModuleRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKComplianceModuleRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKComplianceRemoveFromBypassListInput {
  """
  The address to remove from the bypass list.
  """
  account: String!
}

input IATKComplianceRemoveGlobalComplianceModuleInput {
  """
  The address of the compliance module to remove
  """
  module: String!
}

input IATKComplianceRemoveMultipleFromBypassListInput {
  """
  Array of addresses to remove from the bypass list.
  """
  accounts: [String!]!
}

input IATKComplianceSetParametersForGlobalComplianceModuleInput {
  """
  The address of the compliance module to update
  """
  module: String!

  """
  The new ABI-encoded parameters for the module
  """
  params: String!
}

"""
Returns the transaction hash
"""
type IATKComplianceTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKComplianceTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKComplianceTransferredInput {
  """
  The quantity of tokens that were transferred.
  """
  _amount: String!

  """
  The address of the token sender.
  """
  _from: String!

  """
  The address of the token recipient.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where the transfer occurred.
  """
  _token: String!
}

"""
Returns all global compliance modules.
Array of global compliance module-parameter pairs.
"""
type IATKComplianceTuple0GetGlobalComplianceModulesOutput {
  module: String
  params: String
}

type IATKContractIdentity {
  """
  Returns the address of the contract that owns this identity.
  The contract address.
  """
  contractAddress: String

  """
  Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  getClaim(_claimId: String!): IATKContractIdentityGetClaimOutput

  """
  Returns all registered claim authorization contracts.
  Array of authorization contract addresses.
  """
  getClaimAuthorizationContracts: [String!]

  """
  Returns an array of claim IDs by topic.
  """
  getClaimIdsByTopic(
    _topic: String!
  ): IATKContractIdentityGetClaimIdsByTopicOutput

  """
  Returns the full key data, if present in the identity.
  """
  getKey(_key: String!): IATKContractIdentityGetKeyOutput

  """
  Returns the list of purposes associated with a key.
  """
  getKeyPurposes(_key: String!): IATKContractIdentityGetKeyPurposesOutput

  """
  Returns an array of public key bytes32 held by this identity.
  """
  getKeysByPurpose(
    _purpose: String!
  ): IATKContractIdentityGetKeysByPurposeOutput
  id: ID

  """
  Checks if a contract is registered as a claim authorization contract.
  True if registered, false otherwise.
  """
  isClaimAuthorizationContractRegistered(
    authorizationContract: String!
  ): Boolean

  """
  Returns revocation status of a claim.
  isRevoked true if the claim is revoked and false otherwise.
  """
  isClaimRevoked(_sig: String!): Boolean

  """
  Checks if a claim is valid.
  claimValid true if the claim is valid, false otherwise.
  """
  isClaimValid(
    _identity: String!
    claimTopic: String!
    data: String!
    sig: String!
  ): Boolean

  """
  Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.
  """
  keyHasPurpose(
    _key: String!
    _purpose: String!
  ): IATKContractIdentityKeyHasPurposeOutput
}

input IATKContractIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input IATKContractIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input IATKContractIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input IATKContractIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type IATKContractIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type IATKContractIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type IATKContractIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type IATKContractIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type IATKContractIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

input IATKContractIdentityInitializeInput {
  """
  Array of addresses implementing IClaimAuthorizer to register as claim authorizers
  """
  claimAuthorizationContracts: [String!]!

  """
  The address of the contract that owns this identity
  """
  contractAddr: String!
}

input IATKContractIdentityIssueClaimToInput {
  """
  The claim data
  """
  data: String!

  """
  The identity contract to add the claim to
  """
  subject: String!

  """
  The claim topic
  """
  topic: String!

  """
  The claim URI
  """
  uri: String!
}

type IATKContractIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input IATKContractIdentityRegisterClaimAuthorizationContractInput {
  """
  The address of the contract implementing IClaimAuthorizer
  """
  authorizationContract: String!
}

input IATKContractIdentityRemoveClaimAuthorizationContractInput {
  """
  The address of the contract to remove
  """
  authorizationContract: String!
}

input IATKContractIdentityRemoveClaimInput {
  _claimId: String!
}

input IATKContractIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

input IATKContractIdentityRevokeClaimBySignatureInput {
  """
  the signature of the claim
  """
  signature: String!
}

input IATKContractIdentityRevokeClaimInput {
  """
  the id of the claim
  """
  _claimId: String!

  """
  the address of the identity contract
  """
  _identity: String!
}

"""
Returns the transaction hash
"""
type IATKContractIdentityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKContractIdentityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKDeposit {
  """
  Returns the address of the access manager for the token.
  The address of the access manager.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: IATKDepositComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: IATKDepositComplianceModulesOutput

  """
  Returns the decimals places of the token.
  """
  decimals: Int

  """
  Gets the amount of tokens that are specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The amount of tokens partially frozen for the address.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Checks if a given account has a specific role.
  This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).
  A boolean value: `true` if the account has the specified role,         `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: IATKDepositIdentityRegistryOutput

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if the address is frozen, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: IATKDepositOnchainIDOutput

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  This is a `view` function, meaning it does not modify the blockchain state and does not      cost gas when called externally (e.g., from an off-chain script or another contract's view function).
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Retrieves a list of all currently active interfaces for this token.
  This function returns an array of bytes4 interface IDs that the token supports.
  An array of bytes4 interface IDs.
  """
  registeredInterfaces: IATKDepositRegisteredInterfacesOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input IATKDepositAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input IATKDepositApproveInput {
  spender: String!
  value: String!
}

input IATKDepositBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input IATKDepositBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input IATKDepositBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKDepositBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input IATKDepositBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKDepositBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input IATKDepositBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKDepositBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

type IATKDepositComplianceModulesOutput {
  modulesList: [IATKDepositModulesListComplianceModulesOutput!]
}

type IATKDepositComplianceOutput {
  complianceContract: String
}

type IATKDepositFactory {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if the provided address is a valid token implementation.
  True if the address is a valid token implementation, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictDepositAddress(
    decimals_: Int!
    initialModulePairs_: [IATKDepositFactoryPredictDepositAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): IATKDepositFactoryPredictDepositAddressOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String
}

input IATKDepositFactoryCreateDepositInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [IATKDepositFactoryIATKDepositFactoryCreateDepositInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKDepositFactoryIATKDepositFactoryCreateDepositInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKDepositFactoryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The address of the token implementation contract.
  """
  tokenImplementation_: String!
}

input IATKDepositFactoryPredictDepositAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKDepositFactoryPredictDepositAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKDepositFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKDepositFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKDepositForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input IATKDepositForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input IATKDepositFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

input IATKDepositIATKDepositInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKDepositIdentityRegistryOutput {
  registryContract: String
}

input IATKDepositInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKDepositIATKDepositInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKDepositMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type IATKDepositModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKDepositOnchainIDOutput {
  idAddress: String
}

input IATKDepositRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input IATKDepositRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

type IATKDepositRegisteredInterfacesOutput {
  interfacesList: [String!]
}

input IATKDepositRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input IATKDepositSetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

input IATKDepositSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input IATKDepositSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input IATKDepositSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input IATKDepositSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type IATKDepositTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKDepositTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKDepositTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKDepositTransferInput {
  to: String!
  value: String!
}

input IATKDepositUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type IATKEquity {
  """
  Returns the address of the access manager for the token.
  The address of the access manager.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: IATKEquityComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: IATKEquityComplianceModulesOutput

  """
  Returns the decimals places of the token.
  """
  decimals: Int

  """
  Returns the delegate that `account` has chosen.
  """
  delegates(account: String!): String

  """
  Gets the amount of tokens that are specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The amount of tokens partially frozen for the address.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote.
  """
  getPastTotalSupply(timepoint: String!): String

  """
  Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block.
  """
  getPastVotes(account: String!, timepoint: String!): String

  """
  Returns the current amount of votes that `account` has.
  """
  getVotes(account: String!): String

  """
  Checks if a given account has a specific role.
  This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).
  A boolean value: `true` if the account has the specified role,         `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: IATKEquityIdentityRegistryOutput

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if the address is frozen, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: IATKEquityOnchainIDOutput

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  This is a `view` function, meaning it does not modify the blockchain state and does not      cost gas when called externally (e.g., from an off-chain script or another contract's view function).
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Retrieves a list of all currently active interfaces for this token.
  This function returns an array of bytes4 interface IDs that the token supports.
  An array of bytes4 interface IDs.
  """
  registeredInterfaces: IATKEquityRegisteredInterfacesOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input IATKEquityAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input IATKEquityApproveInput {
  spender: String!
  value: String!
}

input IATKEquityBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input IATKEquityBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input IATKEquityBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKEquityBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input IATKEquityBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKEquityBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input IATKEquityBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKEquityBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

type IATKEquityComplianceModulesOutput {
  modulesList: [IATKEquityModulesListComplianceModulesOutput!]
}

type IATKEquityComplianceOutput {
  complianceContract: String
}

input IATKEquityDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input IATKEquityDelegateInput {
  delegatee: String!
}

type IATKEquityFactory {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if the provided address is a valid token implementation.
  True if the address is a valid token implementation, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictEquityAddress(
    decimals_: Int!
    initialModulePairs_: [IATKEquityFactoryPredictEquityAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): IATKEquityFactoryPredictEquityAddressOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String
}

input IATKEquityFactoryCreateEquityInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [IATKEquityFactoryIATKEquityFactoryCreateEquityInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKEquityFactoryIATKEquityFactoryCreateEquityInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKEquityFactoryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The address of the token implementation contract.
  """
  tokenImplementation_: String!
}

input IATKEquityFactoryPredictEquityAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKEquityFactoryPredictEquityAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKEquityFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKEquityFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKEquityForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input IATKEquityForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input IATKEquityFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

input IATKEquityIATKEquityInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKEquityIdentityRegistryOutput {
  registryContract: String
}

input IATKEquityInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKEquityIATKEquityInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKEquityMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type IATKEquityModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKEquityOnchainIDOutput {
  idAddress: String
}

input IATKEquityRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input IATKEquityRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

type IATKEquityRegisteredInterfacesOutput {
  interfacesList: [String!]
}

input IATKEquityRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input IATKEquitySetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

input IATKEquitySetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input IATKEquitySetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input IATKEquitySetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input IATKEquitySetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type IATKEquityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKEquityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKEquityTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKEquityTransferInput {
  to: String!
  value: String!
}

input IATKEquityUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type IATKFixedYieldScheduleFactory {
  """
  Returns the address of the current ATKFixedYieldSchedule logic contract (implementation).
  This function is expected to be available on the factory contract. It's typically created automatically if the factory has a public state variable named `atkFixedYieldScheduleImplementation`.
  The address of the current implementation contract.
  """
  atkFixedYieldScheduleImplementation: String
  id: ID
}

input IATKFixedYieldScheduleFactoryCreateInput {
  """
  Country code for compliance purposes
  """
  country: Int!

  """
  The Unix timestamp for the schedule end
  """
  endTime: String!

  """
  The interval for yield distributions in seconds
  """
  interval: String!

  """
  The yield rate in basis points
  """
  rate: String!

  """
  The Unix timestamp for the schedule start
  """
  startTime: String!

  """
  The `ISMARTYield`-compliant token for which the yield schedule is being created
  """
  token: String!
}

input IATKFixedYieldScheduleFactoryInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

"""
Returns the transaction hash
"""
type IATKFixedYieldScheduleFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKFixedYieldScheduleFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKFund {
  """
  Returns the address of the access manager for the token.
  The address of the access manager.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: IATKFundComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: IATKFundComplianceModulesOutput

  """
  Returns the decimals places of the token.
  """
  decimals: Int

  """
  Returns the delegate that `account` has chosen.
  """
  delegates(account: String!): String

  """
  Gets the amount of tokens that are specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The amount of tokens partially frozen for the address.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote.
  """
  getPastTotalSupply(timepoint: String!): String

  """
  Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block.
  """
  getPastVotes(account: String!, timepoint: String!): String

  """
  Returns the current amount of votes that `account` has.
  """
  getVotes(account: String!): String

  """
  Checks if a given account has a specific role.
  This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).
  A boolean value: `true` if the account has the specified role,         `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: IATKFundIdentityRegistryOutput

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if the address is frozen, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Returns the management fee in basis points.
  The management fee in BPS.
  """
  managementFeeBps: Int

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: IATKFundOnchainIDOutput

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  This is a `view` function, meaning it does not modify the blockchain state and does not      cost gas when called externally (e.g., from an off-chain script or another contract's view function).
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Retrieves a list of all currently active interfaces for this token.
  This function returns an array of bytes4 interface IDs that the token supports.
  An array of bytes4 interface IDs.
  """
  registeredInterfaces: IATKFundRegisteredInterfacesOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input IATKFundAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input IATKFundApproveInput {
  spender: String!
  value: String!
}

input IATKFundBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input IATKFundBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input IATKFundBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKFundBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input IATKFundBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKFundBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input IATKFundBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKFundBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

type IATKFundComplianceModulesOutput {
  modulesList: [IATKFundModulesListComplianceModulesOutput!]
}

type IATKFundComplianceOutput {
  complianceContract: String
}

input IATKFundDelegateBySigInput {
  delegatee: String!
  expiry: String!
  nonce: String!
  r: String!
  s: String!
  v: Int!
}

input IATKFundDelegateInput {
  delegatee: String!
}

type IATKFundFactory {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if the provided address is a valid token implementation.
  True if the address is a valid token implementation, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictFundAddress(
    decimals_: Int!
    initialModulePairs_: [IATKFundFactoryPredictFundAddressInitialModulePairsInput!]!
    managementFeeBps_: Int!
    name_: String!
    symbol_: String!
  ): IATKFundFactoryPredictFundAddressOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String
}

input IATKFundFactoryCreateFundInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [IATKFundFactoryIATKFundFactoryCreateFundInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  symbol_: String!
}

input IATKFundFactoryIATKFundFactoryCreateFundInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKFundFactoryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The address of the token implementation contract.
  """
  tokenImplementation_: String!
}

input IATKFundFactoryPredictFundAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKFundFactoryPredictFundAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKFundFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKFundFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKFundForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input IATKFundForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input IATKFundFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

input IATKFundIATKFundInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKFundIdentityRegistryOutput {
  registryContract: String
}

input IATKFundInitializeInput {
  accessManager_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKFundIATKFundInitializeInitialModulePairsInput!]!
  managementFeeBps_: Int!
  name_: String!
  symbol_: String!
}

input IATKFundMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type IATKFundModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKFundOnchainIDOutput {
  idAddress: String
}

input IATKFundRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input IATKFundRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

type IATKFundRegisteredInterfacesOutput {
  interfacesList: [String!]
}

input IATKFundRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input IATKFundSetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

input IATKFundSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input IATKFundSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input IATKFundSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input IATKFundSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type IATKFundTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKFundTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKFundTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKFundTransferInput {
  to: String!
  value: String!
}

input IATKFundUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type IATKIdentity {
  """
  Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  getClaim(_claimId: String!): IATKIdentityGetClaimOutput

  """
  Returns an array of claim IDs by topic.
  """
  getClaimIdsByTopic(_topic: String!): IATKIdentityGetClaimIdsByTopicOutput

  """
  Returns the full key data, if present in the identity.
  """
  getKey(_key: String!): IATKIdentityGetKeyOutput

  """
  Returns the list of purposes associated with a key.
  """
  getKeyPurposes(_key: String!): IATKIdentityGetKeyPurposesOutput

  """
  Returns an array of public key bytes32 held by this identity.
  """
  getKeysByPurpose(_purpose: String!): IATKIdentityGetKeysByPurposeOutput
  id: ID

  """
  Checks if a claim is valid.
  claimValid true if the claim is valid, false otherwise.
  """
  isClaimValid(
    _identity: String!
    claimTopic: String!
    data: String!
    sig: String!
  ): Boolean

  """
  Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.
  """
  keyHasPurpose(
    _key: String!
    _purpose: String!
  ): IATKIdentityKeyHasPurposeOutput
}

input IATKIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input IATKIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input IATKIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input IATKIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type IATKIdentityFactory {
  """
  Calculates the deterministic address at which an identity contract for a contract *would be* or *was* deployed using address-based salt.
  Uses the contract address to calculate a deterministic salt for deployment address prediction.      This provides predictable addresses based on the contract address.
  The pre-computed or actual deployment address of the contract's identity contract.
  """
  calculateContractIdentityAddress(
    _contractAddress: String!
  ): IATKIdentityFactoryCalculateContractIdentityAddressOutput

  """
  Calculates the deterministic address at which an identity contract for a user wallet *would be* or *was* deployed.
  This function typically uses the CREATE2 opcode logic to predict the address based on the factory's address,      a unique salt (often derived from `_walletAddress`), and the creation code of the identity proxy contract,      including its constructor arguments like `_initialManager`.
  The pre-computed or actual deployment address of the wallet's identity contract.
  """
  calculateWalletIdentityAddress(
    _initialManager: String!
    _walletAddress: String!
  ): IATKIdentityFactoryCalculateWalletIdentityAddressOutput

  """
  Retrieves the address of an already created on-chain identity associated with a given contract.
  The address of the contract identity if one exists for the contract, otherwise `address(0)`.
  """
  getContractIdentity(
    _contract: String!
  ): IATKIdentityFactoryGetContractIdentityOutput

  """
  Retrieves the address of an already created on-chain identity associated with a given user wallet.
  The address of the identity contract if one exists for the wallet, otherwise `address(0)`.
  """
  getIdentity(_wallet: String!): IATKIdentityFactoryGetIdentityOutput
  id: ID

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

type IATKIdentityFactoryCalculateContractIdentityAddressOutput {
  predictedAddress: String
}

type IATKIdentityFactoryCalculateWalletIdentityAddressOutput {
  predictedAddress: String
}

input IATKIdentityFactoryCreateContractIdentityInput {
  """
  The address of the contract implementing IContractWithIdentity
  """
  _contract: String!
}

input IATKIdentityFactoryCreateIdentityInput {
  """
  An array of `bytes32` representing pre-hashed management keys to be added to the new identity.                        These keys grant administrative control over the identity contract according to ERC734/ERC725 standards.
  """
  _managementKeys: [String!]!

  """
  The wallet address for which the identity is being created. This address might also serve as an initial manager.
  """
  _wallet: String!
}

type IATKIdentityFactoryGetContractIdentityOutput {
  contractIdentityAddress: String
}

type IATKIdentityFactoryGetIdentityOutput {
  identityContract: String
}

input IATKIdentityFactoryInitializeInput {
  """
  The address of the ATK system contract
  """
  systemAddress: String!
}

input IATKIdentityFactorySetOnchainIDInput {
  """
  The address of the identity factory's own identity contract.
  """
  identityAddress: String!
}

"""
Returns the transaction hash
"""
type IATKIdentityFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKIdentityFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type IATKIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type IATKIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type IATKIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type IATKIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

input IATKIdentityInitializeInput {
  """
  Array of addresses implementing IClaimAuthorizer to register as claim authorizers
  """
  claimAuthorizationContracts: [String!]!

  """
  The address to be set as the initial management key
  """
  initialManagementKey: String!
}

type IATKIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input IATKIdentityRegisterClaimAuthorizationContractInput {
  """
  The address of the contract implementing IClaimAuthorizer
  """
  authorizationContract: String!
}

type IATKIdentityRegistry {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if a given investor wallet address is currently registered in this Identity Registry.
  This is a view function and does not consume gas beyond the read operation cost.
  True if the address is registered, false otherwise.
  """
  contains(_userAddress: String!): Boolean

  """
  Gets the new wallet address that replaced a lost wallet during recovery.
  This is the key function for token recovery validation.
  The new wallet address that replaced the lost wallet, or address(0) if not found.
  """
  getRecoveredWallet(lostWallet: String!): String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the `IIdentity` contract address associated with a registered investor's wallet address.
  This is a view function. It will typically revert if the `_userAddress` is not registered.
  The address of the `IIdentity` contract linked to the given wallet address.
  """
  identity(_userAddress: String!): String

  """
  Returns the address of the `IdentityRegistryStorage` contract currently being used by this Identity Registry.
  This allows external parties to inspect which storage contract is active.
  The address of the contract implementing `ISMARTIdentityRegistryStorage`.
  """
  identityStorage: String

  """
  Retrieves the numeric country code associated with a registered investor's wallet address.
  This is a view function. It will typically revert if the `_userAddress` is not registered.
  The numeric country code (ISO 3166-1 alpha-2) for the investor's jurisdiction.
  """
  investorCountry(_userAddress: String!): Int
  isVerified(
    _userAddress: String!
    expression: [IATKIdentityRegistryIsVerifiedExpressionInput!]!
  ): Boolean

  """
  Checks if a wallet address has been marked as lost.
  True if the wallet is marked as lost, false otherwise.
  """
  isWalletLost(userWallet: String!): Boolean

  """
  Returns the address of the `TrustedIssuersRegistry` contract currently being used by this Identity Registry.
  This allows external parties to inspect which trusted issuers list is active for verification purposes.
  The address of the contract implementing `IERC3643TrustedIssuersRegistry`.
  """
  issuersRegistry: String

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the `TopicSchemeRegistry` contract currently being used by this Identity Registry.
  This allows external parties to inspect which topic scheme registry is active for validation.
  The address of the contract implementing `ISMARTTopicSchemeRegistry`.
  """
  topicSchemeRegistry: String
}

input IATKIdentityRegistryBatchRegisterIdentityInput {
  """
  An array of corresponding numeric country codes (ISO 3166-1 alpha-2) for each investor.
  """
  _countries: [Int!]!

  """
  An array of corresponding `IIdentity` contract addresses for each investor.
  """
  _identities: [String!]!

  """
  An array of investor wallet addresses to be registered.
  """
  _userAddresses: [String!]!
}

input IATKIdentityRegistryDeleteIdentityInput {
  """
  The investor's wallet address whose registration is to be removed.
  """
  _userAddress: String!
}

input IATKIdentityRegistryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the identity storage contract
  """
  identityStorage: String!

  """
  The address of the topic scheme registry contract
  """
  topicSchemeRegistry: String!

  """
  The address of the trusted issuers registry contract
  """
  trustedIssuersRegistry: String!
}

input IATKIdentityRegistryIsVerifiedExpressionInput {
  nodeType: Int!
  value: String!
}

input IATKIdentityRegistryRecoverIdentityInput {
  """
  The current wallet address to be marked as lost.
  """
  lostWallet: String!

  """
  The new IIdentity contract address for the new wallet.
  """
  newOnchainId: String!

  """
  The new wallet address to be registered.
  """
  newWallet: String!
}

input IATKIdentityRegistryRegisterIdentityInput {
  """
  The numeric country code (ISO 3166-1 alpha-2 standard) representing the investor's jurisdiction.
  """
  _country: Int!

  """
  The address of the investor's deployed `IIdentity` contract, which manages their claims.
  """
  _identity: String!

  """
  The investor's primary wallet address (externally owned account or smart contract wallet).
  """
  _userAddress: String!
}

input IATKIdentityRegistrySetIdentityRegistryStorageInput {
  """
  The address of the new contract that implements the `ISMARTIdentityRegistryStorage` interface.
  """
  _identityRegistryStorage: String!
}

input IATKIdentityRegistrySetTopicSchemeRegistryInput {
  """
  The address of the new contract that implements the `ISMARTTopicSchemeRegistry` interface.
  """
  _topicSchemeRegistry: String!
}

input IATKIdentityRegistrySetTrustedIssuersRegistryInput {
  """
  The address of the new contract that implements the `IERC3643TrustedIssuersRegistry` interface.
  """
  _trustedIssuersRegistry: String!
}

type IATKIdentityRegistryStorage {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Gets the new wallet address that replaced a lost wallet during recovery.
  This is the key function for token recovery - allows checking if caller is authorized to recover from lostWallet.
  The new wallet address that replaced the lost wallet, or address(0) if not found.
  """
  getRecoveredWalletFromStorage(lostWallet: String!): String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if a user wallet is globally marked as lost in the storage.
  A "globally lost" wallet means it has been declared lost in the context of at least one identity      it was associated with.
  True if the wallet has been marked as lost at least once, false otherwise.
  """
  isWalletMarkedAsLost(userWallet: String!): Boolean

  """
  Returns the identity registries linked to the storage contract.
  Returns the identity registries linked to the storage contract.
  Array of addresses of all linked identity registries.
  """
  linkedIdentityRegistries: [String!]

  """
  Returns the onchainID of an investor.
  Returns the onchainID of an investor.
  The identity contract address of the investor.
  """
  storedIdentity(_userAddress: String!): String

  """
  Returns the country code of an investor.
  Returns the country code of an investor.
  The country code (ISO 3166-1 numeric) of the investor.
  """
  storedInvestorCountry(_userAddress: String!): Int

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input IATKIdentityRegistryStorageAddIdentityToStorageInput {
  """
  The country of the investor  emits `IdentityStored` event
  """
  _country: Int!

  """
  The address of the user's identity contract
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input IATKIdentityRegistryStorageBindIdentityRegistryInput {
  """
  The identity registry address to add.
  """
  _identityRegistry: String!
}

input IATKIdentityRegistryStorageInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

input IATKIdentityRegistryStorageLinkWalletRecoveryInput {
  """
  The lost wallet address.
  """
  lostWallet: String!

  """
  The new replacement wallet address.
  """
  newWallet: String!
}

input IATKIdentityRegistryStorageMarkWalletAsLostInput {
  """
  The IIdentity contract address to which the userWallet was associated.
  """
  identityContract: String!

  """
  The user wallet address to be marked as lost.
  """
  userWallet: String!
}

input IATKIdentityRegistryStorageModifyStoredIdentityInput {
  """
  The address of the user's new identity contract  emits `IdentityModified` event
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input IATKIdentityRegistryStorageModifyStoredInvestorCountryInput {
  """
  The new country of the user  emits `CountryModified` event
  """
  _country: Int!

  """
  The address of the user
  """
  _userAddress: String!
}

input IATKIdentityRegistryStorageRemoveIdentityFromStorageInput {
  """
  The address of the user to be removed  emits `IdentityUnstored` event
  """
  _userAddress: String!
}

"""
Returns the transaction hash
"""
type IATKIdentityRegistryStorageTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKIdentityRegistryStorageTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKIdentityRegistryStorageUnbindIdentityRegistryInput {
  """
  The identity registry address to remove.
  """
  _identityRegistry: String!
}

"""
Returns the transaction hash
"""
type IATKIdentityRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKIdentityRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKIdentityRegistryUpdateCountryInput {
  """
  The new numeric country code (ISO 3166-1 alpha-2 standard).
  """
  _country: Int!

  """
  The investor's wallet address whose country information needs updating.
  """
  _userAddress: String!
}

input IATKIdentityRegistryUpdateIdentityInput {
  """
  The address of the investor's new `IIdentity` contract.
  """
  _identity: String!

  """
  The investor's wallet address whose associated `IIdentity` contract needs updating.
  """
  _userAddress: String!
}

input IATKIdentityRemoveClaimAuthorizationContractInput {
  """
  The address of the contract to remove
  """
  authorizationContract: String!
}

input IATKIdentityRemoveClaimInput {
  _claimId: String!
}

input IATKIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

"""
Returns the transaction hash
"""
type IATKIdentityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKIdentityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKLinearVestingStrategy {
  """
  Calculates the amount claimable based on the strategy's vesting parameters.
  The amount that can be claimed now.
  """
  calculateClaimableAmount(
    account: String!
    claimedAmount: String!
    totalAmount: String!
    vestingStartTime: String!
  ): IATKLinearVestingStrategyCalculateClaimableAmountOutput

  """
  Returns the cliff duration.
  The cliff duration in seconds.
  """
  cliffDuration: String
  id: ID

  """
  Returns whether this strategy supports multiple claims (vesting).
  True if the strategy supports multiple claims over time.
  """
  supportsMultipleClaims: IATKLinearVestingStrategySupportsMultipleClaimsOutput

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String

  """
  Returns the total vesting duration.
  The vesting duration in seconds.
  """
  vestingDuration: String
}

type IATKLinearVestingStrategyCalculateClaimableAmountOutput {
  claimableAmount: String
}

type IATKLinearVestingStrategySupportsMultipleClaimsOutput {
  supportsMultiple: Boolean
}

"""
Returns the transaction hash
"""
type IATKLinearVestingStrategyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKLinearVestingStrategyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKPushAirdrop {
  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Returns the distribution cap.
  The maximum tokens that can be distributed (0 for no cap).
  """
  distributionCap: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String
  id: ID

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Checks if tokens have been distributed to a specific index.
  distributed True if tokens have been distributed for this index.
  """
  isDistributed(index: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String

  """
  Returns the total amount of tokens distributed so far.
  The total amount distributed.
  """
  totalDistributed: String
}

input IATKPushAirdropBatchClaimInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proofs for each index.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input IATKPushAirdropBatchDistributeInput {
  """
  The amounts of tokens to distribute to each recipient.
  """
  amounts: [String!]!

  """
  The indices of the distributions in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proof arrays for verification of each distribution.
  """
  merkleProofs: [[String!]!]!

  """
  The addresses to receive tokens.
  """
  recipients: [String!]!
}

input IATKPushAirdropClaimInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

input IATKPushAirdropDistributeInput {
  """
  The amount of tokens to distribute.
  """
  amount: String!

  """
  The index of the distribution in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array for verification.
  """
  merkleProof: [String!]!

  """
  The address to receive tokens.
  """
  recipient: String!
}

type IATKPushAirdropFactory {
  """
  Returns the total number of push airdrop proxies created by this factory.
  The number of push airdrop proxies created.
  """
  allAirdropsLength: IATKPushAirdropFactoryAllAirdropsLengthOutput

  """
  Returns the address of the current ATKPushAirdrop logic contract (implementation).
  The address of the push airdrop implementation.
  """
  atkPushAirdropImplementation: String
  id: ID

  """
  Predicts the deployment address of a push airdrop proxy.
  The predicted address of the push airdrop proxy.
  """
  predictPushAirdropAddress(
    distributionCap: String!
    name: String!
    owner: String!
    root: String!
    token: String!
  ): IATKPushAirdropFactoryPredictPushAirdropAddressOutput
}

type IATKPushAirdropFactoryAllAirdropsLengthOutput {
  count: String
}

input IATKPushAirdropFactoryCreateInput {
  """
  The maximum tokens that can be distributed (0 for no cap)
  """
  distributionCap: String!

  """
  The human-readable name for the airdrop
  """
  name: String!

  """
  The initial owner of the contract (admin who can distribute tokens)
  """
  owner: String!

  """
  The Merkle root for verifying distributions
  """
  root: String!

  """
  The address of the ERC20 token to be distributed
  """
  token: String!
}

input IATKPushAirdropFactoryInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type IATKPushAirdropFactoryPredictPushAirdropAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKPushAirdropFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKPushAirdropFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKPushAirdropSetDistributionCapInput {
  """
  The new distribution cap (0 for no cap).
  """
  newDistributionCap_: String!
}

"""
Returns the transaction hash
"""
type IATKPushAirdropTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKPushAirdropTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKPushAirdropWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type IATKStableCoin {
  """
  Returns the address of the access manager for the token.
  The address of the access manager.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: IATKStableCoinComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: IATKStableCoinComplianceModulesOutput

  """
  Returns the decimals places of the token.
  """
  decimals: Int

  """
  Attempts to find the first valid collateral claim associated with the token contract's         own OnchainID identity, based on a pre-configured claim topic.
  This function is expected to perform several checks:      1. Retrieve claim IDs from the token's identity contract (`this.onchainID()`) for the configured `collateralProofTopic`.      2. For each claim, verify its issuer is trusted for that topic via the `identityRegistry`'s `issuersRegistry`.      3. Confirm the trusted issuer contract itself deems the claim valid (e.g., via `IClaimIssuer.isClaimValid`).      4. Decode the claim data, which is expected to contain a collateral `amount` and an `expiryTimestamp`.      5. Ensure the claim has not expired (i.e., `decodedExpiry > block.timestamp`).      The function should return the details of the *first* claim that successfully passes all these validations.      If no such claim is found, it should return zero values.      This is a `view` function, meaning it reads blockchain state but does not modify it, and thus      does not consume gas when called as a read-only operation from off-chain.
  The collateral amount (e.g., maximum permissible total supply) decoded from the valid claim data.                Returns 0 if no valid collateral claim is found., The expiry timestamp (Unix time) decoded from the valid claim data.                         Returns 0 if no valid claim is found or if the found claim has already expired., The address of the trusted `IClaimIssuer` contract that issued the valid collateral claim.                Returns `address(0)` if no valid claim is found.
  """
  findValidCollateralClaim: IATKStableCoinFindValidCollateralClaimOutput

  """
  Gets the amount of tokens that are specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The amount of tokens partially frozen for the address.
  """
  getFrozenTokens(userAddress: String!): String

  """
  Checks if a given account has a specific role.
  This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).
  A boolean value: `true` if the account has the specified role,         `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: IATKStableCoinIdentityRegistryOutput

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if the address is frozen, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: IATKStableCoinOnchainIDOutput

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  This is a `view` function, meaning it does not modify the blockchain state and does not      cost gas when called externally (e.g., from an off-chain script or another contract's view function).
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Retrieves a list of all currently active interfaces for this token.
  This function returns an array of bytes4 interface IDs that the token supports.
  An array of bytes4 interface IDs.
  """
  registeredInterfaces: IATKStableCoinRegisteredInterfacesOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input IATKStableCoinAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input IATKStableCoinApproveInput {
  spender: String!
  value: String!
}

input IATKStableCoinBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input IATKStableCoinBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input IATKStableCoinBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKStableCoinBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input IATKStableCoinBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKStableCoinBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input IATKStableCoinBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input IATKStableCoinBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

type IATKStableCoinComplianceModulesOutput {
  modulesList: [IATKStableCoinModulesListComplianceModulesOutput!]
}

type IATKStableCoinComplianceOutput {
  complianceContract: String
}

type IATKStableCoinFactory {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if the provided address is a valid token implementation.
  True if the address is a valid token implementation, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean
  predictStableCoinAddress(
    decimals_: Int!
    initialModulePairs_: [IATKStableCoinFactoryPredictStableCoinAddressInitialModulePairsInput!]!
    name_: String!
    symbol_: String!
  ): IATKStableCoinFactoryPredictStableCoinAddressOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String
}

input IATKStableCoinFactoryCreateStableCoinInput {
  countryCode_: Int!
  decimals_: Int!
  initialModulePairs_: [IATKStableCoinFactoryIATKStableCoinFactoryCreateStableCoinInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKStableCoinFactoryIATKStableCoinFactoryCreateStableCoinInitialModulePairsInput {
  module: String!
  params: String!
}

input IATKStableCoinFactoryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The address of the token implementation contract.
  """
  tokenImplementation_: String!
}

input IATKStableCoinFactoryPredictStableCoinAddressInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKStableCoinFactoryPredictStableCoinAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKStableCoinFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKStableCoinFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKStableCoinFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

input IATKStableCoinForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input IATKStableCoinForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input IATKStableCoinFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

input IATKStableCoinIATKStableCoinInitializeInitialModulePairsInput {
  module: String!
  params: String!
}

type IATKStableCoinIdentityRegistryOutput {
  registryContract: String
}

input IATKStableCoinInitializeInput {
  accessManager_: String!
  collateralTopicId_: String!
  compliance_: String!
  decimals_: Int!
  identityRegistry_: String!
  initialModulePairs_: [IATKStableCoinIATKStableCoinInitializeInitialModulePairsInput!]!
  name_: String!
  symbol_: String!
}

input IATKStableCoinMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type IATKStableCoinModulesListComplianceModulesOutput {
  module: String
  params: String
}

type IATKStableCoinOnchainIDOutput {
  idAddress: String
}

input IATKStableCoinRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input IATKStableCoinRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input IATKStableCoinRedeemInput {
  """
  The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.
  """
  amount: String!
}

type IATKStableCoinRegisteredInterfacesOutput {
  interfacesList: [String!]
}

input IATKStableCoinRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input IATKStableCoinSetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

input IATKStableCoinSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input IATKStableCoinSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input IATKStableCoinSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input IATKStableCoinSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type IATKStableCoinTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKStableCoinTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKStableCoinTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IATKStableCoinTransferInput {
  to: String!
  value: String!
}

input IATKStableCoinUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type IATKSystem {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Retrieves the smart contract address of the proxy for the compliance module.
  A proxy contract is an intermediary contract that delegates all function calls it receives to another contract, known as the implementation contract (which contains the actual logic). The primary benefit of using a proxy is that the underlying logic (implementation) can be upgraded without changing the address that other contracts or users interact with. This provides flexibility and allows for bug fixes or feature additions without disrupting the ecosystem. This function returns the stable, unchanging address of the compliance module's proxy contract. All interactions with the compliance module should go through this proxy address.
  The blockchain address of the compliance module's proxy contract.
  """
  compliance: IATKSystemComplianceOutput

  """
  Returns the address of the compliance module registry.
  The address of the compliance module registry contract.
  """
  complianceModuleRegistry: String

  """
  Returns the address of the contract identity implementation.
  The address of the contract identity implementation contract.
  """
  contractIdentityImplementation: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the smart contract address of the proxy for the identity factory module.
  This function returns the stable, unchanging address of the identity factory's proxy contract. To create new identities within the ATK Protocol, you should interact with this proxy address. It will delegate the identity creation requests to the current active logic implementation of the identity factory.
  The blockchain address of the identity factory module's proxy contract.
  """
  identityFactory: IATKSystemIdentityFactoryOutput

  """
  Returns the address of the identity implementation.
  The address of the identity implementation contract.
  """
  identityImplementation: String

  """
  Retrieves the smart contract address of the proxy for the identity registry module.
  Similar to the compliance proxy, this function returns the stable, unchanging address of the identity registry's proxy contract. To interact with the identity registry (e.g., to query identity information or register a new identity, depending on its features), you should use this proxy address. It will automatically forward your requests to the current logic implementation contract.
  The blockchain address of the identity registry module's proxy contract.
  """
  identityRegistry: IATKSystemIdentityRegistryOutput

  """
  Retrieves the smart contract address of the proxy for the identity registry storage module.
  This function returns the stable, unchanging address of the identity registry storage's proxy contract. All interactions related to storing or retrieving identity data should go through this proxy address. It ensures that calls are directed to the current logic implementation for identity data management.
  The blockchain address of the identity registry storage module's proxy contract.
  """
  identityRegistryStorage: IATKSystemIdentityRegistryStorageOutput

  """
  Returns the address of the token issuer identity contract.
  The address of the token issuer identity contract.
  """
  organisationIdentity: String

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the system addon registry.
  The address of the system addon registry contract.
  """
  systemAddonRegistry: String

  """
  Returns the address of the token access manager implementation.
  The address of the token access manager implementation contract.
  """
  tokenAccessManagerImplementation: String

  """
  Returns the address of the token factory registry.
  The address of the token factory registry contract.
  """
  tokenFactoryRegistry: String

  """
  Retrieves the smart contract address of the proxy for the topic scheme registry module.
  This function returns the stable, unchanging address of the topic scheme registry's proxy contract. To interact with the topic scheme registry (e.g., to register topic schemes or retrieve topic signatures), you should use this proxy address. It will forward calls to the current logic implementation.
  The blockchain address of the topic scheme registry module's proxy.
  """
  topicSchemeRegistry: IATKSystemTopicSchemeRegistryOutput

  """
  Retrieves the smart contract address of the proxy for the trusted issuers registry module.
  This function returns the stable, unchanging address of the trusted issuers registry's proxy contract. To interact with the trusted issuers registry (e.g., to check if an issuer is trusted or to add/remove issuers, depending on its features), you should use this proxy address. It will forward calls to the current logic implementation.
  The blockchain address of the trusted issuers registry module's proxy.
  """
  trustedIssuersRegistry: IATKSystemTrustedIssuersRegistryOutput
}

type IATKSystemAccessManaged {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID
}

"""
Returns the transaction hash
"""
type IATKSystemAccessManagedTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKSystemAccessManagedTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKSystemAccessManager {
  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Checks if a given account possesses any of the specified roles.
  This function is used to check if an account has at least one role from a list of roles.      This enables the onlyRoles modifier pattern where a function can be accessed by      accounts with a MANAGER_ROLE or any of the SYSTEM_ROLES.
  A boolean value: `true` if the `account` has at least one of the specified `roles`, `false` otherwise.
  """
  hasAnyRole(account: String!, roles: [String!]!): Boolean

  """
  Checks if a given account possesses a specific role.
  This is the primary function that token contracts will call to determine if an      action requested by an `account` is permitted based on its assigned `role`.      The implementation of this function within the manager contract will contain      the logic for storing and retrieving role assignments.
  A boolean value: `true` if the `account` has the specified `role`, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID
}

input IATKSystemAccessManagerBatchGrantRoleInput {
  """
  The addresses that will receive the role.
  """
  accounts: [String!]!

  """
  The role identifier to grant.
  """
  role: String!
}

input IATKSystemAccessManagerBatchRevokeRoleInput {
  """
  The addresses that will lose the role.
  """
  accounts: [String!]!

  """
  The role identifier to revoke.
  """
  role: String!
}

input IATKSystemAccessManagerGrantMultipleRolesInput {
  """
  The address that will receive all the roles.
  """
  account: String!

  """
  The array of role identifiers to grant.
  """
  roles: [String!]!
}

input IATKSystemAccessManagerGrantRoleInput {
  """
  The address that will receive the role.
  """
  account: String!

  """
  The role identifier to grant.
  """
  role: String!
}

input IATKSystemAccessManagerRenounceMultipleRolesInput {
  """
  The address that will confirm the renouncement.
  """
  callerConfirmation: String!

  """
  The array of role identifiers to renounce.
  """
  roles: [String!]!
}

input IATKSystemAccessManagerRenounceRoleInput {
  """
  The address that will renounce the role.
  """
  account: String!

  """
  The role identifier to renounce.
  """
  role: String!
}

input IATKSystemAccessManagerRevokeMultipleRolesInput {
  """
  The address that will lose all the roles.
  """
  account: String!

  """
  The array of role identifiers to revoke.
  """
  roles: [String!]!
}

input IATKSystemAccessManagerRevokeRoleInput {
  """
  The address that will lose the role.
  """
  account: String!

  """
  The role identifier to revoke.
  """
  role: String!
}

input IATKSystemAccessManagerSetRoleAdminInput {
  """
  The admin role to set for the given role.
  """
  adminRole: String!

  """
  The role identifier to set the admin role for.
  """
  role: String!
}

"""
Returns the transaction hash
"""
type IATKSystemAccessManagerTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKSystemAccessManagerTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKSystemAddonRegistry {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Returns the proxy address for a given addon type.
  The address of the addon proxy contract.
  """
  addon(addonTypeHash: String!): String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID
}

input IATKSystemAddonRegistryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the ATK system contract
  """
  systemAddress: String!
}

input IATKSystemAddonRegistryRegisterSystemAddonInput {
  """
  The implementation contract address for the addon
  """
  implementation: String!

  """
  The initialization data to pass to the addon proxy
  """
  initializationData: String!

  """
  The unique name identifier for the addon
  """
  name: String!
}

input IATKSystemAddonRegistrySetAddonImplementationInput {
  """
  The type hash of the addon to update
  """
  addonTypeHash: String!

  """
  The new implementation contract address
  """
  implementation: String!
}

"""
Returns the transaction hash
"""
type IATKSystemAddonRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKSystemAddonRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKSystemComplianceOutput {
  complianceProxyAddress: String
}

type IATKSystemFactory {
  """
  Gets the address of a `ATKSystem` instance at a specific index in the list of created systems.
  This allows retrieval of addresses for previously deployed `ATKSystem` contracts.
  address The blockchain address of the `ATKSystem` contract found at the given `index`.
  """
  atkSystems(index: String!): String

  """
  The default contract address for the compliance module's logic (implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial compliance implementation.
  address The default compliance implementation address.
  """
  defaultComplianceImplementation: String

  """
  The default contract address for the contract identity contract's logic (template/implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial contract identity implementation.
  address The default contract identity implementation address.
  """
  defaultContractIdentityImplementation: String

  """
  The default contract address for the identity factory module's logic (implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial identity factory implementation.
  address The default identity factory implementation address.
  """
  defaultIdentityFactoryImplementation: String

  """
  The default contract address for the standard identity contract's logic (template/implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial standard identity implementation.
  address The default identity implementation address.
  """
  defaultIdentityImplementation: String

  """
  The default contract address for the identity registry module's logic (implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial identity registry implementation.
  address The default identity registry implementation address.
  """
  defaultIdentityRegistryImplementation: String

  """
  The default contract address for the identity registry storage module's logic (implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial identity registry storage implementation.
  address The default identity registry storage implementation address.
  """
  defaultIdentityRegistryStorageImplementation: String

  """
  The default contract address for the token access manager contract's logic (implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial token access manager implementation.
  address The default token access manager implementation address.
  """
  defaultTokenAccessManagerImplementation: String

  """
  The default contract address for the topic scheme registry module's logic (implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial topic scheme registry implementation.
  address The default topic scheme registry implementation address.
  """
  defaultTopicSchemeRegistryImplementation: String

  """
  The default contract address for the trusted issuers registry module's logic (implementation).
  This address will be passed to newly created `ATKSystem` instances as the initial trusted issuers registry implementation.
  address The default trusted issuers registry implementation address.
  """
  defaultTrustedIssuersRegistryImplementation: String

  """
  The address of the trusted forwarder contract used by this factory for meta-transactions (ERC2771).
  This same forwarder address will also be passed to each new `ATKSystem` instance created by this factory, enabling them to support meta-transactions as well.
  address The factory forwarder address.
  """
  factoryForwarder: String

  """
  Gets the blockchain address of a `ATKSystem` instance at a specific index in the list of created systems.
  This allows retrieval of addresses for previously deployed `ATKSystem` contracts. It will revert with an `IndexOutOfBounds` error if the provided `index` is greater than or equal to the current number of created systems (i.e., if `index >= atkSystems.length`). This is a view function.
  address The blockchain address of the `ATKSystem` contract found at the given `index`.
  """
  getSystemAtIndex(index: String!): String

  """
  Gets the total number of `ATKSystem` instances that have been created by this factory.
  This is a view function, meaning it only reads blockchain state and does not cost gas to call (if called externally, not in a transaction).
  uint256 The count of `ATKSystem` instances currently stored in the `atkSystems` array.
  """
  getSystemCount: String
  id: ID
}

"""
Returns the transaction hash
"""
type IATKSystemFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKSystemFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKSystemIdentityFactoryOutput {
  identityFactoryProxyAddress: String
}

type IATKSystemIdentityRegistryOutput {
  identityRegistryProxyAddress: String
}

type IATKSystemIdentityRegistryStorageOutput {
  identityRegistryStorageProxyAddress: String
}

input IATKSystemInitializeInput {
  """
  The address of the access manager implementation.
  """
  accessManager_: String!

  """
  The address of the addon registry module implementation.
  """
  addonRegistryImplementation_: String!

  """
  The address of the compliance module implementation.
  """
  complianceImplementation_: String!

  """
  The address of the compliance module registry module implementation.
  """
  complianceModuleRegistryImplementation_: String!

  """
  The address of the contract identity module implementation.
  """
  contractIdentityImplementation_: String!

  """
  The address of the identity factory module implementation.
  """
  identityFactoryImplementation_: String!

  """
  The address of the standard identity module implementation.
  """
  identityImplementation_: String!

  """
  The address of the identity registry module implementation.
  """
  identityRegistryImplementation_: String!

  """
  The address of the identity registry storage module implementation.
  """
  identityRegistryStorageImplementation_: String!

  """
  The address of the initial administrator.
  """
  initialAdmin_: String!

  """
  The address of the token access manager module implementation.
  """
  tokenAccessManagerImplementation_: String!

  """
  The address of the token factory registry module implementation.
  """
  tokenFactoryRegistryImplementation_: String!

  """
  The address of the topic scheme registry module implementation.
  """
  topicSchemeRegistryImplementation_: String!

  """
  The address of the trusted issuers registry module implementation.
  """
  trustedIssuersRegistryImplementation_: String!
}

input IATKSystemIssueClaimByOrganisationInput {
  """
  The claim data
  """
  claimData: String!

  """
  The identity contract to receive the claim
  """
  targetIdentity: String!

  """
  The topic ID of the claim
  """
  topicId: String!
}

type IATKSystemTopicSchemeRegistryOutput {
  topicSchemeRegistryProxyAddress: String
}

"""
Returns the transaction hash
"""
type IATKSystemTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKSystemTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKSystemTrustedIssuersRegistryOutput {
  trustedIssuersRegistryProxyAddress: String
}

type IATKTimeBoundAirdrop {
  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Returns the end time when claims are no longer available.
  The timestamp when claims end.
  """
  endTime: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String

  """
  Returns the time remaining until the airdrop starts (if not started) or ends (if active).
  The number of seconds remaining, 0 if ended.
  """
  getTimeRemaining: IATKTimeBoundAirdropGetTimeRemainingOutput
  id: ID

  """
  Checks if the airdrop is currently active (within the time window).
  True if the current time is within the claim window.
  """
  isActive: IATKTimeBoundAirdropIsActiveOutput

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the start time when claims become available.
  The timestamp when claims can begin.
  """
  startTime: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String
}

input IATKTimeBoundAirdropBatchClaimInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proofs for each index.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input IATKTimeBoundAirdropClaimInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

type IATKTimeBoundAirdropFactory {
  """
  Returns the total number of time-bound airdrop proxies created by this factory.
  The number of time-bound airdrop proxies created.
  """
  allAirdropsLength: IATKTimeBoundAirdropFactoryAllAirdropsLengthOutput

  """
  Returns the address of the current ATKTimeBoundAirdrop logic contract (implementation).
  The address of the time-bound airdrop implementation.
  """
  atkTimeBoundAirdropImplementation: String
  id: ID

  """
  Predicts the deployment address of a time-bound airdrop proxy.
  The predicted address of the time-bound airdrop proxy.
  """
  predictTimeBoundAirdropAddress(
    endTime: String!
    name: String!
    owner: String!
    root: String!
    startTime: String!
    token: String!
  ): IATKTimeBoundAirdropFactoryPredictTimeBoundAirdropAddressOutput
}

type IATKTimeBoundAirdropFactoryAllAirdropsLengthOutput {
  count: String
}

input IATKTimeBoundAirdropFactoryCreateInput {
  """
  The timestamp when claims end
  """
  endTime: String!

  """
  The human-readable name for the airdrop
  """
  name: String!

  """
  The initial owner of the contract
  """
  owner: String!

  """
  The Merkle root for verifying claims
  """
  root: String!

  """
  The timestamp when claims can begin
  """
  startTime: String!

  """
  The address of the ERC20 token to be distributed
  """
  token: String!
}

input IATKTimeBoundAirdropFactoryInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type IATKTimeBoundAirdropFactoryPredictTimeBoundAirdropAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKTimeBoundAirdropFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTimeBoundAirdropFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKTimeBoundAirdropGetTimeRemainingOutput {
  timeRemaining: String
}

type IATKTimeBoundAirdropIsActiveOutput {
  active: Boolean
}

"""
Returns the transaction hash
"""
type IATKTimeBoundAirdropTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTimeBoundAirdropTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKTimeBoundAirdropWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type IATKTokenFactory {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if the provided address is a valid token implementation.
  True if the address is a valid token implementation, false otherwise.
  """
  isValidTokenImplementation(tokenImplementation_: String!): Boolean

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the token implementation contract.
  tokenImplementation The address of the token implementation contract.
  """
  tokenImplementation: String
}

input IATKTokenFactoryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!

  """
  The address of the token implementation contract.
  """
  tokenImplementation_: String!
}

type IATKTokenFactoryRegistry {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Retrieves the factory address for a given factory type.
  The address of the factory proxy for the given type.
  """
  tokenFactory(factoryTypeHash: String!): String
}

input IATKTokenFactoryRegistryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!

  """
  The address of the ATK system contract
  """
  systemAddress: String!
}

input IATKTokenFactoryRegistryRegisterTokenFactoryInput {
  """
  The address of the factory implementation contract
  """
  factoryImplementation: String!

  """
  The name of the token factory
  """
  name: String!

  """
  The address of the token implementation contract
  """
  tokenImplementation: String!
}

input IATKTokenFactoryRegistrySetTokenFactoryImplementationInput {
  """
  The type hash of the factory to update
  """
  factoryTypeHash: String!

  """
  The new implementation address
  """
  implementation: String!
}

"""
Returns the transaction hash
"""
type IATKTokenFactoryRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTokenFactoryRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

"""
Returns the transaction hash
"""
type IATKTokenFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTokenFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKTokenSale {
  """
  Returns the base price of the token.
  The base price in smallest units.
  """
  basePrice: String

  """
  Returns various sale parameters.
  Number of tokens remaining for sale, Timestamp when the sale ends, Timestamp when the sale starts, Total number of tokens sold.
  """
  getSaleInfo: IATKTokenSaleGetSaleInfoOutput

  """
  Returns the token price in a specific payment currency.
  The price in the specified currency.
  """
  getTokenPrice(
    amount: String!
    currency: String!
  ): IATKTokenSaleGetTokenPriceOutput

  """
  Returns the maximum number of tokens that can be sold.
  The hard cap amount.
  """
  hardCap: String
  id: ID

  """
  Returns the maximum purchase amount per buyer in tokens.
  The maximum purchase amount.
  """
  maxPurchase: String

  """
  Returns the minimum purchase amount in tokens.
  The minimum purchase amount.
  """
  minPurchase: String

  """
  Returns the payment currency configuration.
  Whether the currency is accepted, The price ratio for the currency.
  """
  paymentCurrencies(currency: String!): IATKTokenSalePaymentCurrenciesOutput

  """
  Returns the amount of tokens a buyer has purchased.
  Amount of tokens purchased.
  """
  purchasedAmount(buyer: String!): IATKTokenSalePurchasedAmountOutput

  """
  Returns the end time of the sale.
  The sale end timestamp.
  """
  saleEndTime: String

  """
  Returns the start time of the sale.
  The sale start timestamp.
  """
  saleStartTime: String

  """
  Returns the current sale status.
  Current status of the sale (e.g., setup, active, paused, ended).
  """
  saleStatus: IATKTokenSaleSaleStatusOutput

  """
  Returns the SMART token being sold.
  The SMART token contract.
  """
  token: String

  """
  Returns the total number of tokens sold so far.
  The total sold amount.
  """
  totalSold: String

  """
  Returns the vesting configuration.
  Vesting cliff in seconds, Vesting duration in seconds, Whether vesting is enabled, Vesting start timestamp.
  """
  vesting: IATKTokenSaleVestingOutput

  """
  Returns the amount of tokens a buyer can withdraw based on vesting.
  Amount of tokens withdrawable.
  """
  withdrawableAmount(buyer: String!): IATKTokenSaleWithdrawableAmountOutput
}

input IATKTokenSaleAddPaymentCurrencyInput {
  """
  Address of the ERC20 token to be used as payment
  """
  currency: String!

  """
  Price ratio compared to the base price (scaled by 10^18)
  """
  priceRatio: String!
}

input IATKTokenSaleBuyTokensWithERC20Input {
  """
  Amount of payment currency to spend
  """
  amount: String!

  """
  Address of the ERC20 token used for payment
  """
  currency: String!
}

input IATKTokenSaleConfigureVestingInput {
  """
  Duration before any tokens can be claimed (in seconds)
  """
  vestingCliff: String!

  """
  Duration of the full vesting period in seconds
  """
  vestingDuration: String!

  """
  Timestamp when vesting begins
  """
  vestingStart: String!
}

type IATKTokenSaleGetSaleInfoOutput {
  remainingTokens: String
  saleEndTime: String
  saleStartTime: String
  soldAmount: String
}

type IATKTokenSaleGetTokenPriceOutput {
  price: String
}

input IATKTokenSaleInitializeInput {
  """
  Base price of tokens in smallest units (e.g. wei, satoshi)
  """
  basePrice: String!

  """
  Maximum amount of tokens to be sold
  """
  hardCap: String!

  """
  Duration of the sale in seconds
  """
  saleDuration: String!

  """
  Timestamp when the sale starts
  """
  saleStart: String!

  """
  The address of the SMART token being sold
  """
  tokenAddress: String!
}

type IATKTokenSalePaymentCurrenciesOutput {
  accepted: Boolean
  priceRatio: String
}

type IATKTokenSalePurchasedAmountOutput {
  purchased: String
}

input IATKTokenSaleRemovePaymentCurrencyInput {
  """
  Address of the ERC20 token to remove
  """
  currency: String!
}

type IATKTokenSaleSaleStatusOutput {
  status: Int
}

input IATKTokenSaleSetPurchaseLimitsInput {
  """
  Maximum amount of tokens that can be purchased per buyer
  """
  maxPurchase: String!

  """
  Minimum amount of tokens that can be purchased
  """
  minPurchase: String!
}

"""
Returns the transaction hash
"""
type IATKTokenSaleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTokenSaleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKTokenSaleVestingOutput {
  cliff: String
  duration: String
  enabled: Boolean
  startTime: String
}

input IATKTokenSaleWithdrawFundsInput {
  """
  Address of the currency to withdraw (address(0) for native currency)
  """
  currency: String!

  """
  Address to receive the funds
  """
  recipient: String!
}

type IATKTokenSaleWithdrawableAmountOutput {
  withdrawable: String
}

type IATKTopicSchemeRegistry {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Gets all registered topic IDs.
  Array of all registered topic scheme identifiers.
  """
  getAllTopicIds: IATKTopicSchemeRegistryGetAllTopicIdsOutput

  """
  Gets the topic ID for a given name.
  The unique identifier generated from the name.
  """
  getTopicId(name: String!): IATKTopicSchemeRegistryGetTopicIdOutput

  """
  Gets the total number of registered topic schemes.
  The number of registered topic schemes.
  """
  getTopicSchemeCount: IATKTopicSchemeRegistryGetTopicSchemeCountOutput

  """
  Gets the signature for a specific topic scheme by ID.
  The signature string for the topic scheme.
  """
  getTopicSchemeSignature(
    topicId: String!
  ): IATKTopicSchemeRegistryGetTopicSchemeSignatureOutput

  """
  Gets the signature for a specific topic scheme by name.
  The signature string for the topic scheme.
  """
  getTopicSchemeSignatureByName(
    name: String!
  ): IATKTopicSchemeRegistryGetTopicSchemeSignatureByNameOutput

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean

  """
  Checks if a topic scheme exists by ID.
  True if the topic scheme is registered, false otherwise.
  """
  hasTopicScheme(topicId: String!): IATKTopicSchemeRegistryHasTopicSchemeOutput

  """
  Checks if a topic scheme exists by name.
  True if the topic scheme is registered, false otherwise.
  """
  hasTopicSchemeByName(
    name: String!
  ): IATKTopicSchemeRegistryHasTopicSchemeByNameOutput
  id: ID

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input IATKTopicSchemeRegistryBatchRegisterTopicSchemesInput {
  """
  Array of human-readable names for the topic schemes
  """
  names: [String!]!

  """
  Array of signature strings used for encoding/decoding data
  """
  signatures: [String!]!
}

type IATKTopicSchemeRegistryGetAllTopicIdsOutput {
  topicIds: [String!]
}

type IATKTopicSchemeRegistryGetTopicIdOutput {
  topicId: String
}

type IATKTopicSchemeRegistryGetTopicSchemeCountOutput {
  count: String
}

type IATKTopicSchemeRegistryGetTopicSchemeSignatureByNameOutput {
  signature: String
}

type IATKTopicSchemeRegistryGetTopicSchemeSignatureOutput {
  signature: String
}

type IATKTopicSchemeRegistryHasTopicSchemeByNameOutput {
  exists: Boolean
}

type IATKTopicSchemeRegistryHasTopicSchemeOutput {
  exists: Boolean
}

input IATKTopicSchemeRegistryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

input IATKTopicSchemeRegistryRegisterTopicSchemeInput {
  """
  The human-readable name for the topic scheme
  """
  name: String!

  """
  The signature string used for encoding/decoding data
  """
  signature: String!
}

input IATKTopicSchemeRegistryRemoveTopicSchemeInput {
  """
  The name of the topic scheme to remove
  """
  name: String!
}

"""
Returns the transaction hash
"""
type IATKTopicSchemeRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTopicSchemeRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKTopicSchemeRegistryUpdateTopicSchemeInput {
  """
  The name of the topic scheme to update
  """
  name: String!

  """
  The new signature string
  """
  newSignature: String!
}

type IATKTrustedIssuersRegistry {
  """
  Returns the address of the access manager.
  The address of the access manager.
  """
  accessManager: String

  """
  Gets all the claim topic of trusted claim issuer.
  Function for getting all the claim topic of trusted claim issuer  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.
  The set of claim topics that the trusted issuer is allowed to emit.
  """
  getTrustedIssuerClaimTopics(_trustedIssuer: String!): [String!]

  """
  Gets all the trusted claim issuers stored.
  Function for getting all the trusted claim issuers stored.
  array of all claim issuers registered.
  """
  getTrustedIssuers: [String!]

  """
  Gets all the trusted issuer allowed for a given claim topic.
  Function for getting all the trusted issuer allowed for a given claim topic.
  array of all claim issuer addresses that are allowed for the given claim topic.
  """
  getTrustedIssuersForClaimTopic(claimTopic: String!): [String!]

  """
  Checks if the trusted claim issuer is allowed to emit a certain claim topic.
  Function for checking if the trusted claim issuer is allowed  to emit a certain claim topic.
  true if the issuer is trusted for this claim topic.
  """
  hasClaimTopic(_claimTopic: String!, _issuer: String!): Boolean

  """
  Checks if an account has a specific role.
  True if the account has the role, false otherwise.
  """
  hasSystemRole(account: String!, role: String!): Boolean
  id: ID

  """
  Checks if the ClaimIssuer contract is trusted.
  Checks if the ClaimIssuer contract is trusted.
  true if the issuer is trusted, false otherwise.
  """
  isTrustedIssuer(_issuer: String!): Boolean

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input IATKTrustedIssuersRegistryAddTrustedIssuerInput {
  """
  the set of claim topics that the trusted issuer is allowed to emit  This function can only be called by the owner of the Trusted Issuers Registry contract  emits a `TrustedIssuerAdded` event
  """
  _claimTopics: [String!]!

  """
  The ClaimIssuer contract address of the trusted claim issuer.
  """
  _trustedIssuer: String!
}

input IATKTrustedIssuersRegistryInitializeInput {
  """
  The address of the access manager
  """
  accessManager: String!
}

input IATKTrustedIssuersRegistryRemoveTrustedIssuerInput {
  """
  the claim issuer to remove.  This function can only be called by the owner of the Trusted Issuers Registry contract  emits a `TrustedIssuerRemoved` event
  """
  _trustedIssuer: String!
}

"""
Returns the transaction hash
"""
type IATKTrustedIssuersRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTrustedIssuersRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKTrustedIssuersRegistryUpdateIssuerClaimTopicsInput {
  """
  the set of claim topics that the trusted issuer is allowed to emit  This function can only be called by the owner of the Trusted Issuers Registry contract  emits a `ClaimTopicsUpdated` event
  """
  _claimTopics: [String!]!

  """
  the claim issuer to update.
  """
  _trustedIssuer: String!
}

type IATKTypedImplementationRegistry {
  id: ID

  """
  Returns the implementation address for a given type hash.
  The address of the implementation contract for the given type.
  """
  implementation(typeHash: String!): String

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

"""
Returns the transaction hash
"""
type IATKTypedImplementationRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKTypedImplementationRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKVaultFactory {
  """
  Returns the address of the current ATKVault logic contract (implementation).
  This function is expected to be available on the factory contract.
  The address of the ATKVault implementation.
  """
  atkVaultImplementation: String
  id: ID

  """
  Predicts the address where an ATK Vault contract would be deployed.
  The predicted address of the vault.
  """
  predictVaultAddress(
    initialOwner: String!
    required: String!
    salt: String!
    signers: [String!]!
  ): IATKVaultFactoryPredictVaultAddressOutput
}

input IATKVaultFactoryCreateVaultInput {
  """
  Country code for compliance purposes
  """
  country: Int!

  """
  Address that will have admin role
  """
  initialOwner: String!

  """
  Number of confirmations required to execute a transaction
  """
  required: String!

  """
  Salt value for deterministic address generation
  """
  salt: String!

  """
  Array of initial signer addresses
  """
  signers: [String!]!
}

input IATKVaultFactoryInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type IATKVaultFactoryPredictVaultAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKVaultFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKVaultFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKVestingAirdrop {
  """
  Returns the claim tracker contract.
  The claim tracker contract.
  """
  claimTracker: String

  """
  Gets the amount already claimed for a specific index.
  claimedAmount The amount already claimed for this index.
  """
  getClaimedAmount(index: String!): String

  """
  Returns the initialization timestamp for a specific claim index.
  timestamp The timestamp when vesting was initialized for this index (0 if not initialized).
  """
  getInitializationTimestamp(index: String!): String
  id: ID

  """
  Returns the initialization deadline timestamp.
  The timestamp after which no new vesting can be initialized.
  """
  initializationDeadline: String

  """
  Checks if a claim has been fully claimed for a specific index.
  claimed True if the index has been fully claimed, false otherwise.
  """
  isClaimed(index: String!, totalAmount: String!): Boolean

  """
  Checks if vesting has been initialized for a specific index.
  initialized True if vesting has been initialized for this index.
  """
  isVestingInitialized(index: String!): Boolean

  """
  Returns the Merkle root for verifying airdrop claims.
  The Merkle root for verifying airdrop claims.
  """
  merkleRoot: String

  """
  Returns the name of this airdrop.
  The human-readable name of the airdrop.
  """
  name: String

  """
  Returns the token being distributed in this airdrop.
  The ERC20 token being distributed.
  """
  token: String

  """
  Returns the current vesting strategy contract.
  The vesting strategy contract.
  """
  vestingStrategy: String
}

input IATKVestingAirdropBatchClaimInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proofs for each index.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input IATKVestingAirdropBatchInitializeVestingInput {
  """
  The indices of the claims in the Merkle tree.
  """
  indices: [String!]!

  """
  The Merkle proof arrays for verification of each index.
  """
  merkleProofs: [[String!]!]!

  """
  The total amounts allocated for each index.
  """
  totalAmounts: [String!]!
}

input IATKVestingAirdropClaimInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

type IATKVestingAirdropFactory {
  """
  Returns the total number of vesting airdrop proxy contracts created by this factory.
  The total number of vesting airdrop proxy contracts created.
  """
  allAirdropsLength: IATKVestingAirdropFactoryAllAirdropsLengthOutput

  """
  Returns the address of the current ATKVestingAirdrop logic contract (implementation).
  This function is expected to be available on the factory contract. It's typically created automatically if the factory has a public state variable named `atkVestingAirdropImplementation`.
  The address of the ATKVestingAirdrop implementation contract.
  """
  atkVestingAirdropImplementation: String
  id: ID

  """
  Predicts the deployment address of a vesting airdrop proxy.
  The predicted address of the vesting airdrop proxy.
  """
  predictVestingAirdropAddress(
    initializationDeadline: String!
    name: String!
    owner: String!
    root: String!
    token: String!
    vestingStrategy: String!
  ): IATKVestingAirdropFactoryPredictVestingAirdropAddressOutput
}

type IATKVestingAirdropFactoryAllAirdropsLengthOutput {
  count: String
}

input IATKVestingAirdropFactoryCreateInput {
  """
  The timestamp after which no new vesting can be initialized.
  """
  initializationDeadline: String!

  """
  The human-readable name for this airdrop.
  """
  name: String!

  """
  The initial owner of the contract.
  """
  owner: String!

  """
  The Merkle root for verifying claims.
  """
  root: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token: String!

  """
  The address of the vesting strategy contract for vesting calculations.
  """
  vestingStrategy: String!
}

input IATKVestingAirdropFactoryInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

type IATKVestingAirdropFactoryPredictVestingAirdropAddressOutput {
  predictedAddress: String
}

"""
Returns the transaction hash
"""
type IATKVestingAirdropFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKVestingAirdropFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKVestingAirdropInitializeInput {
  """
  The timestamp after which no new vesting can be initialized.
  """
  initializationDeadline_: String!

  """
  The human-readable name for this airdrop.
  """
  name_: String!

  """
  The initial owner of the contract.
  """
  owner_: String!

  """
  The Merkle root for verifying claims.
  """
  root_: String!

  """
  The address of the ERC20 token to be distributed.
  """
  token_: String!

  """
  The address of the vesting strategy contract for vesting calculations.
  """
  vestingStrategy_: String!
}

input IATKVestingAirdropInitializeVestingInput {
  """
  The index of the claim in the Merkle tree.
  """
  index: String!

  """
  The Merkle proof array for verification.
  """
  merkleProof: [String!]!

  """
  The total amount allocated for this index.
  """
  totalAmount: String!
}

input IATKVestingAirdropSetVestingStrategyInput {
  """
  The address of the new vesting strategy contract.
  """
  newVestingStrategy_: String!
}

"""
Returns the transaction hash
"""
type IATKVestingAirdropTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKVestingAirdropTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IATKVestingAirdropWithdrawTokensInput {
  """
  The address to send the withdrawn tokens to.
  """
  to: String!
}

type IATKVestingStrategy {
  """
  Calculates the amount claimable based on the strategy's vesting parameters.
  The amount that can be claimed now.
  """
  calculateClaimableAmount(
    account: String!
    claimedAmount: String!
    totalAmount: String!
    vestingStartTime: String!
  ): IATKVestingStrategyCalculateClaimableAmountOutput
  id: ID

  """
  Returns whether this strategy supports multiple claims (vesting).
  True if the strategy supports multiple claims over time.
  """
  supportsMultipleClaims: IATKVestingStrategySupportsMultipleClaimsOutput

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

type IATKVestingStrategyCalculateClaimableAmountOutput {
  claimableAmount: String
}

type IATKVestingStrategySupportsMultipleClaimsOutput {
  supportsMultiple: Boolean
}

"""
Returns the transaction hash
"""
type IATKVestingStrategyTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKVestingStrategyTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IATKXvPSettlement {
  """
  Returns whether an account has approved the settlement.
  True if the account has approved the settlement.
  """
  approvals(account: String!): Boolean

  """
  Returns whether the settlement should auto-execute when all approvals are received.
  True if auto-execute is enabled.
  """
  autoExecute: Boolean

  """
  Returns whether the settlement has been cancelled.
  True if the settlement has been cancelled.
  """
  cancelled: Boolean

  """
  Returns the timestamp when the settlement was created.
  The creation timestamp.
  """
  createdAt: String

  """
  Returns the cutoff date after which the settlement expires.
  The cutoff date timestamp.
  """
  cutoffDate: String

  """
  Returns whether the settlement has been executed.
  True if the settlement has been executed.
  """
  executed: Boolean

  """
  Returns all flows in the settlement.
  Array of all flows.
  """
  flows: [IATKXvPSettlementTuple0FlowsOutput!]
  id: ID

  """
  Checks if all parties have approved the settlement.
  True if all parties have approved.
  """
  isFullyApproved: Boolean

  """
  Returns the name of the settlement.
  The settlement name.
  """
  name: String

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

type IATKXvPSettlementFactory {
  id: ID

  """
  Checks if an address was deployed by this factory.
  True if the address was created by this factory, false otherwise.
  """
  isAddressDeployed(settlement: String!): Boolean
  predictAddress(
    autoExecute: Boolean!
    cutoffDate: String!
    flows: [IATKXvPSettlementFactoryPredictAddressFlowsInput!]!
    name: String!
  ): IATKXvPSettlementFactoryPredictAddressOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String

  """
  Returns the address of the current XvPSettlement implementation contract.
  The address of the XvPSettlement logic contract.
  """
  xvpSettlementImplementation: String
}

input IATKXvPSettlementFactoryCreateInput {
  autoExecute: Boolean!
  cutoffDate: String!
  flows: [IATKXvPSettlementFactoryIATKXvPSettlementFactoryCreateFlowsInput!]!
  name: String!
}

input IATKXvPSettlementFactoryIATKXvPSettlementFactoryCreateFlowsInput {
  amount: String!
  asset: String!
  from: String!
  to: String!
}

input IATKXvPSettlementFactoryInitializeInput {
  """
  The address of the access manager.
  """
  accessManager: String!

  """
  The address of the `IATKSystem` contract.
  """
  systemAddress: String!
}

input IATKXvPSettlementFactoryPredictAddressFlowsInput {
  amount: String!
  asset: String!
  from: String!
  to: String!
}

type IATKXvPSettlementFactoryPredictAddressOutput {
  predicted: String
}

"""
Returns the transaction hash
"""
type IATKXvPSettlementFactoryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKXvPSettlementFactoryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

"""
Returns the transaction hash
"""
type IATKXvPSettlementTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IATKXvPSettlementTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

"""
Returns all flows in the settlement.
Array of all flows.
"""
type IATKXvPSettlementTuple0FlowsOutput {
  amount: String
  asset: String
  from: String
  to: String
}

type IClaimAuthorizer {
  id: ID

  """
  Checks if an issuer is authorized to add a claim for a specific topic.
  This function should be implemented to perform topic-specific authorization logic.      For example, a trusted issuer registry might check if the issuer is registered      and authorized for the specific claim topic.
  True if the issuer is authorized to add claims for this topic, false otherwise.
  """
  isAuthorizedToAddClaim(issuer: String!, topic: String!): Boolean

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

"""
Returns the transaction hash
"""
type IClaimAuthorizerTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IClaimAuthorizerTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IContractIdentity {
  """
  Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  getClaim(_claimId: String!): IContractIdentityGetClaimOutput

  """
  Returns an array of claim IDs by topic.
  """
  getClaimIdsByTopic(_topic: String!): IContractIdentityGetClaimIdsByTopicOutput

  """
  Returns the full key data, if present in the identity.
  """
  getKey(_key: String!): IContractIdentityGetKeyOutput

  """
  Returns the list of purposes associated with a key.
  """
  getKeyPurposes(_key: String!): IContractIdentityGetKeyPurposesOutput

  """
  Returns an array of public key bytes32 held by this identity.
  """
  getKeysByPurpose(_purpose: String!): IContractIdentityGetKeysByPurposeOutput
  id: ID

  """
  Returns revocation status of a claim.
  isRevoked true if the claim is revoked and false otherwise.
  """
  isClaimRevoked(_sig: String!): Boolean

  """
  Checks if a claim is valid.
  claimValid true if the claim is valid, false otherwise.
  """
  isClaimValid(
    _identity: String!
    claimTopic: String!
    data: String!
    sig: String!
  ): Boolean

  """
  Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.
  """
  keyHasPurpose(
    _key: String!
    _purpose: String!
  ): IContractIdentityKeyHasPurposeOutput
}

input IContractIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input IContractIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input IContractIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input IContractIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type IContractIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type IContractIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type IContractIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type IContractIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type IContractIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

input IContractIdentityIssueClaimToInput {
  """
  The claim data
  """
  data: String!

  """
  The identity contract to add the claim to
  """
  subject: String!

  """
  The claim topic
  """
  topic: String!

  """
  The claim URI
  """
  uri: String!
}

type IContractIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input IContractIdentityRemoveClaimInput {
  _claimId: String!
}

input IContractIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

input IContractIdentityRevokeClaimBySignatureInput {
  """
  the signature of the claim
  """
  signature: String!
}

input IContractIdentityRevokeClaimInput {
  """
  the id of the claim
  """
  _claimId: String!

  """
  the address of the identity contract
  """
  _identity: String!
}

"""
Returns the transaction hash
"""
type IContractIdentityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IContractIdentityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IContractWithIdentity {
  """
  Permission check: can `actor` add a claim?.
  True if the actor can add claims, false otherwise.
  """
  canAddClaim(actor: String!): Boolean

  """
  Permission check: can `actor` remove a claim?.
  True if the actor can remove claims, false otherwise.
  """
  canRemoveClaim(actor: String!): Boolean
  id: ID

  """
  Returns the ONCHAINID associated with this contract.
  The address of the ONCHAINID (IIdentity contract).
  """
  onchainID: String

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

"""
Returns the transaction hash
"""
type IContractWithIdentityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IContractWithIdentityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IERC3643 {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the Compliance contract linked to the token.
  Returns the Compliance contract linked to the token.
  The Compliance contract interface.
  """
  compliance: String

  """
  Returns the decimals places of the token.
  """
  decimals: Int

  """
  Returns the amount of tokens that are partially frozen on a wallet.
  Returns the amount of tokens that are partially frozen on a wallet  the amount of frozen tokens is always <= to the total balance of the wallet.
  The amount of frozen tokens for the specified address.
  """
  getFrozenTokens(_userAddress: String!): String
  id: ID

  """
  Returns the Identity Registry linked to the token.
  Returns the Identity Registry linked to the token.
  The Identity Registry contract interface.
  """
  identityRegistry: String

  """
  Returns the freezing status of a wallet.
  Returns the freezing status of a wallet  if isFrozen returns `true` the wallet is frozen  if isFrozen returns `false` the wallet is not frozen  isFrozen returning `true` doesn't mean that the balance is free, tokens could be blocked by  a partial freeze or the whole token could be blocked by pause.
  True if the wallet is frozen, false otherwise.
  """
  isFrozen(_userAddress: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the address of the onchainID of the token.
  Returns the address of the onchainID of the token. the onchainID of the token gives all the information available about the token and is managed by the token issuer or his agent.
  The address of the token's onchainID.
  """
  onchainID: String

  """
  Returns true if the contract is paused, and false otherwise.
  Returns true if the contract is paused, and false otherwise.
  True if the contract is paused, false otherwise.
  """
  paused: Boolean

  """
  Returns the symbol of the token.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the TREX version of the token.
  Returns the TREX version of the token.
  The version string of the token.
  """
  version: String
}

input IERC3643ApproveInput {
  spender: String!
  value: String!
}

input IERC3643BatchBurnInput {
  """
  The number of tokens to burn from the corresponding wallets.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from burning tokens.  Emits _userAddresses.length `Transfer` events upon successful batch burn.  To execute this function, the calling agent must not be restricted from burning tokens.  If the agent is restricted from this capability, the function call will fail.
  """
  _amounts: [String!]!

  """
  The addresses of the wallets concerned by the burn.
  """
  _userAddresses: [String!]!
}

input IERC3643BatchForcedTransferInput {
  """
  The number of tokens to transfer to the corresponding receiver.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from initiating forced transfers in batch.  Emits `TokensUnfrozen` events for each `_amounts[i]` that exceeds the free balance of `_fromList[i]`.  Also emits _fromList.length `Transfer` events upon successful batch transfer.  To execute this function, the calling agent must not be restricted from initiating forced transfer.  If the agent is restricted from this capability, the function call will fail.
  """
  _amounts: [String!]!

  """
  The addresses of the senders.
  """
  _fromList: [String!]!

  """
  The addresses of the receivers.
  """
  _toList: [String!]!
}

input IERC3643BatchFreezePartialTokensInput {
  """
  The amount of tokens to freeze on the corresponding address.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from partially freezing tokens.  Emits _userAddresses.length `TokensFrozen` events upon successful batch partial freezing.  To execute this function, the calling agent must not be restricted from partially freezing tokens.  If the agent is restricted from this capability, the function call will fail.
  """
  _amounts: [String!]!

  """
  The addresses on which tokens need to be partially frozen.
  """
  _userAddresses: [String!]!
}

input IERC3643BatchMintInput {
  """
  The number of tokens to mint to the corresponding receiver.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from minting tokens.  Emits _toList.length `Transfer` events upon successful batch minting.  To execute this function, the calling agent must not be restricted from minting tokens.  If the agent is restricted from this capability, the function call will fail.
  """
  _amounts: [String!]!

  """
  The addresses of the receivers.
  """
  _toList: [String!]!
}

input IERC3643BatchSetAddressFrozenInput {
  """
  Frozen status of the corresponding address.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from setting frozen addresses.  Emits _userAddresses.length `AddressFrozen` events upon successful batch update of frozen status.  To execute this function, the calling agent must not be restricted from setting frozen addresses.  If the agent is restricted from this capability, the function call will fail.
  """
  _freeze: [Boolean!]!

  """
  The addresses for which to update frozen status.
  """
  _userAddresses: [String!]!
}

input IERC3643BatchTransferInput {
  """
  The number of tokens to transfer to the corresponding receiver  emits _toList.length `Transfer` events
  """
  _amounts: [String!]!

  """
  The addresses of the receivers
  """
  _toList: [String!]!
}

input IERC3643BatchUnfreezePartialTokensInput {
  """
  The amount of tokens to unfreeze on the corresponding address.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from partially freezing tokens.  Emits _userAddresses.length `TokensUnfrozen` events upon successful batch partial unfreezing.  To execute this function, the calling agent must not be restricted from partially freezing tokens.  If the agent is restricted from this capability, the function call will fail.
  """
  _amounts: [String!]!

  """
  The addresses on which tokens need to be partially unfrozen.
  """
  _userAddresses: [String!]!
}

input IERC3643BurnInput {
  """
  Amount of tokens to burn.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from burning tokens.  Emits a `TokensUnfrozen` event if `_amount` exceeds the free balance of `_userAddress`.  Also emits a `Transfer` event.  To execute this function, the calling agent must not be restricted from burning tokens.  If the agent is restricted from this capability, the function call will fail.
  """
  _amount: String!

  """
  Address to burn the tokens from.
  """
  _userAddress: String!
}

type IERC3643ClaimTopicsRegistry {
  """
  Get the trusted claim topics for the security token.
  Get the trusted claim topics for the security token.
  Array of trusted claim topics.
  """
  getClaimTopics: [String!]
  id: ID
}

input IERC3643ClaimTopicsRegistryAddClaimTopicInput {
  """
  The claim topic index
  """
  _claimTopic: String!
}

input IERC3643ClaimTopicsRegistryRemoveClaimTopicInput {
  """
  The claim topic index
  """
  _claimTopic: String!
}

"""
Returns the transaction hash
"""
type IERC3643ClaimTopicsRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IERC3643ClaimTopicsRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IERC3643Compliance {
  """
  Checks if a transfer is compliant with all bound modules.
  checks that the transfer is compliant.  default compliance always returns true  READ ONLY FUNCTION, this function cannot be used to increment  counters, emit events, ...
  True if the transfer is compliant, false otherwise.
  """
  canTransfer(_amount: String!, _from: String!, _to: String!): Boolean

  """
  Gets the address of the token bound to this compliance contract.
  getter for the address of the token bound  returns the address of the token.
  The address of the bound token.
  """
  getTokenBound: String
  id: ID

  """
  Checks if a token is bound to this compliance contract.
  True if the token is bound, false otherwise.
  """
  isTokenBound(_token: String!): Boolean
}

input IERC3643ComplianceBindTokenInput {
  """
  address of the token to bind  This function can be called ONLY by the owner of the compliance contract  Emits a TokenBound event
  """
  _token: String!
}

input IERC3643ComplianceCreatedInput {
  """
  The amount of tokens involved in the minting  This function calls moduleMintAction() on each module bound to the compliance contract
  """
  _amount: String!

  """
  The address of the receiver
  """
  _to: String!
}

input IERC3643ComplianceDestroyedInput {
  """
  The amount of tokens involved in the burn  This function calls moduleBurnAction() on each module bound to the compliance contract
  """
  _amount: String!

  """
  The address on which tokens are burnt
  """
  _from: String!
}

"""
Returns the transaction hash
"""
type IERC3643ComplianceTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IERC3643ComplianceTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643ComplianceTransferredInput {
  """
  The amount of tokens involved in the transfer  This function calls moduleTransferAction() on each module bound to the compliance contract
  """
  _amount: String!

  """
  The address of the sender
  """
  _from: String!

  """
  The address of the receiver
  """
  _to: String!
}

input IERC3643ComplianceUnbindTokenInput {
  """
  address of the token to unbind  This function can be called ONLY by the owner of the compliance contract  Emits a TokenUnbound event
  """
  _token: String!
}

input IERC3643ForcedTransferInput {
  """
  The number of tokens to be transferred.
  """
  _amount: String!

  """
  The address of the sender.
  """
  _from: String!

  """
  The address of the receiver.
  """
  _to: String!
}

input IERC3643FreezePartialTokensInput {
  """
  The amount of tokens to be frozen.
  """
  _amount: String!

  """
  The address for which to freeze tokens.
  """
  _userAddress: String!
}

type IERC3643IdentityRegistry {
  """
  Checks if a wallet has an identity registered.
  This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.
  bool 'True' if the address is contained in the Identity Registry, 'false' if not.
  """
  contains(_userAddress: String!): Boolean
  id: ID

  """
  Returns the onchainID of an investor.
  Returns the onchainID of an investor.
  IIdentity The identity contract of the investor.
  """
  identity(_userAddress: String!): String

  """
  Returns the linked IdentityRegistryStorage contract.
  Returns the IdentityRegistryStorage linked to the current IdentityRegistry.
  IERC3643IdentityRegistryStorage The address of the IdentityRegistryStorage contract.
  """
  identityStorage: String

  """
  Returns the country code of an investor.
  Returns the country code of an investor.
  uint16 The country code of the investor (ISO 3166-1 numeric code).
  """
  investorCountry(_userAddress: String!): Int

  """
  Verifies if a user has the required claims.
  This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from trusted issuers registry and from the claim topics registry.
  bool 'True' if the address is verified, 'false' if not.
  """
  isVerified(_userAddress: String!): Boolean

  """
  Returns the linked TrustedIssuersRegistry contract.
  Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.
  IERC3643TrustedIssuersRegistry The address of the TrustedIssuersRegistry contract.
  """
  issuersRegistry: String

  """
  Returns the linked ClaimTopicsRegistry contract.
  Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.
  IERC3643ClaimTopicsRegistry The address of the ClaimTopicsRegistry contract.
  """
  topicsRegistry: String
}

input IERC3643IdentityRegistryBatchRegisterIdentityInput {
  """
  The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events
  """
  _countries: [Int!]!

  """
  The addresses of the corresponding identity contracts
  """
  _identities: [String!]!

  """
  The addresses of the users
  """
  _userAddresses: [String!]!
}

input IERC3643IdentityRegistryDeleteIdentityInput {
  """
  The address of the user to be removed  emits `IdentityRemoved` event
  """
  _userAddress: String!
}

input IERC3643IdentityRegistryRegisterIdentityInput {
  """
  The country of the investor  emits `IdentityRegistered` event
  """
  _country: Int!

  """
  The address of the user's identity contract
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input IERC3643IdentityRegistrySetClaimTopicsRegistryInput {
  """
  The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event
  """
  _claimTopicsRegistry: String!
}

input IERC3643IdentityRegistrySetIdentityRegistryStorageInput {
  """
  The address of the new Identity Registry Storage  emits `IdentityStorageSet` event
  """
  _identityRegistryStorage: String!
}

input IERC3643IdentityRegistrySetTrustedIssuersRegistryInput {
  """
  The address of the new Trusted Issuers Registry  emits `TrustedIssuersRegistrySet` event
  """
  _trustedIssuersRegistry: String!
}

type IERC3643IdentityRegistryStorage {
  id: ID

  """
  Returns the identity registries linked to the storage contract.
  Returns the identity registries linked to the storage contract.
  Array of addresses of all linked identity registries.
  """
  linkedIdentityRegistries: [String!]

  """
  Returns the onchainID of an investor.
  Returns the onchainID of an investor.
  The identity contract address of the investor.
  """
  storedIdentity(_userAddress: String!): String

  """
  Returns the country code of an investor.
  Returns the country code of an investor.
  The country code (ISO 3166-1 numeric) of the investor.
  """
  storedInvestorCountry(_userAddress: String!): Int

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input IERC3643IdentityRegistryStorageAddIdentityToStorageInput {
  """
  The country of the investor  emits `IdentityStored` event
  """
  _country: Int!

  """
  The address of the user's identity contract
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input IERC3643IdentityRegistryStorageBindIdentityRegistryInput {
  """
  The identity registry address to add.
  """
  _identityRegistry: String!
}

input IERC3643IdentityRegistryStorageModifyStoredIdentityInput {
  """
  The address of the user's new identity contract  emits `IdentityModified` event
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input IERC3643IdentityRegistryStorageModifyStoredInvestorCountryInput {
  """
  The new country of the user  emits `CountryModified` event
  """
  _country: Int!

  """
  The address of the user
  """
  _userAddress: String!
}

input IERC3643IdentityRegistryStorageRemoveIdentityFromStorageInput {
  """
  The address of the user to be removed  emits `IdentityUnstored` event
  """
  _userAddress: String!
}

"""
Returns the transaction hash
"""
type IERC3643IdentityRegistryStorageTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IERC3643IdentityRegistryStorageTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643IdentityRegistryStorageUnbindIdentityRegistryInput {
  """
  The identity registry address to remove.
  """
  _identityRegistry: String!
}

"""
Returns the transaction hash
"""
type IERC3643IdentityRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IERC3643IdentityRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643IdentityRegistryUpdateCountryInput {
  """
  The new country of the user  emits `CountryUpdated` event
  """
  _country: Int!

  """
  The address of the user
  """
  _userAddress: String!
}

input IERC3643IdentityRegistryUpdateIdentityInput {
  """
  The address of the user's new identity contract  emits `IdentityUpdated` event
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input IERC3643MintInput {
  """
  Amount of tokens to mint.  This function can only be called by a wallet designated as an agent of the token,  provided the agent is not restricted from minting tokens.  Emits a `Transfer` event upon successful minting.  To execute this function, the calling agent must not be restricted from minting tokens.  If the agent is restricted from this capability, the function call will fail.
  """
  _amount: String!

  """
  Address to mint the tokens to.
  """
  _to: String!
}

input IERC3643RecoveryAddressInput {
  """
  The ONCHAINID of the investor whose tokens are being recovered.
  """
  _investorOnchainID: String!

  """
  The wallet that the investor lost, containing the tokens to be recovered.
  """
  _lostWallet: String!

  """
  The newly provided wallet to which tokens and associated statuses must be transferred.
  """
  _newWallet: String!
}

input IERC3643SetAddressFrozenInput {
  """
  The frozen status to be applied: `true` to freeze, `false` to unfreeze.
  """
  _freeze: Boolean!

  """
  The address for which to update the frozen status.
  """
  _userAddress: String!
}

input IERC3643SetComplianceInput {
  """
  the address of the compliance contract to set  Only the owner of the token smart contract can call this function  calls bindToken on the compliance contract  emits a `ComplianceAdded` event
  """
  _compliance: String!
}

input IERC3643SetIdentityRegistryInput {
  """
  the address of the Identity Registry to set  Only the owner of the token smart contract can call this function  emits an `IdentityRegistryAdded` event
  """
  _identityRegistry: String!
}

input IERC3643SetNameInput {
  """
  the name of token to set  Only the owner of the token smart contract can call this function  emits a `UpdatedTokenInformation` event
  """
  _name: String!
}

input IERC3643SetOnchainIDInput {
  """
  the address of the onchain ID to set  Only the owner of the token smart contract can call this function  emits a `UpdatedTokenInformation` event
  """
  _onchainID: String!
}

input IERC3643SetSymbolInput {
  """
  the token symbol to set  Only the owner of the token smart contract can call this function  emits a `UpdatedTokenInformation` event
  """
  _symbol: String!
}

"""
Returns the transaction hash
"""
type IERC3643TransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IERC3643TransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643TransferFromInput {
  from: String!
  to: String!
  value: String!
}

input IERC3643TransferInput {
  to: String!
  value: String!
}

type IERC3643TrustedIssuersRegistry {
  """
  Gets all the claim topic of trusted claim issuer.
  Function for getting all the claim topic of trusted claim issuer  Requires the provided ClaimIssuer contract to be registered in the trusted issuers registry.
  The set of claim topics that the trusted issuer is allowed to emit.
  """
  getTrustedIssuerClaimTopics(_trustedIssuer: String!): [String!]

  """
  Gets all the trusted claim issuers stored.
  Function for getting all the trusted claim issuers stored.
  array of all claim issuers registered.
  """
  getTrustedIssuers: [String!]

  """
  Gets all the trusted issuer allowed for a given claim topic.
  Function for getting all the trusted issuer allowed for a given claim topic.
  array of all claim issuer addresses that are allowed for the given claim topic.
  """
  getTrustedIssuersForClaimTopic(claimTopic: String!): [String!]

  """
  Checks if the trusted claim issuer is allowed to emit a certain claim topic.
  Function for checking if the trusted claim issuer is allowed  to emit a certain claim topic.
  true if the issuer is trusted for this claim topic.
  """
  hasClaimTopic(_claimTopic: String!, _issuer: String!): Boolean
  id: ID

  """
  Checks if the ClaimIssuer contract is trusted.
  Checks if the ClaimIssuer contract is trusted.
  true if the issuer is trusted, false otherwise.
  """
  isTrustedIssuer(_issuer: String!): Boolean

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input IERC3643TrustedIssuersRegistryAddTrustedIssuerInput {
  """
  the set of claim topics that the trusted issuer is allowed to emit  This function can only be called by the owner of the Trusted Issuers Registry contract  emits a `TrustedIssuerAdded` event
  """
  _claimTopics: [String!]!

  """
  The ClaimIssuer contract address of the trusted claim issuer.
  """
  _trustedIssuer: String!
}

input IERC3643TrustedIssuersRegistryRemoveTrustedIssuerInput {
  """
  the claim issuer to remove.  This function can only be called by the owner of the Trusted Issuers Registry contract  emits a `TrustedIssuerRemoved` event
  """
  _trustedIssuer: String!
}

"""
Returns the transaction hash
"""
type IERC3643TrustedIssuersRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IERC3643TrustedIssuersRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopicsInput {
  """
  the set of claim topics that the trusted issuer is allowed to emit  This function can only be called by the owner of the Trusted Issuers Registry contract  emits a `ClaimTopicsUpdated` event
  """
  _claimTopics: [String!]!

  """
  the claim issuer to update.
  """
  _trustedIssuer: String!
}

input IERC3643UnfreezePartialTokensInput {
  """
  The amount of tokens to be unfrozen.
  """
  _amount: String!

  """
  The address for which to unfreeze tokens.
  """
  _userAddress: String!
}

type ISMART {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: ISMARTComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: ISMARTComplianceModulesOutput

  """
  Returns the decimals places of the token.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: ISMARTIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: ISMARTOnchainIDOutput

  """
  Retrieves a list of all currently active interfaces for this token.
  This function returns an array of bytes4 interface IDs that the token supports.
  An array of bytes4 interface IDs.
  """
  registeredInterfaces: ISMARTRegisteredInterfacesOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input ISMARTAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input ISMARTApproveInput {
  spender: String!
  value: String!
}

input ISMARTBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input ISMARTBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type ISMARTBurnable {
  id: ID
}

input ISMARTBurnableBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input ISMARTBurnableBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

"""
Returns the transaction hash
"""
type ISMARTBurnableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTBurnableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTCapped {
  """
  Returns the maximum allowed total supply for this token (the "cap").
  This function provides a way to query the hard limit on the token's supply.      It is a `view` function, meaning it does not modify the contract's state and does not      cost gas when called externally as a read-only operation (e.g., from a user interface).
  uint256 The maximum number of tokens that can be in circulation.
  """
  cap: String
  id: ID
}

input ISMARTCappedSetCapInput {
  """
  The new maximum total supply. Must be >= the current total supply.
  """
  newCap: String!
}

"""
Returns the transaction hash
"""
type ISMARTCappedTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTCappedTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTCollateral {
  """
  Attempts to find the first valid collateral claim associated with the token contract's         own OnchainID identity, based on a pre-configured claim topic.
  This function is expected to perform several checks:      1. Retrieve claim IDs from the token's identity contract (`this.onchainID()`) for the configured `collateralProofTopic`.      2. For each claim, verify its issuer is trusted for that topic via the `identityRegistry`'s `issuersRegistry`.      3. Confirm the trusted issuer contract itself deems the claim valid (e.g., via `IClaimIssuer.isClaimValid`).      4. Decode the claim data, which is expected to contain a collateral `amount` and an `expiryTimestamp`.      5. Ensure the claim has not expired (i.e., `decodedExpiry > block.timestamp`).      The function should return the details of the *first* claim that successfully passes all these validations.      If no such claim is found, it should return zero values.      This is a `view` function, meaning it reads blockchain state but does not modify it, and thus      does not consume gas when called as a read-only operation from off-chain.
  The collateral amount (e.g., maximum permissible total supply) decoded from the valid claim data.                Returns 0 if no valid collateral claim is found., The expiry timestamp (Unix time) decoded from the valid claim data.                         Returns 0 if no valid claim is found or if the found claim has already expired., The address of the trusted `IClaimIssuer` contract that issued the valid collateral claim.                Returns `address(0)` if no valid claim is found.
  """
  findValidCollateralClaim: ISMARTCollateralFindValidCollateralClaimOutput
  id: ID
}

type ISMARTCollateralFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

"""
Returns the transaction hash
"""
type ISMARTCollateralTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTCollateralTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTCompliance {
  """
  Checks if a potential token operation (transfer, mint, or burn) is compliant with all configured rules.
  This function MUST be a `view` function (it should not modify state).      It is called by the `ISMART` token contract *before* executing an operation.      The implementation should iterate through all active compliance modules associated with the `_token`,      calling each module's `canTransfer` function with the operation details and module-specific parameters.      If any module indicates non-compliance (e.g., by reverting), this `canTransfer` function should also revert.      If all modules permit the operation, it returns `true`.
  `true` if the operation is compliant with all rules, otherwise the function should revert.
  """
  canTransfer(
    _amount: String!
    _from: String!
    _to: String!
    _token: String!
  ): ISMARTComplianceCanTransferOutput
  id: ID

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

type ISMARTComplianceCanTransferOutput {
  isCompliant: Boolean
}

input ISMARTComplianceCreatedInput {
  """
  The quantity of tokens that were minted.
  """
  _amount: String!

  """
  The address that received the newly minted tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where the mint occurred.
  """
  _token: String!
}

input ISMARTComplianceDestroyedInput {
  """
  The quantity of tokens that were burned.
  """
  _amount: String!

  """
  The address from which tokens were burned.
  """
  _from: String!

  """
  The address of the `ISMART` token contract where the burn occurred.
  """
  _token: String!
}

type ISMARTComplianceModule {
  id: ID

  """
  Returns a human-readable name for the compliance module.
  This function MUST be a `pure` function, meaning it does not read from or modify the contract state.      The name helps identify the module's purpose (e.g., "KYC Module", "Country Restriction Module").
  A string representing the name of the compliance module.
  """
  name: String

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

input ISMARTComplianceModuleCreatedInput {
  """
  Token-specific configuration parameters for this module instance.
  """
  _params: String!

  """
  The address of the account that received the newly minted tokens.
  """
  _to: String!

  """
  The address of the ISMART token contract where tokens were minted.
  """
  _token: String!

  """
  The amount of tokens that were minted.
  """
  _value: String!
}

input ISMARTComplianceModuleDestroyedInput {
  """
  The address of the account whose tokens were burned.
  """
  _from: String!

  """
  Token-specific configuration parameters for this module instance.
  """
  _params: String!

  """
  The address of the ISMART token contract from which tokens were burned.
  """
  _token: String!

  """
  The amount of tokens that were burned.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type ISMARTComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTComplianceModuleTransferredInput {
  """
  The address of the account that sent the tokens.
  """
  _from: String!

  """
  Token-specific configuration parameters for this module instance.
  """
  _params: String!

  """
  The address of the account that received the tokens.
  """
  _to: String!

  """
  The address of the ISMART token contract where the transfer occurred.
  """
  _token: String!

  """
  The amount of tokens that were transferred.
  """
  _value: String!
}

type ISMARTComplianceModulesOutput {
  modulesList: [ISMARTModulesListComplianceModulesOutput!]
}

type ISMARTComplianceOutput {
  complianceContract: String
}

"""
Returns the transaction hash
"""
type ISMARTComplianceTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTComplianceTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTComplianceTransferredInput {
  """
  The quantity of tokens that were transferred.
  """
  _amount: String!

  """
  The address of the token sender.
  """
  _from: String!

  """
  The address of the token recipient.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where the transfer occurred.
  """
  _token: String!
}

type ISMARTCustodian {
  """
  Gets the amount of tokens that are specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The amount of tokens partially frozen for the address.
  """
  getFrozenTokens(userAddress: String!): String
  id: ID

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if the address is frozen, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean
}

input ISMARTCustodianBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input ISMARTCustodianBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input ISMARTCustodianBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input ISMARTCustodianBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input ISMARTCustodianForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input ISMARTCustodianForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input ISMARTCustodianFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

input ISMARTCustodianSetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

"""
Returns the transaction hash
"""
type ISMARTCustodianTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTCustodianTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTCustodianUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type ISMARTFixedYieldSchedule {
  """
  Returns an array of all period end timestamps for this yield schedule.
  Each timestamp in the array marks the conclusion of a yield distribution period. The number of elements in this array corresponds to the total number of periods in the schedule. This is useful for understanding the full timeline of the yield schedule.
  An array of Unix timestamps, each representing the end of a distribution period.
  """
  allPeriods: ISMARTFixedYieldScheduleAllPeriodsOutput

  """
  Calculates the total accrued yield for a specific token holder up to the current moment, including any pro-rata share for the ongoing period.
  This provides an up-to-the-second estimate of what a holder is entitled to, combining fully completed unclaimed periods and a partial calculation for the current period. The pro-rata calculation typically depends on the time elapsed in the current period and the holder's current balance.
  The total amount of yield tokens accrued by the `holder`.
  """
  calculateAccruedYield(
    holder: String!
  ): ISMARTFixedYieldScheduleCalculateAccruedYieldOutput

  """
  Returns the current, ongoing period number of the yield schedule.
  If the schedule has not yet started (`block.timestamp < startDate()`), this might return 0. If the schedule has ended (`block.timestamp >= endDate()`), this might return the total number of periods. Otherwise, it returns the 1-indexed number of the period that is currently in progress.
  The current period number (1-indexed), or 0 if not started / an indicator if ended.
  """
  currentPeriod: ISMARTFixedYieldScheduleCurrentPeriodOutput

  """
  Returns the ERC20 token contract that is used for making yield payments.
  This is the actual token that holders will receive when they claim their yield. It can be the same as `token()` or a different token (e.g., a stablecoin).
  The `IERC20` compliant token contract address used for payments.
  """
  denominationAsset: ISMARTFixedYieldScheduleDenominationAssetOutput

  """
  Returns the timestamp representing the end date and time of the entire yield schedule.
  After this timestamp, no more yield will typically accrue or be distributed by this schedule.
  The Unix timestamp indicating when the yield schedule concludes.
  """
  endDate: ISMARTFixedYieldScheduleEndDateOutput
  id: ID

  """
  Returns the duration of each distribution interval or period in seconds.
  For example, if yield is distributed daily, the interval would be `86400` seconds. This, along with `startDate` and `endDate`, defines the periodicity of the schedule.
  The length of each yield period in seconds.
  """
  interval: ISMARTFixedYieldScheduleIntervalOutput

  """
  Returns the last period number for which a specific token holder has successfully claimed their yield.
  This is crucial for tracking individual claim statuses. If a holder has never claimed, this might return 0.
  The 1-indexed number of the last period claimed by the `holder`.
  """
  lastClaimedPeriod(
    holder: String!
  ): ISMARTFixedYieldScheduleLastClaimedPeriodOutput

  """
  Returns the most recent period number that has been fully completed and is eligible for yield claims.
  This indicates up to which period users can typically claim their accrued yield. If no periods have completed (e.g., `block.timestamp < periodEnd(1)`), this might return 0.
  The 1-indexed number of the last fully completed period.
  """
  lastCompletedPeriod: ISMARTFixedYieldScheduleLastCompletedPeriodOutput

  """
  Returns the end timestamp for a specific yield distribution period.
  Periods are typically 1-indexed. Requesting period `0` or a period number greater than the total number of periods should be handled (e.g., revert).
  The Unix timestamp marking the end of the specified `period`.
  """
  periodEnd(period: String!): ISMARTFixedYieldSchedulePeriodEndOutput

  """
  Returns the yield rate for the schedule.
  The interpretation of this rate (e.g., annual percentage rate, per period rate) and its precision (e.g., basis points) depends on the specific implementation of the schedule contract. For a fixed schedule, this rate is a key parameter in calculating yield per period.
  The configured yield rate (e.g., in basis points, where 100 basis points = 1%).
  """
  rate: ISMARTFixedYieldScheduleRateOutput

  """
  Returns the timestamp representing the start date and time of the yield schedule.
  This function provides the point in time (as a Unix timestamp, seconds since epoch) from which the yield schedule is considered active or when yield calculations/distributions commence. This is a `view` function, meaning it does not modify the contract's state and can be called without gas cost if called externally (not from another contract transaction).
  The Unix timestamp indicating when the yield schedule begins.
  """
  startDate: ISMARTFixedYieldScheduleStartDateOutput

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the remaining time in seconds until the start of the next yield distribution period.
  If the schedule has not started, this could be time until `startDate()`. If the schedule is ongoing, this is the time left in the `currentPeriod()`. If the schedule has ended, this might return 0.
  The time in seconds until the next period begins or current period ends.
  """
  timeUntilNextPeriod: ISMARTFixedYieldScheduleTimeUntilNextPeriodOutput

  """
  Returns the address of the SMART token contract for which this yield schedule is defined.
  The schedule contract needs to interact with this token contract to query historical balances (e.g., `balanceOfAt`) and total supplies (`totalSupplyAt`). The returned token contract should implement the `ISMARTYield` interface.
  The `ISMARTYield` compliant token contract address.
  """
  token: ISMARTFixedYieldScheduleTokenOutput

  """
  Calculates the total amount of yield that has been accrued by all token holders across all completed periods but has not yet been claimed.
  This requires iterating through completed periods and historical token supplies/balances, so it can be gas-intensive if called on-chain frequently. It gives an overview of the outstanding yield liability of the schedule contract.
  The total sum of unclaimed yield tokens.
  """
  totalUnclaimedYield: ISMARTFixedYieldScheduleTotalUnclaimedYieldOutput

  """
  Calculates the total amount of yield that will be required to cover all token holders for the next upcoming distribution period.
  This is a projection based on current total supply (or relevant historical supply measure) and the yield rate. Useful for administrators to ensure sufficient denomination assets are available in the contract for future payouts.
  The estimated total yield tokens needed for the next period's distribution.
  """
  totalYieldForNextPeriod: ISMARTFixedYieldScheduleTotalYieldForNextPeriodOutput
}

type ISMARTFixedYieldScheduleAllPeriodsOutput {
  timestamps: [String!]
}

type ISMARTFixedYieldScheduleCalculateAccruedYieldOutput {
  totalAmount: String
}

type ISMARTFixedYieldScheduleCurrentPeriodOutput {
  periodNumber: String
}

type ISMARTFixedYieldScheduleDenominationAssetOutput {
  assetToken: String
}

type ISMARTFixedYieldScheduleEndDateOutput {
  timestamp: String
}

type ISMARTFixedYieldScheduleIntervalOutput {
  durationSeconds: String
}

type ISMARTFixedYieldScheduleLastClaimedPeriodOutput {
  periodNumber: String
}

type ISMARTFixedYieldScheduleLastCompletedPeriodOutput {
  periodNumber: String
}

type ISMARTFixedYieldSchedulePeriodEndOutput {
  timestamp: String
}

type ISMARTFixedYieldScheduleRateOutput {
  yieldRate: String
}

type ISMARTFixedYieldScheduleStartDateOutput {
  startDateTimestamp: String
}

type ISMARTFixedYieldScheduleTimeUntilNextPeriodOutput {
  timeRemaining: String
}

type ISMARTFixedYieldScheduleTokenOutput {
  tokenContract: String
}

input ISMARTFixedYieldScheduleTopUpDenominationAssetInput {
  """
  The quantity of the `denominationAsset` to deposit into the schedule contract.
  """
  amount: String!
}

type ISMARTFixedYieldScheduleTotalUnclaimedYieldOutput {
  totalAmount: String
}

type ISMARTFixedYieldScheduleTotalYieldForNextPeriodOutput {
  totalAmount: String
}

"""
Returns the transaction hash
"""
type ISMARTFixedYieldScheduleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTFixedYieldScheduleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTFixedYieldScheduleWithdrawAllDenominationAssetInput {
  """
  The address to which all `denominationAsset` tokens will be sent.
  """
  to: String!
}

input ISMARTFixedYieldScheduleWithdrawDenominationAssetInput {
  """
  The quantity of `denominationAsset` tokens to withdraw.
  """
  amount: String!

  """
  The address to which the withdrawn `denominationAsset` tokens will be sent.
  """
  to: String!
}

type ISMARTHistoricalBalances {
  """
  Returns the token balance of a specific `account` at a given `timepoint`.
  The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String
  id: ID

  """
  Returns the total token supply at a given `timepoint`.
  Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String
}

"""
Returns the transaction hash
"""
type ISMARTHistoricalBalancesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTHistoricalBalancesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTIdentityRegistry {
  """
  Checks if a given investor wallet address is currently registered in this Identity Registry.
  This is a view function and does not consume gas beyond the read operation cost.
  True if the address is registered, false otherwise.
  """
  contains(_userAddress: String!): Boolean

  """
  Gets the new wallet address that replaced a lost wallet during recovery.
  This is the key function for token recovery validation.
  The new wallet address that replaced the lost wallet, or address(0) if not found.
  """
  getRecoveredWallet(lostWallet: String!): String
  id: ID

  """
  Retrieves the `IIdentity` contract address associated with a registered investor's wallet address.
  This is a view function. It will typically revert if the `_userAddress` is not registered.
  The address of the `IIdentity` contract linked to the given wallet address.
  """
  identity(_userAddress: String!): String

  """
  Returns the address of the `IdentityRegistryStorage` contract currently being used by this Identity Registry.
  This allows external parties to inspect which storage contract is active.
  The address of the contract implementing `ISMARTIdentityRegistryStorage`.
  """
  identityStorage: String

  """
  Retrieves the numeric country code associated with a registered investor's wallet address.
  This is a view function. It will typically revert if the `_userAddress` is not registered.
  The numeric country code (ISO 3166-1 alpha-2) for the investor's jurisdiction.
  """
  investorCountry(_userAddress: String!): Int
  isVerified(
    _userAddress: String!
    expression: [ISMARTIdentityRegistryIsVerifiedExpressionInput!]!
  ): Boolean

  """
  Checks if a wallet address has been marked as lost.
  True if the wallet is marked as lost, false otherwise.
  """
  isWalletLost(userWallet: String!): Boolean

  """
  Returns the address of the `TrustedIssuersRegistry` contract currently being used by this Identity Registry.
  This allows external parties to inspect which trusted issuers list is active for verification purposes.
  The address of the contract implementing `IERC3643TrustedIssuersRegistry`.
  """
  issuersRegistry: String

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the `TopicSchemeRegistry` contract currently being used by this Identity Registry.
  This allows external parties to inspect which topic scheme registry is active for validation.
  The address of the contract implementing `ISMARTTopicSchemeRegistry`.
  """
  topicSchemeRegistry: String
}

input ISMARTIdentityRegistryBatchRegisterIdentityInput {
  """
  An array of corresponding numeric country codes (ISO 3166-1 alpha-2) for each investor.
  """
  _countries: [Int!]!

  """
  An array of corresponding `IIdentity` contract addresses for each investor.
  """
  _identities: [String!]!

  """
  An array of investor wallet addresses to be registered.
  """
  _userAddresses: [String!]!
}

input ISMARTIdentityRegistryDeleteIdentityInput {
  """
  The investor's wallet address whose registration is to be removed.
  """
  _userAddress: String!
}

input ISMARTIdentityRegistryIsVerifiedExpressionInput {
  nodeType: Int!
  value: String!
}

type ISMARTIdentityRegistryOutput {
  registryContract: String
}

input ISMARTIdentityRegistryRecoverIdentityInput {
  """
  The current wallet address to be marked as lost.
  """
  lostWallet: String!

  """
  The new IIdentity contract address for the new wallet.
  """
  newOnchainId: String!

  """
  The new wallet address to be registered.
  """
  newWallet: String!
}

input ISMARTIdentityRegistryRegisterIdentityInput {
  """
  The numeric country code (ISO 3166-1 alpha-2 standard) representing the investor's jurisdiction.
  """
  _country: Int!

  """
  The address of the investor's deployed `IIdentity` contract, which manages their claims.
  """
  _identity: String!

  """
  The investor's primary wallet address (externally owned account or smart contract wallet).
  """
  _userAddress: String!
}

input ISMARTIdentityRegistrySetIdentityRegistryStorageInput {
  """
  The address of the new contract that implements the `ISMARTIdentityRegistryStorage` interface.
  """
  _identityRegistryStorage: String!
}

input ISMARTIdentityRegistrySetTopicSchemeRegistryInput {
  """
  The address of the new contract that implements the `ISMARTTopicSchemeRegistry` interface.
  """
  _topicSchemeRegistry: String!
}

input ISMARTIdentityRegistrySetTrustedIssuersRegistryInput {
  """
  The address of the new contract that implements the `IERC3643TrustedIssuersRegistry` interface.
  """
  _trustedIssuersRegistry: String!
}

type ISMARTIdentityRegistryStorage {
  """
  Gets the new wallet address that replaced a lost wallet during recovery.
  This is the key function for token recovery - allows checking if caller is authorized to recover from lostWallet.
  The new wallet address that replaced the lost wallet, or address(0) if not found.
  """
  getRecoveredWalletFromStorage(lostWallet: String!): String
  id: ID

  """
  Checks if a user wallet is globally marked as lost in the storage.
  A "globally lost" wallet means it has been declared lost in the context of at least one identity      it was associated with.
  True if the wallet has been marked as lost at least once, false otherwise.
  """
  isWalletMarkedAsLost(userWallet: String!): Boolean

  """
  Returns the identity registries linked to the storage contract.
  Returns the identity registries linked to the storage contract.
  Array of addresses of all linked identity registries.
  """
  linkedIdentityRegistries: [String!]

  """
  Returns the onchainID of an investor.
  Returns the onchainID of an investor.
  The identity contract address of the investor.
  """
  storedIdentity(_userAddress: String!): String

  """
  Returns the country code of an investor.
  Returns the country code of an investor.
  The country code (ISO 3166-1 numeric) of the investor.
  """
  storedInvestorCountry(_userAddress: String!): Int

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input ISMARTIdentityRegistryStorageAddIdentityToStorageInput {
  """
  The country of the investor  emits `IdentityStored` event
  """
  _country: Int!

  """
  The address of the user's identity contract
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input ISMARTIdentityRegistryStorageBindIdentityRegistryInput {
  """
  The identity registry address to add.
  """
  _identityRegistry: String!
}

input ISMARTIdentityRegistryStorageLinkWalletRecoveryInput {
  """
  The lost wallet address.
  """
  lostWallet: String!

  """
  The new replacement wallet address.
  """
  newWallet: String!
}

input ISMARTIdentityRegistryStorageMarkWalletAsLostInput {
  """
  The IIdentity contract address to which the userWallet was associated.
  """
  identityContract: String!

  """
  The user wallet address to be marked as lost.
  """
  userWallet: String!
}

input ISMARTIdentityRegistryStorageModifyStoredIdentityInput {
  """
  The address of the user's new identity contract  emits `IdentityModified` event
  """
  _identity: String!

  """
  The address of the user
  """
  _userAddress: String!
}

input ISMARTIdentityRegistryStorageModifyStoredInvestorCountryInput {
  """
  The new country of the user  emits `CountryModified` event
  """
  _country: Int!

  """
  The address of the user
  """
  _userAddress: String!
}

input ISMARTIdentityRegistryStorageRemoveIdentityFromStorageInput {
  """
  The address of the user to be removed  emits `IdentityUnstored` event
  """
  _userAddress: String!
}

"""
Returns the transaction hash
"""
type ISMARTIdentityRegistryStorageTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTIdentityRegistryStorageTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTIdentityRegistryStorageUnbindIdentityRegistryInput {
  """
  The identity registry address to remove.
  """
  _identityRegistry: String!
}

"""
Returns the transaction hash
"""
type ISMARTIdentityRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTIdentityRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTIdentityRegistryUpdateCountryInput {
  """
  The new numeric country code (ISO 3166-1 alpha-2 standard).
  """
  _country: Int!

  """
  The investor's wallet address whose country information needs updating.
  """
  _userAddress: String!
}

input ISMARTIdentityRegistryUpdateIdentityInput {
  """
  The address of the investor's new `IIdentity` contract.
  """
  _identity: String!

  """
  The investor's wallet address whose associated `IIdentity` contract needs updating.
  """
  _userAddress: String!
}

input ISMARTMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type ISMARTModulesListComplianceModulesOutput {
  module: String
  params: String
}

type ISMARTOnchainIDOutput {
  idAddress: String
}

type ISMARTPausable {
  id: ID

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  This is a `view` function, meaning it does not modify the blockchain state and does not      cost gas when called externally (e.g., from an off-chain script or another contract's view function).
  bool The current paused state of the contract.
  """
  paused: Boolean
}

"""
Returns the transaction hash
"""
type ISMARTPausableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTPausableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input ISMARTRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

type ISMARTRedeemable {
  id: ID
}

input ISMARTRedeemableRedeemInput {
  """
  The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.
  """
  amount: String!
}

"""
Returns the transaction hash
"""
type ISMARTRedeemableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTRedeemableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTRegisteredInterfacesOutput {
  interfacesList: [String!]
}

input ISMARTRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input ISMARTSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input ISMARTSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input ISMARTSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input ISMARTSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

type ISMARTTokenAccessManaged {
  """
  Returns the address of the access manager for the token.
  The address of the access manager.
  """
  accessManager: String

  """
  Checks if a given account has a specific role.
  This function is crucial for permissioned systems, where certain actions      can only be performed by accounts holding specific roles (e.g., an admin role,      a minter role, etc.).
  A boolean value: `true` if the account has the specified role,         `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID
}

"""
Returns the transaction hash
"""
type ISMARTTokenAccessManagedTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTTokenAccessManagedTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTTokenAccessManager {
  """
  Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.
  """
  getRoleAdmin(role: String!): String

  """
  Checks if a given account possesses a specific role.
  This is the primary function that token contracts will call to determine if an      action requested by an `account` is permitted based on its assigned `role`.      The implementation of this function within the manager contract will contain      the logic for storing and retrieving role assignments.
  A boolean value: `true` if the `account` has the specified `role`, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID
}

input ISMARTTokenAccessManagerBatchGrantRoleInput {
  """
  The addresses that will receive the role.
  """
  accounts: [String!]!

  """
  The role identifier to grant.
  """
  role: String!
}

input ISMARTTokenAccessManagerBatchRevokeRoleInput {
  """
  The addresses that will lose the role.
  """
  accounts: [String!]!

  """
  The role identifier to revoke.
  """
  role: String!
}

input ISMARTTokenAccessManagerGrantMultipleRolesInput {
  """
  The address that will receive all the roles.
  """
  account: String!

  """
  The array of role identifiers to grant.
  """
  roles: [String!]!
}

input ISMARTTokenAccessManagerGrantRoleInput {
  account: String!
  role: String!
}

input ISMARTTokenAccessManagerRenounceMultipleRolesInput {
  """
  The address that will confirm the renouncement.
  """
  callerConfirmation: String!

  """
  The array of role identifiers to renounce.
  """
  roles: [String!]!
}

input ISMARTTokenAccessManagerRenounceRoleInput {
  callerConfirmation: String!
  role: String!
}

input ISMARTTokenAccessManagerRevokeMultipleRolesInput {
  """
  The address that will lose all the roles.
  """
  account: String!

  """
  The array of role identifiers to revoke.
  """
  roles: [String!]!
}

input ISMARTTokenAccessManagerRevokeRoleInput {
  account: String!
  role: String!
}

"""
Returns the transaction hash
"""
type ISMARTTokenAccessManagerTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTTokenAccessManagerTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTTopicSchemeRegistry {
  """
  Gets all registered topic IDs.
  Array of all registered topic scheme identifiers.
  """
  getAllTopicIds: ISMARTTopicSchemeRegistryGetAllTopicIdsOutput

  """
  Gets the topic ID for a given name.
  The unique identifier generated from the name.
  """
  getTopicId(name: String!): ISMARTTopicSchemeRegistryGetTopicIdOutput

  """
  Gets the total number of registered topic schemes.
  The number of registered topic schemes.
  """
  getTopicSchemeCount: ISMARTTopicSchemeRegistryGetTopicSchemeCountOutput

  """
  Gets the signature for a specific topic scheme by ID.
  The signature string for the topic scheme.
  """
  getTopicSchemeSignature(
    topicId: String!
  ): ISMARTTopicSchemeRegistryGetTopicSchemeSignatureOutput

  """
  Gets the signature for a specific topic scheme by name.
  The signature string for the topic scheme.
  """
  getTopicSchemeSignatureByName(
    name: String!
  ): ISMARTTopicSchemeRegistryGetTopicSchemeSignatureByNameOutput

  """
  Checks if a topic scheme exists by ID.
  True if the topic scheme is registered, false otherwise.
  """
  hasTopicScheme(
    topicId: String!
  ): ISMARTTopicSchemeRegistryHasTopicSchemeOutput

  """
  Checks if a topic scheme exists by name.
  True if the topic scheme is registered, false otherwise.
  """
  hasTopicSchemeByName(
    name: String!
  ): ISMARTTopicSchemeRegistryHasTopicSchemeByNameOutput
  id: ID

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean
}

input ISMARTTopicSchemeRegistryBatchRegisterTopicSchemesInput {
  """
  Array of human-readable names for the topic schemes
  """
  names: [String!]!

  """
  Array of signature strings used for encoding/decoding data
  """
  signatures: [String!]!
}

type ISMARTTopicSchemeRegistryGetAllTopicIdsOutput {
  topicIds: [String!]
}

type ISMARTTopicSchemeRegistryGetTopicIdOutput {
  topicId: String
}

type ISMARTTopicSchemeRegistryGetTopicSchemeCountOutput {
  count: String
}

type ISMARTTopicSchemeRegistryGetTopicSchemeSignatureByNameOutput {
  signature: String
}

type ISMARTTopicSchemeRegistryGetTopicSchemeSignatureOutput {
  signature: String
}

type ISMARTTopicSchemeRegistryHasTopicSchemeByNameOutput {
  exists: Boolean
}

type ISMARTTopicSchemeRegistryHasTopicSchemeOutput {
  exists: Boolean
}

input ISMARTTopicSchemeRegistryRegisterTopicSchemeInput {
  """
  The human-readable name for the topic scheme
  """
  name: String!

  """
  The signature string used for encoding/decoding data
  """
  signature: String!
}

input ISMARTTopicSchemeRegistryRemoveTopicSchemeInput {
  """
  The name of the topic scheme to remove
  """
  name: String!
}

"""
Returns the transaction hash
"""
type ISMARTTopicSchemeRegistryTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTTopicSchemeRegistryTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTTopicSchemeRegistryUpdateTopicSchemeInput {
  """
  The name of the topic scheme to update
  """
  name: String!

  """
  The new signature string
  """
  newSignature: String!
}

"""
Returns the transaction hash
"""
type ISMARTTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input ISMARTTransferInput {
  to: String!
  value: String!
}

type ISMARTYield {
  """
  Returns the token balance of a specific `account` at a given `timepoint`.
  The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String
  id: ID

  """
  Returns the total token supply at a given `timepoint`.
  Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String

  """
  Returns the basis amount used to calculate yield per single unit of the token (e.g., per 1 token with 18 decimals).
  The "yield basis" is a fundamental value upon which yield calculations are performed. For example: - For a bond-like token, this might be its face value (e.g., 100 USD). - For an equity-like token, it might be its nominal value or a value derived from an oracle. This function allows the basis to be specific to a `holder`, enabling scenarios where different holders might have different yield bases (though often it will be a global value, in which case `holder` might be ignored). The returned value is typically a raw number (e.g., if basis is $100 and token has 2 decimals, this might return 10000).
  The amount (in the smallest unit of the basis currency/asset) per single unit of the token, used for yield calculations.
  """
  yieldBasisPerUnit(holder: String!): ISMARTYieldYieldBasisPerUnitOutput

  """
  Returns the address of the yield schedule contract for this token.
  The address of the yield schedule contract.
  """
  yieldSchedule: ISMARTYieldYieldScheduleOutput

  """
  Returns the ERC20 token contract that is used for paying out the yield.
  Yield can be paid in the token itself or in a different token (e.g., a stablecoin). This function specifies which ERC20 token will be transferred to holders when they claim their accrued yield.
  An `IERC20` interface instance representing the token used for yield payments.
  """
  yieldToken: ISMARTYieldYieldTokenOutput
}

type ISMARTYieldSchedule {
  id: ID

  """
  Returns the timestamp representing the start date and time of the yield schedule.
  This function provides the point in time (as a Unix timestamp, seconds since epoch) from which the yield schedule is considered active or when yield calculations/distributions commence. This is a `view` function, meaning it does not modify the contract's state and can be called without gas cost if called externally (not from another contract transaction).
  The Unix timestamp indicating when the yield schedule begins.
  """
  startDate: ISMARTYieldScheduleStartDateOutput
}

type ISMARTYieldScheduleStartDateOutput {
  startDateTimestamp: String
}

"""
Returns the transaction hash
"""
type ISMARTYieldScheduleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTYieldScheduleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input ISMARTYieldSetYieldScheduleInput {
  """
  The address of the smart contract that defines the yield schedule. This contract must adhere to `ISMARTYieldSchedule`.
  """
  schedule: String!
}

"""
Returns the transaction hash
"""
type ISMARTYieldTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type ISMARTYieldTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type ISMARTYieldYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type ISMARTYieldYieldScheduleOutput {
  schedule: String
}

type ISMARTYieldYieldTokenOutput {
  paymentToken: String
}

type IWithTypeIdentifier {
  id: ID

  """
  Returns a unique identifier for the type of this contract.
  The unique type identifier as a bytes32 hash.
  """
  typeId: String
}

"""
Returns the transaction hash
"""
type IWithTypeIdentifierTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IWithTypeIdentifierTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type IdentityAllowListComplianceModule {
  """
  Unique type identifier for this compliance module.
  """
  TYPE_ID: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the human-readable name of this compliance module.
  The name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  This identifier is used to distinguish this compliance module type from others in the system.
  The unique type identifier for the IdentityAllowListComplianceModule.
  """
  typeId: String
}

input IdentityAllowListComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input IdentityAllowListComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type IdentityAllowListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IdentityAllowListComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IdentityAllowListComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

type IdentityBlockListComplianceModule {
  """
  Unique type identifier for this compliance module.
  """
  TYPE_ID: String
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Returns the human-readable name of this compliance module.
  The name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  This identifier is used to distinguish this compliance module type from others in the system.
  The unique type identifier for the IdentityBlockListComplianceModule.
  """
  typeId: String
}

input IdentityBlockListComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input IdentityBlockListComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type IdentityBlockListComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type IdentityBlockListComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input IdentityBlockListComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """
  Claims multiple airdrop allocations for the caller in a single transaction.
  Must be implemented by derived contracts. Implementations must use `_msgSender()` instead of `msg.sender` and pass it to `_processBatchClaim`.
  """
  ATKAirdropBatchClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKAirdropBatchClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAirdropTransactionOutput

  """
  Claims an airdrop allocation for the caller.
  Must be implemented by derived contracts. Implementations must use `_msgSender()` instead of `msg.sender` and pass it to `_processClaim`.
  """
  ATKAirdropClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKAirdropClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAirdropTransactionOutput

  """
  Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
  """
  ATKAirdropRenounceOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAirdropTransactionOutput

  """
  Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
  """
  ATKAirdropTransferOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKAirdropTransferOwnershipInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAirdropTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  ATKAirdropWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKAirdropWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAirdropTransactionOutput

  """
  Records a claim for a specific index.
  Only the owner (airdrop contract) can record claims to prevent unauthorized manipulation.
  """
  ATKAmountClaimTrackerRecordClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKAmountClaimTrackerRecordClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAmountClaimTrackerTransactionOutput

  """
  Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
  """
  ATKAmountClaimTrackerRenounceOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAmountClaimTrackerTransactionOutput

  """
  Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
  """
  ATKAmountClaimTrackerTransferOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKAmountClaimTrackerTransferOwnershipInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKAmountClaimTrackerTransactionOutput

  """
  Records a claim for a specific index.
  Only the owner (airdrop contract) can record claims to prevent unauthorized manipulation.      For bitmap tracking, any claim marks the index as fully claimed.
  """
  ATKBitmapClaimTrackerRecordClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBitmapClaimTrackerRecordClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBitmapClaimTrackerTransactionOutput

  """
  Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
  """
  ATKBitmapClaimTrackerRenounceOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBitmapClaimTrackerTransactionOutput

  """
  Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
  """
  ATKBitmapClaimTrackerTransferOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBitmapClaimTrackerTransferOwnershipInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBitmapClaimTrackerTransactionOutput
  ATKBondFactoryImplementationCreateBond(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondFactoryImplementationCreateBondInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondFactoryImplementationTransactionOutput

  """
  Initializes the token registry.
  """
  ATKBondFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondFactoryImplementationTransactionOutput

  """
  Updates the address of the token implementation contract.
  This function can only be called by an account with the DEFAULT_ADMIN_ROLE.      It allows changing the underlying contract that handles token logic.      Emits a {TokenImplementationUpdated} event on success.
  """
  ATKBondFactoryImplementationUpdateTokenImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondFactoryImplementationUpdateTokenImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondFactoryImplementationTransactionOutput

  """
  Adds a new compliance module to the token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKBondImplementationAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  ATKBondImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Burns bond tokens from multiple addresses in a single transaction.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKBondImplementationBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Forces multiple transfers of tokens in a single transaction.
  Only callable by addresses with CUSTODIAN_ROLE. Bypasses normal transfer restrictions.
  """
  ATKBondImplementationBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKBondImplementationBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Mints bond tokens to multiple addresses in a single transaction.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKBondImplementationBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a single transaction.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKBondImplementationBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Transfers tokens to multiple recipients in a batch from the effective sender.
  Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.
  """
  ATKBondImplementationBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKBondImplementationBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Burns bond tokens from a specified address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKBondImplementationBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Recovers tokens from a lost wallet to a new wallet.
  Only callable by addresses with CUSTODIAN_ROLE. Transfers all tokens from the lost wallet.
  """
  ATKBondImplementationForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Forces a transfer of tokens from one address to another.
  Only callable by addresses with CUSTODIAN_ROLE. Bypasses normal transfer restrictions.
  bool Returns true if the transfer was successful.
  """
  ATKBondImplementationForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Freezes a specific amount of tokens for an address.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKBondImplementationFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput
  ATKBondImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Closes off the bond at maturity.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE after maturity dateRequires sufficient denomination assets for all potential redemptions.
  """
  ATKBondImplementationMature(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Mints new bond tokens to a specified address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKBondImplementationMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKBondImplementationPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Recovers ERC20 tokens accidentally sent to this contract.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKBondImplementationRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.
  """
  ATKBondImplementationRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Allows the caller (the token holder) to redeem a specific amount of their own tokens.
  This function implements the `redeem` function from the `ISMARTRedeemable` interface. It allows a token holder to burn a specific `amount` of their own tokens. It delegates the core logic to the internal `__smart_redeemLogic` function. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption was successful (typically `true`).
  """
  ATKBondImplementationRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Allows the caller (the token holder) to redeem all of their own tokens.
  This function implements the `redeemAll` function from the `ISMARTRedeemable` interface. It allows a token holder to burn their entire token balance. First, it retrieves the caller's full balance using `__redeemable_getBalance`. Then, it delegates the core logic to the internal `__smart_redeemLogic` function with the retrieved balance. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption of all tokens was successful (typically `true`).
  """
  ATKBondImplementationRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Removes a compliance module from the token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKBondImplementationRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Freezes or unfreezes all tokens for a specific address.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKBondImplementationSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Sets a new maximum supply cap for the bond tokens.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKBondImplementationSetCap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationSetCapInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Sets the compliance contract address.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKBondImplementationSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Sets the identity registry contract address.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKBondImplementationSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Sets the onchain identity contract for this token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKBondImplementationSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Sets parameters for a specific compliance module.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKBondImplementationSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Sets the yield schedule contract for the bond.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKBondImplementationSetYieldSchedule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationSetYieldScheduleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Transfers bond tokens from the caller to another address.
  Enforces compliance checks and restrictions. Cannot transfer after bond maturity.
  bool Returns true if the transfer was successful.
  """
  ATKBondImplementationTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  ATKBondImplementationTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Unfreezes a specific amount of tokens for an address.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKBondImplementationUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKBondImplementationUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKBondImplementationUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKBondImplementationTransactionOutput

  """
  Adds a global compliance module that applies to all tokens.
  """
  ATKComplianceImplementationAddGlobalComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationAddGlobalComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Adds multiple addresses to the compliance bypass list in a single transaction.
  Uses new multi-role access control. Can be called by COMPLIANCE_MANAGER_ROLE, SYSTEM_MANAGER_ROLE, or SYSTEM_MODULE_ROLE. This is a gas-efficient way to add multiple addresses to the bypass list at once.
  """
  ATKComplianceImplementationAddMultipleToBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationAddMultipleToBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Adds an address to the compliance bypass list.
  Uses new multi-role access control. Can be called by COMPLIANCE_MANAGER_ROLE, SYSTEM_MANAGER_ROLE, or SYSTEM_MODULE_ROLE. Bypassed addresses can bypass compliance checks in canTransfer function.
  """
  ATKComplianceImplementationAddToBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationAddToBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Called after tokens are created/minted to update compliance module states.
  """
  ATKComplianceImplementationCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Called after tokens are destroyed/burned to update compliance module states.
  """
  ATKComplianceImplementationDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Initializes the compliance contract with initial admin and bypass list manager admins.
  """
  ATKComplianceImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Removes an address from the compliance bypass list.
  Uses new multi-role access control. Can be called by COMPLIANCE_MANAGER_ROLE, SYSTEM_MANAGER_ROLE, or SYSTEM_MODULE_ROLE.
  """
  ATKComplianceImplementationRemoveFromBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationRemoveFromBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Removes a global compliance module.
  """
  ATKComplianceImplementationRemoveGlobalComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationRemoveGlobalComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Removes multiple addresses from the compliance bypass list in a single transaction.
  Uses new multi-role access control. Can be called by COMPLIANCE_MANAGER_ROLE, SYSTEM_MANAGER_ROLE, or SYSTEM_MODULE_ROLE.
  """
  ATKComplianceImplementationRemoveMultipleFromBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationRemoveMultipleFromBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Updates the parameters for an existing global compliance module.
  """
  ATKComplianceImplementationSetParametersForGlobalComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationSetParametersForGlobalComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Called after a token transfer to update compliance module states.
  """
  ATKComplianceImplementationTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceImplementationTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceImplementationTransactionOutput

  """
  Initializes the compliance module registry with initial admin accounts.
  Reverts if no initial admins are provided.
  """
  ATKComplianceModuleRegistryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceModuleRegistryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceModuleRegistryImplementationTransactionOutput

  """
  Registers a new compliance module in the registry.
  The module must implement ISMARTComplianceModule interface and have a unique type ID.
  """
  ATKComplianceModuleRegistryImplementationRegisterComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKComplianceModuleRegistryImplementationRegisterComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKComplianceModuleRegistryImplementationTransactionOutput

  """
  Adds or updates a claim. Checks authorization contracts first, falls back to contract permission check.
  """
  ATKContractIdentityImplementationAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Adds a key with a specific purpose and type.
  Key operations are not supported in contract identities.
  Always reverts with UnsupportedKeyOperation.
  """
  ATKContractIdentityImplementationAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Approves an execution.
  Execution operations are not supported in contract identities.
  Always reverts with UnsupportedExecutionOperation.
  """
  ATKContractIdentityImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Executes a transaction.
  Execution operations are not supported in contract identities.
  Always reverts with UnsupportedExecutionOperation.
  """
  ATKContractIdentityImplementationExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Initializes the ATKContractIdentityImplementation.
  Intended to be called once by a proxy via delegatecall.
  """
  ATKContractIdentityImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Issues a CONTRACT scheme claim to a subject identity on behalf of the associated contract.
  Only the associated contract can call this function to issue claims.
  The ID of the created claim.
  """
  ATKContractIdentityImplementationIssueClaimTo(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationIssueClaimToInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Registers a claim authorization contract.
  Only the contract that owns this identity can register authorization contracts.
  """
  ATKContractIdentityImplementationRegisterClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationRegisterClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Removes a claim. Permission check is delegated to the contract via canRemoveClaim.
  """
  ATKContractIdentityImplementationRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Removes a claim authorization contract.
  Only the contract that owns this identity can remove authorization contracts.
  """
  ATKContractIdentityImplementationRemoveClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationRemoveClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput

  """
  Removes a key with a specific purpose.
  Key operations are not supported in contract identities.
  Always reverts with UnsupportedKeyOperation.
  """
  ATKContractIdentityImplementationRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKContractIdentityImplementationRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKContractIdentityImplementationTransactionOutput
  ATKDepositFactoryImplementationCreateDeposit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositFactoryImplementationCreateDepositInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositFactoryImplementationTransactionOutput

  """
  Initializes the token registry.
  """
  ATKDepositFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositFactoryImplementationTransactionOutput

  """
  Updates the address of the token implementation contract.
  This function can only be called by an account with the DEFAULT_ADMIN_ROLE.      It allows changing the underlying contract that handles token logic.      Emits a {TokenImplementationUpdated} event on success.
  """
  ATKDepositFactoryImplementationUpdateTokenImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositFactoryImplementationUpdateTokenImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositFactoryImplementationTransactionOutput

  """
  Adds a new compliance module to the token.
  """
  ATKDepositImplementationAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  ATKDepositImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Burns tokens from multiple addresses in a single transaction.
  """
  ATKDepositImplementationBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Forces transfers of tokens between multiple address pairs.
  """
  ATKDepositImplementationBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Freezes tokens for multiple addresses with specific amounts.
  """
  ATKDepositImplementationBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Mints tokens to multiple addresses in a single transaction.
  """
  ATKDepositImplementationBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Freezes or unfreezes tokens for multiple addresses.
  """
  ATKDepositImplementationBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Transfers tokens to multiple recipients in a batch from the effective sender.
  Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.
  """
  ATKDepositImplementationBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Unfreezes tokens for multiple addresses with specific amounts.
  """
  ATKDepositImplementationBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Burns tokens from a specified address.
  """
  ATKDepositImplementationBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Recovers all tokens from a lost wallet to a new wallet.
  """
  ATKDepositImplementationForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Forces a transfer of tokens from one address to another.
  bool True if the transfer was successful.
  """
  ATKDepositImplementationForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Freezes a specific amount of tokens for a user.
  """
  ATKDepositImplementationFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput
  ATKDepositImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Mints new tokens to a specified address.
  """
  ATKDepositImplementationMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Pauses all token transfers.
  """
  ATKDepositImplementationPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Recovers accidentally sent ERC20 tokens from the contract.
  """
  ATKDepositImplementationRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.
  """
  ATKDepositImplementationRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Removes a compliance module from the token.
  """
  ATKDepositImplementationRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Freezes or unfreezes all tokens for a specified address.
  """
  ATKDepositImplementationSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Sets the compliance contract address for the token.
  """
  ATKDepositImplementationSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Sets the identity registry address for the token.
  """
  ATKDepositImplementationSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Sets the OnchainID contract address for this token.
  """
  ATKDepositImplementationSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Sets parameters for a specific compliance module.
  """
  ATKDepositImplementationSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Transfers tokens to a specified address.
  bool True if the transfer was successful.
  """
  ATKDepositImplementationTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  ATKDepositImplementationTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Unfreezes a specific amount of tokens for a user.
  """
  ATKDepositImplementationUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKDepositImplementationUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput

  """
  Unpauses token transfers.
  """
  ATKDepositImplementationUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKDepositImplementationTransactionOutput
  ATKEquityFactoryImplementationCreateEquity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityFactoryImplementationCreateEquityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityFactoryImplementationTransactionOutput

  """
  Initializes the token registry.
  """
  ATKEquityFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityFactoryImplementationTransactionOutput

  """
  Updates the address of the token implementation contract.
  This function can only be called by an account with the DEFAULT_ADMIN_ROLE.      It allows changing the underlying contract that handles token logic.      Emits a {TokenImplementationUpdated} event on success.
  """
  ATKEquityFactoryImplementationUpdateTokenImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityFactoryImplementationUpdateTokenImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityFactoryImplementationTransactionOutput

  """
  Adds a new compliance module to the equity token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKEquityImplementationAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  ATKEquityImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Burns equity tokens from multiple addresses in a single transaction.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Arrays must have the same length.
  """
  ATKEquityImplementationBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Forces multiple transfers of tokens in a single transaction.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length. Bypasses compliance checks.
  """
  ATKEquityImplementationBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length.
  """
  ATKEquityImplementationBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Mints equity tokens to multiple addresses in a single transaction.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Arrays must have the same length.
  """
  ATKEquityImplementationBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a single transaction.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length.
  """
  ATKEquityImplementationBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Transfers tokens to multiple recipients in a batch from the effective sender.
  Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.
  """
  ATKEquityImplementationBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length.
  """
  ATKEquityImplementationBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Burns equity tokens from a specified address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKEquityImplementationBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Delegates votes from the sender to `delegatee`.
  """
  ATKEquityImplementationDelegate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationDelegateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Delegates votes from signer to `delegatee`.
  """
  ATKEquityImplementationDelegateBySig(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationDelegateBySigInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Recovers all tokens from a lost wallet to a new wallet.
  Only callable by addresses with CUSTODIAN_ROLE. Used for account recovery scenarios.
  """
  ATKEquityImplementationForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Forces a transfer of tokens from one address to another.
  Only callable by addresses with CUSTODIAN_ROLE. Bypasses compliance checks.
  bool indicating whether the transfer was successful.
  """
  ATKEquityImplementationForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Freezes a specific amount of tokens for an address.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKEquityImplementationFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput
  ATKEquityImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Mints new equity tokens to a specified address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKEquityImplementationMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKEquityImplementationPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Recovers accidentally sent ERC20 tokens from the contract.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKEquityImplementationRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.
  """
  ATKEquityImplementationRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Removes a compliance module from the equity token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKEquityImplementationRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Freezes or unfreezes an address from transferring tokens.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKEquityImplementationSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Sets the Compliance contract address.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKEquityImplementationSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Sets the Identity Registry contract address.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKEquityImplementationSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Sets the OnchainID contract address for the equity token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKEquityImplementationSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Sets parameters for a specific compliance module.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKEquityImplementationSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Transfers equity tokens to a specified address.
  Checks compliance and custodian restrictions before transfer.
  bool indicating whether the transfer was successful.
  """
  ATKEquityImplementationTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  ATKEquityImplementationTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Unfreezes a specific amount of tokens for an address.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKEquityImplementationUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKEquityImplementationUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKEquityImplementationUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKEquityImplementationTransactionOutput

  """
  Creates and deploys a new `ATKFixedYieldProxy` contract for a given SMART token. The proxy will point to the current `atkFixedYieldScheduleImplementation`.
  This function performs the following steps: 1. **Authorization Check**: (Retained) Verifies `token.canManageYield(_msgSender())`. 2. **Identity Creation**: Creates a contract identity for the yield schedule and registers it with the identity registry. 3. **Salt Generation**: Computes a unique `salt` for CREATE2. 4. **Initialization Data**: Prepares the `initData` for the proxy to call `initialize` on the implementation. 5. **Proxy Deployment**: Deploys a `ATKFixedYieldProxy` using CREATE2. 6. **Event Emission**: Emits `ATKFixedYieldScheduleCreated`. 7. **Registry Update**: Adds the new proxy to `allSchedules`.
  The address of the newly created `ATKFixedYieldProxy` contract.
  """
  ATKFixedYieldScheduleFactoryImplementationCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryImplementationCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleFactoryImplementationTransactionOutput

  """
  Initializes the `ATKFixedYieldScheduleFactory`.
  Initializes the factory, deploys the initial `ATKFixedYieldSchedule` implementation, and sets up support for meta-transactions via ERC2771Context.
  """
  ATKFixedYieldScheduleFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleFactoryImplementationTransactionOutput

  """
  Updates the address of the `ATKFixedYieldSchedule` implementation contract.
  Only callable by the factory owner. New proxies created after this call will use the new implementation. This does NOT automatically upgrade existing proxy instances.
  """
  ATKFixedYieldScheduleFactoryImplementationUpdateImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleFactoryImplementationUpdateImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleFactoryImplementationTransactionOutput

  """
  Allows the caller (a token holder) to claim all their available (accrued and unclaimed) yield from completed periods.
  This function will typically: 1. Determine the periods for which the caller has not yet claimed yield. 2. Calculate the yield owed for those periods based on their historical token balance at the end of each respective period. 3. Transfer the total calculated yield (in `denominationAsset()`) to the caller. 4. Update the caller's `lastClaimedPeriod`. This is a state-changing function and will emit events (e.g., `YieldClaimed`).
  """
  ATKFixedYieldScheduleUpgradeableClaimYield(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  ATKFixedYieldScheduleUpgradeableGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Initializes the contract when used as an upgradeable proxy.
  This function should be called by the proxy contract after deployment to set all configuration.
  """
  ATKFixedYieldScheduleUpgradeableInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Pauses all contract operations.
  Can only be called by addresses with EMERGENCY_ROLE.
  """
  ATKFixedYieldScheduleUpgradeablePause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  ATKFixedYieldScheduleUpgradeableRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  ATKFixedYieldScheduleUpgradeableRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Sets the onchain ID for this contract.
  Can only be called by an address with DEFAULT_ADMIN_ROLE.
  """
  ATKFixedYieldScheduleUpgradeableSetOnchainId(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableSetOnchainIdInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Allows anyone to deposit (top-up) the denomination asset into the schedule contract to fund yield payments.
  This function is used to ensure the contract has sufficient reserves of the `denominationAsset()` to pay out accrued yield. It typically involves the caller first approving the schedule contract to spend their `denominationAsset` tokens, then this function calls `transferFrom`.
  """
  ATKFixedYieldScheduleUpgradeableTopUpDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableTopUpDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Unpauses all contract operations.
  Can only be called by addresses with EMERGENCY_ROLE.
  """
  ATKFixedYieldScheduleUpgradeableUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Allows an authorized administrator to withdraw all available `denominationAsset` tokens from the schedule contract.
  Similar to `withdrawDenominationAsset`, but withdraws the entire balance of `denominationAsset` held by the contract. Should also be strictly access-controlled.
  """
  ATKFixedYieldScheduleUpgradeableWithdrawAllDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableWithdrawAllDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput

  """
  Allows an authorized administrator to withdraw a specific `amount` of the `denominationAsset` from the schedule contract.
  This is an administrative function and should be strictly access-controlled (e.g., `onlyRole(ADMIN_ROLE)`). Useful for managing excess funds or in emergency situations.
  """
  ATKFixedYieldScheduleUpgradeableWithdrawDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFixedYieldScheduleUpgradeableWithdrawDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFixedYieldScheduleUpgradeableTransactionOutput
  ATKForwarderExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKForwarderExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKForwarderTransactionOutput
  ATKForwarderExecuteBatch(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKForwarderExecuteBatchInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKForwarderTransactionOutput
  ATKFundFactoryImplementationCreateFund(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundFactoryImplementationCreateFundInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundFactoryImplementationTransactionOutput

  """
  Initializes the token registry.
  """
  ATKFundFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundFactoryImplementationTransactionOutput

  """
  Updates the address of the token implementation contract.
  This function can only be called by an account with the DEFAULT_ADMIN_ROLE.      It allows changing the underlying contract that handles token logic.      Emits a {TokenImplementationUpdated} event on success.
  """
  ATKFundFactoryImplementationUpdateTokenImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundFactoryImplementationUpdateTokenImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundFactoryImplementationTransactionOutput

  """
  Adds a new compliance module to the fund token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKFundImplementationAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  ATKFundImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Burns fund tokens from multiple addresses in a single transaction.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Arrays must have the same length.
  """
  ATKFundImplementationBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Forces multiple transfers of tokens in a single transaction.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length. Bypasses compliance checks.
  """
  ATKFundImplementationBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length.
  """
  ATKFundImplementationBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Mints fund tokens to multiple addresses in a single transaction.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE. Arrays must have the same length.
  """
  ATKFundImplementationBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a single transaction.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length.
  """
  ATKFundImplementationBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Transfers tokens to multiple recipients in a batch from the effective sender.
  Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.
  """
  ATKFundImplementationBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses.
  Only callable by addresses with CUSTODIAN_ROLE. Arrays must have the same length.
  """
  ATKFundImplementationBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Burns fund tokens from a specified address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKFundImplementationBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Collects management fee based on time elapsed and assets under management.
  Only callable by addresses with GOVERNANCE_ROLE. Fee is calculated as: (AUM * fee_rate * time_elapsed) / (100% * 1 year).
  uint256 The amount of tokens minted as management fee.
  """
  ATKFundImplementationCollectManagementFee(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Delegates votes from the sender to `delegatee`.
  """
  ATKFundImplementationDelegate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationDelegateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Delegates votes from signer to `delegatee`.
  """
  ATKFundImplementationDelegateBySig(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationDelegateBySigInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Recovers all tokens from a lost wallet to a new wallet.
  Only callable by addresses with CUSTODIAN_ROLE. Used for account recovery scenarios.
  """
  ATKFundImplementationForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Forces a transfer of tokens from one address to another.
  Only callable by addresses with CUSTODIAN_ROLE. Bypasses compliance checks.
  bool indicating whether the transfer was successful.
  """
  ATKFundImplementationForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Freezes a specific amount of tokens for an address.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKFundImplementationFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput
  ATKFundImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Mints new fund tokens to a specified address.
  Only callable by addresses with SUPPLY_MANAGEMENT_ROLE.
  """
  ATKFundImplementationMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Pauses all token transfers.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKFundImplementationPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Recovers accidentally sent ERC20 tokens from the contract.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKFundImplementationRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.
  """
  ATKFundImplementationRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Removes a compliance module from the fund token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKFundImplementationRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Freezes or unfreezes an address from transferring tokens.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKFundImplementationSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Sets the Compliance contract address.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKFundImplementationSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Sets the Identity Registry contract address.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKFundImplementationSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Sets the OnchainID contract address for the fund token.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKFundImplementationSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Sets parameters for a specific compliance module.
  Only callable by addresses with GOVERNANCE_ROLE.
  """
  ATKFundImplementationSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Transfers fund tokens to a specified address.
  Checks compliance and custodian restrictions before transfer.
  bool indicating whether the transfer was successful.
  """
  ATKFundImplementationTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  ATKFundImplementationTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Unfreezes a specific amount of tokens for an address.
  Only callable by addresses with CUSTODIAN_ROLE.
  """
  ATKFundImplementationUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKFundImplementationUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Unpauses token transfers.
  Only callable by addresses with EMERGENCY_ROLE.
  """
  ATKFundImplementationUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKFundImplementationTransactionOutput

  """
  Creates a deterministic on-chain identity for a given contract implementing IContractWithIdentity.
  This function performs several steps: 1. Validates that `_contract` is not zero address and that an identity doesn't already exist for this contract. 2. Verifies the contract implements IContractWithIdentity interface. 3. Calls `_createAndRegisterContractIdentity` to handle the deterministic deployment. Claim authorization    contracts (including the trusted issuers registry) are automatically registered during initialization. 4. Stores the mapping from the `_contract` address to the new `identity` contract address. 5. Emits `ContractIdentityCreated` event.
  address The address of the newly created identity contract.
  """
  ATKIdentityFactoryImplementationCreateContractIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityFactoryImplementationCreateContractIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityFactoryImplementationTransactionOutput

  """
  Creates a deterministic on-chain identity (a `ATKIdentityProxy`) for a given investor wallet address.
  This function performs several steps: 1. Validates that `_wallet` is not the zero address and that an identity doesn't already exist for this wallet. 2. Calls `_createAndRegisterWalletIdentity` to handle the deterministic deployment of the `ATKIdentityProxy`.    The `_wallet` itself is passed as the `_initialManager` to the proxy constructor, and claim authorization    contracts (including the trusted issuers registry) are automatically registered during initialization. 3. Interacts with the newly deployed identity contract (as `IERC734`) to add any additional `_managementKeys` provided.    It ensures a management key is not the wallet itself (which is already a manager). 4. Stores the mapping from the `_wallet` address to the new `identity` contract address. 5. Emits an `IdentityCreated` event.
  address The address of the newly created and registered `ATKIdentityProxy` contract.
  """
  ATKIdentityFactoryImplementationCreateIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityFactoryImplementationCreateIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityFactoryImplementationTransactionOutput

  """
  Initializes the `ATKIdentityFactoryImplementation` contract, typically called once by the proxy after deployment.
  Sets up essential state for the factory: 1. Validates that `systemAddress` is not the zero address. 2. Initializes ERC165 for interface detection. 3. Stores the `systemAddress` which provides identity logic implementations.The `initializer` modifier ensures this function can only be called once.
  """
  ATKIdentityFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityFactoryImplementationTransactionOutput

  """
  Sets the identity factory's own OnChain ID and issues a self-claim.
  This is called during bootstrap by the system contract only. After setting the identity,      it issues a CONTRACT_IDENTITY claim to itself to attest that the factory is a contract identity.
  """
  ATKIdentityFactoryImplementationSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityFactoryImplementationSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityFactoryImplementationTransactionOutput

  """
  Adds or updates a claim. Checks authorization contracts first, falls back to CLAIM_ACTION_KEY if no authorization contracts.
  """
  ATKIdentityImplementationAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Adds a key with a specific purpose and type. Requires MANAGEMENT_KEY purpose.
  """
  ATKIdentityImplementationAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Approves or disapproves an execution.      Requires MANAGEMENT_KEY if the execution targets the identity itself.      Requires ACTION_KEY if the execution targets an external contract.
  """
  ATKIdentityImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Initiates an execution. If the sender has MANAGEMENT_KEY, or ACTION_KEY (for external calls),      the execution is auto-approved.
  """
  ATKIdentityImplementationExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Initializes the ATKIdentityImplementation state.
  This function is intended to be called only once by a proxy contract via delegatecall.      It sets the initial management key for this identity and initializes ERC165 support.      It also registers the provided claim authorization contracts.      This replaces the old `__Identity_init` call.
  """
  ATKIdentityImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Registers a claim authorization contract.
  Only management keys can register authorization contracts.
  """
  ATKIdentityImplementationRegisterClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationRegisterClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Removes a claim. Requires CLAIM_SIGNER_KEY purpose from the sender.
  """
  ATKIdentityImplementationRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Removes a claim authorization contract.
  Only management keys can remove authorization contracts.
  """
  ATKIdentityImplementationRemoveClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationRemoveClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Removes a purpose from a key. If it's the last purpose, the key is removed. Requires MANAGEMENT_KEY purpose.
  """
  ATKIdentityImplementationRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Revokes a claim by its ID.
  Revokes a claim by its ID.
  success True if the claim was successfully revoked.
  """
  ATKIdentityImplementationRevokeClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationRevokeClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Revokes a claim by its signature.
  Revokes a claim by its signature.
  """
  ATKIdentityImplementationRevokeClaimBySignature(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityImplementationRevokeClaimBySignatureInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityImplementationTransactionOutput

  """
  Registers multiple identities in a single transaction (batch operation).
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It iterates through the provided arrays (`_userAddresses`, `_identities`, `_countries`) and calls `_registerIdentity` for each set of parameters. It performs checks to ensure that all provided arrays have the same length to prevent errors.
  """
  ATKIdentityRegistryImplementationBatchRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationBatchRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Deletes an existing identity associated with a given user address from the registry.
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered using `this.contains()`. If registered, it retrieves the `IIdentity` contract to be deleted (for event emission), then calls `_identityStorage.removeIdentityFromStorage()` to remove the data from the storage contract. Emits an `IdentityRemoved` event upon successful deletion.
  """
  ATKIdentityRegistryImplementationDeleteIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationDeleteIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Initializes the `SMARTIdentityRegistryImplementation` contract after it has been deployed (typically called via a proxy).
  This function sets up the core components of the identity registry: 1.  Initializes `ERC165Upgradeable` for interface detection. 2.  Initializes `AccessControlUpgradeable` for role-based access management. 3.  Grants the `DEFAULT_ADMIN_ROLE`, `REGISTRY_MANAGER_ROLE` and `REGISTRAR_ROLE` to the `initialAdmin` address.     The `DEFAULT_ADMIN_ROLE` allows managing other roles.     The `REGISTRY_MANAGER_ROLE` allows managing the registry contracts.     The `REGISTRAR_ROLE` allows managing identities. 4.  Sets the addresses for the `_identityStorage`, `_trustedIssuersRegistry`, and `_topicSchemeRegistry` contracts.     These addresses must not be zero addresses. It is protected by the `initializer` modifier from OpenZeppelin, ensuring it can only be called once.
  """
  ATKIdentityRegistryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Recovers an identity by creating a new wallet registration with a new identity contract,         marking the old wallet as lost, and preserving the country code.
  This function handles the practical reality that losing wallet access often means losing      access to the identity contract as well. It creates a fresh start while maintaining      regulatory compliance data and recovery links for token reclaim.      The function is typically restricted to registrar roles.
  """
  ATKIdentityRegistryImplementationRecoverIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationRecoverIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Registers a new identity in the system, associating a user's address with an identity contract and a country code.
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It internally calls the `_registerIdentity` helper function to perform the registration logic after access control checks have passed.
  """
  ATKIdentityRegistryImplementationRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Updates the address of the identity storage contract.
  This function can only be called by an address holding the `REGISTRY_MANAGER_ROLE`. It performs a check to ensure the new `identityStorage_` address is not the zero address. Emits an `IdentityStorageSet` event upon successful update.
  """
  ATKIdentityRegistryImplementationSetIdentityRegistryStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationSetIdentityRegistryStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Updates the address of the topic scheme registry contract.
  This function can only be called by an address holding the `REGISTRY_MANAGER_ROLE`. It performs a check to ensure the new `topicSchemeRegistry_` address is not the zero address. Emits a `TopicSchemeRegistrySet` event upon successful update.
  """
  ATKIdentityRegistryImplementationSetTopicSchemeRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationSetTopicSchemeRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Updates the address of the trusted issuers registry contract.
  This function can only be called by an address holding the `REGISTRY_MANAGER_ROLE`. It performs a check to ensure the new `trustedIssuersRegistry_` address is not the zero address. Emits a `TrustedIssuersRegistrySet` event upon successful update.
  """
  ATKIdentityRegistryImplementationSetTrustedIssuersRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationSetTrustedIssuersRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Updates the country code associated with an existing registered identity.
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered. If registered, it calls `_identityStorage.modifyStoredInvestorCountry()` to update the country code in the storage contract. Emits a `CountryUpdated` event upon successful update.
  """
  ATKIdentityRegistryImplementationUpdateCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationUpdateCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Updates the `IIdentity` contract associated with an existing registered user address.
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the `_userAddress` is currently registered and if the new `_identity` address is not zero. If checks pass, it retrieves the old `IIdentity` contract (for event emission), then calls `_identityStorage.modifyStoredIdentity()` to update the identity contract in the storage contract. Emits an `IdentityUpdated` event upon successful update.
  """
  ATKIdentityRegistryImplementationUpdateIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryImplementationUpdateIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryImplementationTransactionOutput

  """
  Adds a new identity record to the storage, linking a user's wallet address to their identity contract and country code.
  This function can only be called by an address that holds the `IDENTITY_REGISTRY_MODULE_ROLE`. Typically, this role is granted to `SMARTIdentityRegistry` contracts that have been "bound" to this storage. It performs several critical validation checks before proceeding: -   The `_userAddress` (the user's external wallet) must not be the zero address (`address(0)`). -   The `_identity` (the address of the `IIdentity` contract for the user) must not be the zero address. -   An identity for the given `_userAddress` must not already exist in the storage to prevent duplicates. If all checks pass, the function: 1.  Stores the new identity information (identity contract address and country code) in the `_identities` mapping. 2.  Adds the `_userAddress` to the `_identityWallets` array for enumeration purposes. 3.  Updates the `_identityWalletsIndex` mapping to record the position of the new address in the array (for efficient removal later). 4.  Emits an `IdentityStored` event to notify off-chain listeners about the new registration.Reverts with:      - `InvalidIdentityWalletAddress()` if `_userAddress` is `address(0)`.      - `InvalidIdentityAddress()` if `_identity` is `address(0)`.      - `IdentityAlreadyExists(_userAddress)` if an identity is already registered for `_userAddress`.
  """
  ATKIdentityRegistryStorageImplementationAddIdentityToStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationAddIdentityToStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Authorizes a `SMARTIdentityRegistry` contract to modify data in this storage contract. This is achieved by recording the binding in internal state. The caller should ensure the registry has been granted the `IDENTITY_REGISTRY_MODULE_ROLE` in the centralized access manager.
  This function can only be called by an address holding the `SYSTEM_MANAGER_ROLE` (e.g., a `ATKSystem` contract or an identity factory). It performs several checks: -   The `_identityRegistry` address must not be the zero address. -   The `_identityRegistry` must not already be bound to this storage. If the checks pass, the function: 1.  Sets `_boundIdentityRegistries[_identityRegistry]` to `true`. 2.  Adds `_identityRegistry` to the `_boundIdentityRegistryAddresses` array. 3.  Updates `_boundIdentityRegistriesIndex` for the new registry. 4.  Emits an `IdentityRegistryBound` event.Reverts with:      - `InvalidIdentityRegistryAddress()` if `_identityRegistry` is `address(0)`.      - `IdentityRegistryAlreadyBound(_identityRegistry)` if the registry is already bound.
  """
  ATKIdentityRegistryStorageImplementationBindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationBindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Initializes the `ATKIdentityRegistryStorageImplementation` contract. This function acts as the constructor for an upgradeable contract and can only be called once.
  This function is typically called by the deployer immediately after the proxy contract pointing to this implementation is deployed. It sets up the initial state: 1.  `__ERC165_init_unchained()`: Initializes the ERC165 interface detection mechanism, allowing other contracts     to query what interfaces this contract supports (e.g., `IERC3643IdentityRegistryStorage`). 2.  Sets the centralized access manager reference for role-based access control. The `initializer` modifier from `Initializable` ensures this function can only be executed once, preventing re-initialization.
  """
  ATKIdentityRegistryStorageImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Establishes a recovery link between a lost wallet and its replacement.
  This creates a bidirectional mapping for token recovery purposes.
  """
  ATKIdentityRegistryStorageImplementationLinkWalletRecovery(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationLinkWalletRecoveryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Marks a user wallet as lost for a specific identity contract in the storage.
  Called by an authorized Identity Registry. This indicates the wallet should no longer be considered active      for verification or operations related to this specific identity, and potentially globally.
  """
  ATKIdentityRegistryStorageImplementationMarkWalletAsLost(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationMarkWalletAsLostInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Modifies the `IIdentity` contract address associated with an existing identity record.
  This function can only be called by an address holding the `STORAGE_MODIFIER_ROLE`. It performs checks to ensure: -   An identity record actually exists for the given `_userAddress`. -   The new `_identity` contract address is not the zero address. If both checks pass, it updates the `identityContract` field within the `Identity` struct stored for the `_userAddress` in the `_identities` mapping. Finally, it emits an `IdentityModified` event, providing both the old and new `IIdentity` contract addresses.Reverts with:      - `IdentityDoesNotExist(_userAddress)` if no identity record is found for `_userAddress`.      - `InvalidIdentityAddress()` if the new `_identity` address is `address(0)`.
  """
  ATKIdentityRegistryStorageImplementationModifyStoredIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationModifyStoredIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Modifies the country code associated with an existing identity record.
  This function can only be called by an address holding the `STORAGE_MODIFIER_ROLE`. It first checks if an identity record exists for the given `_userAddress`. If not, it reverts. If the identity exists, it updates the `country` field within the `Identity` struct stored for the `_userAddress` in the `_identities` mapping with the new `_country` code. Finally, it emits a `CountryModified` event, providing the `_userAddress` and the new `_country` code.Reverts with `IdentityDoesNotExist(_userAddress)` if no identity record is found for `_userAddress`.
  """
  ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Removes an existing identity record from the storage based on the user's wallet address.
  This function can only be called by an address holding the `STORAGE_MODIFIER_ROLE`. It first checks if an identity actually exists for the given `_userAddress`. If not, it reverts. If the identity exists, it performs the following actions: 1.  Retrieves the `IIdentity` contract address associated with the user to include in the event. 2.  Removes the `_userAddress` from the `_identityWallets` array using the "swap-and-pop" technique. This is an     O(1) operation:     a.  It finds the index of `_userAddress` using `_identityWalletsIndex`.     b.  It takes the last wallet address from the `_identityWallets` array.     c.  If the address to remove is not the last one, it moves the last address into the slot of the address being removed.     d.  It updates `_identityWalletsIndex` for the moved address.     e.  It then shortens the `_identityWallets` array by one (pop). 3.  Deletes the entry for `_userAddress` from the `_identityWalletsIndex` mapping. 4.  Deletes the entry for `_userAddress` from the main `_identities` mapping. 5.  Emits an `IdentityUnstored` event to notify off-chain listeners.Reverts with `IdentityDoesNotExist(_userAddress)` if no identity record is found for the `_userAddress`.
  """
  ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Revokes the authorization for a `SMARTIdentityRegistry` contract to modify data in this storage. This is achieved by removing the binding from internal state. The caller should ensure the registry's `IDENTITY_REGISTRY_MODULE_ROLE` is revoked in the centralized access manager.
  This function can only be called by an address holding the `SYSTEM_MANAGER_ROLE`. It first checks if the `_identityRegistry` is currently bound. If not, it reverts. If the registry is bound, the function: 1.  Removes `_identityRegistry` from the `_boundIdentityRegistryAddresses` array using the "swap-and-pop" technique (O(1) complexity). 2.  Updates `_boundIdentityRegistriesIndex` accordingly. 3.  Sets `_boundIdentityRegistries[_identityRegistry]` to `false`. 4.  Emits an `IdentityRegistryUnbound` event.Reverts with `IdentityRegistryNotBound(_identityRegistry)` if the registry is not currently bound.
  """
  ATKIdentityRegistryStorageImplementationUnbindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKIdentityRegistryStorageImplementationUnbindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKIdentityRegistryStorageImplementationTransactionOutput

  """
  Creates and deploys a new `ATKPushAirdropProxy` contract for a given configuration. The proxy will point to the current `atkPushAirdropImplementation`.
  This function performs the following steps: 1. **Authorization Check**: Verifies the caller has the `DEPLOYER_ROLE`. 2. **Salt Generation**: Computes a unique `salt` for CREATE2. 3. **Initialization Data**: Prepares the `initData` for the proxy to call `initialize` on the implementation. 4. **Proxy Deployment**: Deploys a `ATKPushAirdropProxy` using CREATE2. 5. **Event Emission**: Emits `ATKPushAirdropCreated`. 6. **Registry Update**: Adds the new proxy to `allAirdrops`.
  The address of the newly created `ATKPushAirdropProxy` contract.
  """
  ATKPushAirdropFactoryImplementationCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropFactoryImplementationCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropFactoryImplementationTransactionOutput

  """
  Initializes the `ATKPushAirdropFactory`.
  Initializes the factory, deploys the initial `ATKPushAirdrop` implementation, and sets up support for meta-transactions via ERC2771Context.
  """
  ATKPushAirdropFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropFactoryImplementationTransactionOutput

  """
  Updates the address of the `ATKPushAirdrop` implementation contract.
  Only callable by the factory owner. New proxies created after this call will use the new implementation. This does NOT automatically upgrade existing proxy instances.
  """
  ATKPushAirdropFactoryImplementationUpdateImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropFactoryImplementationUpdateImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropFactoryImplementationTransactionOutput

  """
  Distributes tokens to multiple recipients in a single transaction.
  Only the contract owner can distribute tokens. Batch version for gas efficiency.
  """
  ATKPushAirdropImplementationBatchDistribute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropImplementationBatchDistributeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropImplementationTransactionOutput

  """
  Distributes tokens to a single recipient with Merkle proof verification.
  Only the contract owner can distribute tokens. Verifies Merkle proof and distribution cap.
  """
  ATKPushAirdropImplementationDistribute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropImplementationDistributeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropImplementationTransactionOutput

  """
  Initializes the push airdrop contract with specified parameters.
  Sets up the base airdrop functionality and push-specific parameters.      Deploys its own bitmap claim tracker for efficient distribution tracking.
  """
  ATKPushAirdropImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropImplementationTransactionOutput

  """
  Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
  """
  ATKPushAirdropImplementationRenounceOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropImplementationTransactionOutput

  """
  Updates the distribution cap.
  Only the owner can update the distribution cap.
  """
  ATKPushAirdropImplementationSetDistributionCap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropImplementationSetDistributionCapInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropImplementationTransactionOutput

  """
  Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
  """
  ATKPushAirdropImplementationTransferOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropImplementationTransferOwnershipInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropImplementationTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  ATKPushAirdropImplementationWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKPushAirdropImplementationWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKPushAirdropImplementationTransactionOutput
  ATKStableCoinFactoryImplementationCreateStableCoin(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinFactoryImplementationCreateStableCoinInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinFactoryImplementationTransactionOutput

  """
  Initializes the token registry.
  """
  ATKStableCoinFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinFactoryImplementationTransactionOutput

  """
  Updates the address of the token implementation contract.
  This function can only be called by an account with the DEFAULT_ADMIN_ROLE.      It allows changing the underlying contract that handles token logic.      Emits a {TokenImplementationUpdated} event on success.
  """
  ATKStableCoinFactoryImplementationUpdateTokenImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinFactoryImplementationUpdateTokenImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinFactoryImplementationTransactionOutput

  """
  Adds a new compliance module.
  """
  ATKStableCoinImplementationAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  ATKStableCoinImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Burns tokens from multiple addresses in a batch.
  """
  ATKStableCoinImplementationBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Forces transfers of tokens from multiple addresses to other addresses.
  """
  ATKStableCoinImplementationBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Freezes partial tokens for multiple addresses in a batch.
  """
  ATKStableCoinImplementationBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Mints tokens to multiple addresses in a batch.
  """
  ATKStableCoinImplementationBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch.
  """
  ATKStableCoinImplementationBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Transfers tokens to multiple recipients in a batch from the effective sender.
  Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.
  """
  ATKStableCoinImplementationBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Unfreezes partial tokens for multiple addresses in a batch.
  """
  ATKStableCoinImplementationBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Burns tokens from a specified address.
  """
  ATKStableCoinImplementationBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Recovers all tokens from a lost wallet and transfers them to a new wallet.
  """
  ATKStableCoinImplementationForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Forces a transfer of tokens from one address to another.
  bool indicating success of the transfer.
  """
  ATKStableCoinImplementationForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Freezes a partial amount of tokens for an address.
  """
  ATKStableCoinImplementationFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput
  ATKStableCoinImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Mints new tokens to a specified address.
  """
  ATKStableCoinImplementationMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Pauses all token transfers.
  """
  ATKStableCoinImplementationPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Recovers accidentally sent ERC20 tokens.
  """
  ATKStableCoinImplementationRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.
  """
  ATKStableCoinImplementationRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Allows the caller (the token holder) to redeem a specific amount of their own tokens.
  This function implements the `redeem` function from the `ISMARTRedeemable` interface. It allows a token holder to burn a specific `amount` of their own tokens. It delegates the core logic to the internal `__smart_redeemLogic` function. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption was successful (typically `true`).
  """
  ATKStableCoinImplementationRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Allows the caller (the token holder) to redeem all of their own tokens.
  This function implements the `redeemAll` function from the `ISMARTRedeemable` interface. It allows a token holder to burn their entire token balance. First, it retrieves the caller's full balance using `__redeemable_getBalance`. Then, it delegates the core logic to the internal `__smart_redeemLogic` function with the retrieved balance. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption of all tokens was successful (typically `true`).
  """
  ATKStableCoinImplementationRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Removes a compliance module.
  """
  ATKStableCoinImplementationRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Freezes or unfreezes an address.
  """
  ATKStableCoinImplementationSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Sets the compliance contract address.
  """
  ATKStableCoinImplementationSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Sets the identity registry contract address.
  """
  ATKStableCoinImplementationSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Sets the on-chain identity contract address.
  """
  ATKStableCoinImplementationSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Sets parameters for a compliance module.
  """
  ATKStableCoinImplementationSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Transfers tokens to a specified address.
  bool indicating success of the transfer.
  """
  ATKStableCoinImplementationTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  ATKStableCoinImplementationTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Unfreezes a partial amount of tokens for an address.
  """
  ATKStableCoinImplementationUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKStableCoinImplementationUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Unpauses token transfers.
  """
  ATKStableCoinImplementationUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKStableCoinImplementationTransactionOutput

  """
  Grants a role to multiple accounts in a single transaction.
  Caller must have the role's admin role for each grant.
  """
  ATKSystemAccessManagerImplementationBatchGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationBatchGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Revokes a role from multiple accounts in a single transaction.
  Caller must have the role's admin role for each revocation.
  """
  ATKSystemAccessManagerImplementationBatchRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationBatchRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Grants multiple roles to a single account.
  Caller must have the admin role for each role being granted.
  """
  ATKSystemAccessManagerImplementationGrantMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationGrantMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Grants a role to an account.
  Caller must have the role's admin role.
  """
  ATKSystemAccessManagerImplementationGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Initializes the access manager with initial admin accounts.
  Reverts if no initial admins are provided.
  """
  ATKSystemAccessManagerImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Allows an account to renounce multiple roles.
  Can only renounce roles for yourself.
  """
  ATKSystemAccessManagerImplementationRenounceMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationRenounceMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Allows an account to renounce a role.
  Can only renounce roles for yourself.
  """
  ATKSystemAccessManagerImplementationRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Revokes multiple roles from a single account.
  Caller must have the admin role for each role being revoked.
  """
  ATKSystemAccessManagerImplementationRevokeMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationRevokeMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Revokes a role from an account.
  Caller must have the role's admin role.
  """
  ATKSystemAccessManagerImplementationRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Sets the admin role for a given role.
  """
  ATKSystemAccessManagerImplementationSetRoleAdmin(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationSetRoleAdminInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
  """
  ATKSystemAccessManagerImplementationUpgradeToAndCall(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAccessManagerImplementationUpgradeToAndCallInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAccessManagerImplementationTransactionOutput

  """
  Initializes the addon registry with initial admin and system address.
  """
  ATKSystemAddonRegistryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAddonRegistryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAddonRegistryImplementationTransactionOutput

  """
  Registers a new system addon with the registry.
  Creates a new proxy for the addon and grants necessary roles.
  The address of the newly created addon proxy.
  """
  ATKSystemAddonRegistryImplementationRegisterSystemAddon(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAddonRegistryImplementationRegisterSystemAddonInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAddonRegistryImplementationTransactionOutput

  """
  Updates the implementation address for an existing addon type.
  Can only be called by accounts with IMPLEMENTATION_MANAGER_ROLE.
  """
  ATKSystemAddonRegistryImplementationSetAddonImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemAddonRegistryImplementationSetAddonImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemAddonRegistryImplementationTransactionOutput

  """
  Creates and deploys a new `ATKSystem` instance using the factory's stored default implementation addresses.
  When this function is called, a new `ATKSystem` contract is created on the blockchain. The caller of this function (which is `_msgSender()`, resolving to the original user in an ERC2771 meta-transaction context) will be set as the initial administrator (granted `DEFAULT_ADMIN_ROLE`) of the newly created `ATKSystem`. The new system's address is added to the `atkSystems` array for tracking, and a `ATKSystemCreated` event is emitted.
  The blockchain address of the newly created `ATKSystem` contract.
  """
  ATKSystemFactoryCreateSystem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemFactoryTransactionOutput

  """
  Deploys and initializes the proxy contracts for all core ATK modules.
  This function is a critical step in setting up the ATKSystem. It should typically be called once by an admin after the `ATKSystem` contract itself is deployed and initial implementation addresses are set. It creates new instances of proxy contracts (e.g., `ATKComplianceProxy`, `ATKIdentityRegistryProxy`) and links them to this `ATKSystem` instance. It also performs necessary bindings between these proxies, such as linking the `IdentityRegistryStorageProxy` to the `IdentityRegistryProxy`. This function is protected by `onlySystemRole(DEFAULT_ADMIN_ROLE)` (meaning only admins can call it) and `nonReentrant` (preventing it from being called again while it's already executing, which guards against certain attacks). Reverts if any required implementation address (for compliance, identity registry, storage, trusted issuers, factory) is not set (i.e., is the zero address) before calling this function.
  """
  ATKSystemImplementationBootstrap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Initializes the ATKSystem contract.
  Sets up the initial administrator, validates and stores the initial implementation addresses for all modules and identity types, and sets the trusted forwarder for meta-transactions. It performs interface checks on all provided implementation addresses to ensure they conform to the required standards.
  """
  ATKSystemImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Issues a claim by the organisation identity to a target identity.
  Only callable by accounts with TOKEN_FACTORY_MODULE_ROLE or ISSUER_CLAIM_MANAGER_ROLE.
  """
  ATKSystemImplementationIssueClaimByOrganisation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationIssueClaimByOrganisationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the addon registry's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if the provided `implementation` address is the zero address or does not support the `ISystemAddonRegistry` interface. Emits a `SystemAddonRegistryImplementationUpdated` event upon successful update.
  """
  ATKSystemImplementationSetAddonRegistryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetAddonRegistryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the compliance module's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if the provided `implementation` address is the zero address or does not support the `ISMARTCompliance` interface. Emits a `ComplianceImplementationUpdated` event upon successful update.
  """
  ATKSystemImplementationSetComplianceImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetComplianceImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the compliance module registry's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if the provided `implementation` address is the zero address or does not support the `IComplianceModuleRegistry` interface. Emits a `ComplianceModuleRegistryImplementationUpdated` event upon successful update.
  """
  ATKSystemImplementationSetComplianceModuleRegistryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetComplianceModuleRegistryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the contract identity implementation (logic template).
  Only callable by an address with the `IMPLEMENTATION_MANAGER_ROLE`. Reverts if `implementation` is zero or doesn't support `IIdentity` (from OnchainID standard). Emits a `ContractIdentityImplementationUpdated` event.
  """
  ATKSystemImplementationSetContractIdentityImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetContractIdentityImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the identity factory module's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if `implementation` is zero or doesn't support `IATKIdentityFactory`. Emits an `IdentityFactoryImplementationUpdated` event.
  """
  ATKSystemImplementationSetIdentityFactoryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetIdentityFactoryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the standard identity contract's implementation (logic template).
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if `implementation` is zero or doesn't support `IIdentity` (from OnchainID standard). Emits an `IdentityImplementationUpdated` event.
  """
  ATKSystemImplementationSetIdentityImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetIdentityImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the identity registry module's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if the `implementation` address is zero or does not support `ISMARTIdentityRegistry`. Emits an `IdentityRegistryImplementationUpdated` event.
  """
  ATKSystemImplementationSetIdentityRegistryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetIdentityRegistryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the identity registry storage module's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if `implementation` is zero or doesn't support `ISMARTIdentityRegistryStorage`. Emits an `IdentityRegistryStorageImplementationUpdated` event.
  """
  ATKSystemImplementationSetIdentityRegistryStorageImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetIdentityRegistryStorageImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the token access manager contract's implementation (logic).
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if `implementation` is zero or doesn't support `ISMARTTokenAccessManager`. Emits a `TokenAccessManagerImplementationUpdated` event.
  """
  ATKSystemImplementationSetTokenAccessManagerImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetTokenAccessManagerImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the token factory registry's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if the provided `implementation` address is the zero address or does not support the `ITokenFactoryRegistry` interface. Emits a `TokenFactoryRegistryImplementationUpdated` event upon successful update.
  """
  ATKSystemImplementationSetTokenFactoryRegistryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetTokenFactoryRegistryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the topic scheme registry module's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if `implementation` is zero or doesn't support `ISMARTTopicSchemeRegistry`. Emits a `TopicSchemeRegistryImplementationUpdated` event.
  """
  ATKSystemImplementationSetTopicSchemeRegistryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetTopicSchemeRegistryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Sets (updates) the address of the trusted issuers registry module's implementation (logic) contract.
  Only callable by an address with the `DEFAULT_ADMIN_ROLE`. Reverts if `implementation` is zero or doesn't support `IERC3643TrustedIssuersRegistry`. Emits a `TrustedIssuersRegistryImplementationUpdated` event.
  """
  ATKSystemImplementationSetTrustedIssuersRegistryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationSetTrustedIssuersRegistryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.
  """
  ATKSystemImplementationUpgradeToAndCall(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKSystemImplementationUpgradeToAndCallInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKSystemImplementationTransactionOutput

  """
  Creates and deploys a new `ATKTimeBoundAirdropProxy` contract for a given configuration. The proxy will point to the current `atkTimeBoundAirdropImplementation`.
  This function performs the following steps: 1. **Authorization Check**: Verifies the caller has the `DEPLOYER_ROLE`. 2. **Salt Generation**: Computes a unique `salt` for CREATE2. 3. **Initialization Data**: Prepares the `initData` for the proxy to call `initialize` on the implementation. 4. **Proxy Deployment**: Deploys a `ATKTimeBoundAirdropProxy` using CREATE2. 5. **Event Emission**: Emits `ATKTimeBoundAirdropCreated`. 6. **Registry Update**: Adds the new proxy to `allAirdrops`.
  The address of the newly created `ATKTimeBoundAirdropProxy` contract.
  """
  ATKTimeBoundAirdropFactoryImplementationCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropFactoryImplementationCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropFactoryImplementationTransactionOutput

  """
  Initializes the `ATKTimeBoundAirdropFactory`.
  Initializes the factory, deploys the initial `ATKTimeBoundAirdrop` implementation, and sets up support for meta-transactions via ERC2771Context.
  """
  ATKTimeBoundAirdropFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropFactoryImplementationTransactionOutput

  """
  Updates the address of the `ATKTimeBoundAirdrop` implementation contract.
  Only callable by the factory owner. New proxies created after this call will use the new implementation. This does NOT automatically upgrade existing proxy instances.
  """
  ATKTimeBoundAirdropFactoryImplementationUpdateImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropFactoryImplementationUpdateImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropFactoryImplementationTransactionOutput

  """
  Claims multiple airdrop allocations for the caller in a single transaction.
  Batch version for gas efficiency. Uses onlyActive modifier for time validation.
  """
  ATKTimeBoundAirdropImplementationBatchClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropImplementationBatchClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropImplementationTransactionOutput

  """
  Claims an airdrop allocation for the caller within the time window.
  Validates time constraints, Merkle proof, and processes claims.
  """
  ATKTimeBoundAirdropImplementationClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropImplementationClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropImplementationTransactionOutput

  """
  Initializes the time-bound airdrop contract with specified parameters.
  Sets up the base airdrop functionality and time-bound specific parameters.      Deploys its own amount claim tracker for partial claims support.
  """
  ATKTimeBoundAirdropImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropImplementationTransactionOutput

  """
  Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
  """
  ATKTimeBoundAirdropImplementationRenounceOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropImplementationTransactionOutput

  """
  Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
  """
  ATKTimeBoundAirdropImplementationTransferOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropImplementationTransferOwnershipInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropImplementationTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  ATKTimeBoundAirdropImplementationWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTimeBoundAirdropImplementationWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTimeBoundAirdropImplementationTransactionOutput

  """
  Grants `role` to each address in `accounts`.
  This function now calls the `grantRole` from `AccessControlUpgradeable`.      Requires the caller to have the admin role for `role`.
  """
  ATKTokenAccessManagerImplementationBatchGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationBatchGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Revokes `role` from each address in `accounts`.
  This function now calls the `revokeRole` from `AccessControlUpgradeable`.      Requires the caller to have the admin role for `role`.
  """
  ATKTokenAccessManagerImplementationBatchRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationBatchRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Grants multiple roles to a single account.
  This function calls the `grantRole` from `AccessControlUpgradeable` for each role.      Requires the caller to have the admin role for each `role` being granted.
  """
  ATKTokenAccessManagerImplementationGrantMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationGrantMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  ATKTokenAccessManagerImplementationGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Initializes the access manager.
  This function replaces the constructor and should be called only once, typically by the deployer      or an upgrade mechanism.      It grants the `DEFAULT_ADMIN_ROLE` to the initial admin.
  """
  ATKTokenAccessManagerImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Renounces multiple roles from the calling account.
  This function calls the `renounceRole` from `AccessControlUpgradeable` for each role.      Requires the caller to have the admin role for each `role` being revoked.
  """
  ATKTokenAccessManagerImplementationRenounceMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationRenounceMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  ATKTokenAccessManagerImplementationRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Revokes multiple roles from a single account.
  This function calls the `revokeRole` from `AccessControlUpgradeable` for each role.      Requires the caller to have the admin role for each `role` being revoked.
  """
  ATKTokenAccessManagerImplementationRevokeMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationRevokeMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  ATKTokenAccessManagerImplementationRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenAccessManagerImplementationRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenAccessManagerImplementationTransactionOutput

  """
  Initializes the token factory registry with initial admin and system address.
  """
  ATKTokenFactoryRegistryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenFactoryRegistryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenFactoryRegistryImplementationTransactionOutput

  """
  Registers a new token factory type in the registry.
  Creates an upgradeable proxy for the factory and grants necessary permissions.
  The address of the deployed factory proxy.
  """
  ATKTokenFactoryRegistryImplementationRegisterTokenFactory(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenFactoryRegistryImplementationRegisterTokenFactoryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenFactoryRegistryImplementationTransactionOutput

  """
  Updates the implementation address for an existing token factory type.
  Only callable by addresses with IMPLEMENTATION_MANAGER_ROLE.
  """
  ATKTokenFactoryRegistryImplementationSetTokenFactoryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenFactoryRegistryImplementationSetTokenFactoryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenFactoryRegistryImplementationTransactionOutput

  """
  Activates the sale, allowing purchases to be made.
  """
  ATKTokenSaleActivateSale(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Adds a payment currency that can be used to purchase tokens.
  """
  ATKTokenSaleAddPaymentCurrency(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleAddPaymentCurrencyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Allows a buyer to purchase tokens using native currency (e.g., ETH).
  The amount of tokens purchased.
  """
  ATKTokenSaleBuyTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Allows a buyer to purchase tokens using an ERC20 token.
  The amount of tokens purchased.
  """
  ATKTokenSaleBuyTokensWithERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleBuyTokensWithERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Configures vesting parameters if tokens should vest over time.
  """
  ATKTokenSaleConfigureVesting(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleConfigureVestingInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Ends the sale permanently before its scheduled end time.
  """
  ATKTokenSaleEndSale(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Deploys a new token sale contract.
  The address of the deployed token sale.
  """
  ATKTokenSaleFactoryDeployTokenSale(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleFactoryDeployTokenSaleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleFactoryTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  ATKTokenSaleFactoryGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleFactoryGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleFactoryTransactionOutput

  """
  Initializes the factory contract.
  """
  ATKTokenSaleFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleFactoryTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  ATKTokenSaleFactoryRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleFactoryRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleFactoryTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  ATKTokenSaleFactoryRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleFactoryRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleFactoryTransactionOutput

  """
  Updates the implementation address.
  """
  ATKTokenSaleFactoryUpdateImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleFactoryUpdateImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleFactoryTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  ATKTokenSaleGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Initializes the token sale contract.
  """
  ATKTokenSaleInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Pauses the sale, temporarily preventing purchases.
  """
  ATKTokenSalePauseSale(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Removes a payment currency from the list of accepted currencies.
  """
  ATKTokenSaleRemovePaymentCurrency(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleRemovePaymentCurrencyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  ATKTokenSaleRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  ATKTokenSaleRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Sets individual purchase limits per buyer.
  """
  ATKTokenSaleSetPurchaseLimits(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleSetPurchaseLimitsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Allows the issuer to withdraw accumulated funds from sales.
  The amount withdrawn.
  """
  ATKTokenSaleWithdrawFunds(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTokenSaleWithdrawFundsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Allows a buyer to withdraw their vested tokens.
  The amount of tokens withdrawn.
  """
  ATKTokenSaleWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTokenSaleTransactionOutput

  """
  Registers multiple topic schemes in a single transaction.
  topicIds are generated from names using keccak256 hash.
  """
  ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemes(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTopicSchemeRegistryImplementationTransactionOutput

  """
  Initializes the SMARTTopicSchemeRegistryImplementation contract.
  Sets up the system access manager reference - roles are managed centrally.
  """
  ATKTopicSchemeRegistryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTopicSchemeRegistryImplementationTransactionOutput

  """
  Registers a new topic scheme with its name and signature.
  topicId is generated as uint256(keccak256(abi.encodePacked(name))).
  """
  ATKTopicSchemeRegistryImplementationRegisterTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationRegisterTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTopicSchemeRegistryImplementationTransactionOutput

  """
  Removes a topic scheme from the registry.
  """
  ATKTopicSchemeRegistryImplementationRemoveTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationRemoveTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTopicSchemeRegistryImplementationTransactionOutput

  """
  Updates an existing topic scheme's signature.
  """
  ATKTopicSchemeRegistryImplementationUpdateTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTopicSchemeRegistryImplementationUpdateTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTopicSchemeRegistryImplementationTransactionOutput

  """
  Adds a new trusted issuer to the registry with a specified list of claim topics they are authorized for.
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It performs several validation checks: -   The `_trustedIssuer` address must not be the zero address. -   The `_claimTopics` array must not be empty (an issuer must be trusted for at least one topic). -   The issuer must not already be registered to prevent duplicates. If all checks pass, the function: 1.  Stores the issuer's details (address, claim topics, and `exists = true`) in the `_trustedIssuers` mapping. 2.  Adds the issuer's address to the `_issuerAddresses` array for enumeration. 3.  For each claim topic in `_claimTopics`, it calls `_addIssuerToClaimTopic` to update the     `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, linking the issuer to that topic. 4.  Emits a `TrustedIssuerAdded` event.Reverts with:      - `InvalidIssuerAddress()` if `_trustedIssuer` is `address(0)`.      - `NoClaimTopicsProvided()` if `_claimTopics` is empty.      - `IssuerAlreadyExists(issuerAddress)` if the issuer is already registered.
  """
  ATKTrustedIssuersRegistryImplementationAddTrustedIssuer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationAddTrustedIssuerInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput

  """
  Initializes the `SMARTTrustedIssuersRegistryImplementation` contract. This function acts as the constructor for an upgradeable contract and can only be called once.
  This function is typically called by the deployer immediately after the proxy contract pointing to this implementation is deployed. It sets up the initial state: 1.  `__ERC165_init_unchained()`: Initializes ERC165 interface detection. 2.  `__AccessControlEnumerable_init_unchained()`: Initializes the role-based access control system. 3.  The `ERC2771ContextUpgradeable` is already initialized by its own constructor. 4.  `_grantRole(DEFAULT_ADMIN_ROLE, initialAdmin)`: Grants the `DEFAULT_ADMIN_ROLE` to `initialAdmin`.     The admin can manage all other roles, including granting/revoking `REGISTRAR_ROLE`. 5.  `_grantRole(REGISTRAR_ROLE, initialAdmin)`: Grants the `REGISTRAR_ROLE` to `initialAdmin`.     This allows the `initialAdmin` to immediately start adding trusted issuers. This role can later be     transferred or granted to other operational addresses/contracts. The `initializer` modifier from `Initializable` ensures this function can only be executed once.Reverts with:      - `InvalidAdminAddress()` if `initialAdmin` is `address(0)`.      - `InvalidRegistrarAddress()` if any address in `initialRegistrars` is `address(0)`.
  """
  ATKTrustedIssuersRegistryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput

  """
  Removes an existing trusted issuer from the registry. This revokes their trusted status for all previously associated claim topics.
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer actually exists in the registry. If not, it reverts. If the issuer exists, the function: 1.  Retrieves the list of claim topics the issuer was associated with from `_trustedIssuers`. 2.  Calls `_removeAddressFromList` to remove the issuer's address from the `_issuerAddresses` array. 3.  For each claim topic the issuer was associated with, it calls `_removeIssuerFromClaimTopic` to update     the `_issuersByClaimTopic` and `_claimTopicIssuerIndex` mappings, effectively unlinking the issuer from     those topics. 4.  Deletes the issuer's main record from the `_trustedIssuers` mapping (which also sets `exists` to `false`     implicitly for a new struct if the address were to be reused, though deletion is more explicit here). 5.  Emits a `TrustedIssuerRemoved` event.Reverts with `IssuerDoesNotExist(issuerAddress)` if the issuer is not found in the registry.
  """
  ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuerInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput

  """
  Updates the list of claim topics for an existing trusted issuer.
  This function can only be called by an address holding the `REGISTRAR_ROLE`. It first checks if the issuer exists and if the new list of claim topics is not empty. The update process involves: 1.  Retrieving the issuer's current list of claim topics. 2.  Removing the issuer from the lookup mappings (`_issuersByClaimTopic`, `_claimTopicIssuerIndex`) for all     their *current* claim topics. 3.  Adding the issuer to the lookup mappings for all topics in the *new* `_newClaimTopics` list. 4.  Updating the `claimTopics` array stored in the issuer's `TrustedIssuer` struct in `_trustedIssuers` to     reflect the `_newClaimTopics`. 5.  Emitting a `ClaimTopicsUpdated` event. This approach ensures that the lookup mappings are consistent with the issuer's newly assigned topics.Reverts with:      - `IssuerDoesNotExist(issuerAddress)` if the issuer is not found.      - `NoClaimTopicsProvided()` if `_newClaimTopics` is empty.
  """
  ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopics(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopicsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKTrustedIssuersRegistryImplementationTransactionOutput

  """
  Adds signatures to an existing transaction.
  """
  ATKVaultAddSignatures(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultAddSignaturesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Creates and deploys a new `ATKVault` contract for a given configuration.
  This function performs the following steps: 1. **Authorization Check**: Verifies the caller has the `DEPLOYER_ROLE`. 2. **Salt Generation**: Computes a unique `salt` for CREATE2. 3. **Constructor Arguments**: Prepares the constructor arguments for the ATKVault contract (without onchainId). 4. **Vault Deployment**: Deploys an `ATKVault` using CREATE2. 5. **Identity Creation**: Creates a contract identity for the vault and registers it with the identity registry. 6. **Identity Assignment**: Sets the onchainId on the vault. 7. **Event Emission**: Emits `ATKVaultCreated`. 8. **Registry Update**: Adds the new vault to `allVaults`.
  Address of the newly created vault.
  """
  ATKVaultFactoryImplementationCreateVault(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultFactoryImplementationCreateVaultInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultFactoryImplementationTransactionOutput

  """
  Initializes the `ATKVaultFactory`.
  Initializes the factory and sets up support for meta-transactions via ERC2771Context.
  """
  ATKVaultFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultFactoryImplementationTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.
  """
  ATKVaultGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Pauses the contract, preventing most operations.
  Can only be called by emergency role.
  """
  ATKVaultPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.
  """
  ATKVaultRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.
  """
  ATKVaultRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Sets the OnchainID address for this vault.
  Can only be called by the governance role.
  """
  ATKVaultSetOnchainId(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultSetOnchainIdInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Changes the number of confirmations required.
  Can only be called by governance role.
  """
  ATKVaultSetRequirement(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultSetRequirementInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Sets the weight for a signer (only used if weighted signatures are enabled).
  Can only be called by governance role.
  """
  ATKVaultSetSignerWeight(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultSetSignerWeightInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Sets the total weight required for weighted signature execution.
  Can only be called by governance role.
  """
  ATKVaultSetTotalWeightRequired(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultSetTotalWeightRequiredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Enables or disables weighted signatures.
  Can only be called by governance role.
  """
  ATKVaultSetWeightedSignatures(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultSetWeightedSignaturesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Submits a new transaction that requires signatures for execution.
  Index of the created transaction.
  """
  ATKVaultSubmitTransactionWithSignatures(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVaultSubmitTransactionWithSignaturesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Unpauses the contract, allowing operations to resume.
  Can only be called by emergency role.
  """
  ATKVaultUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVaultTransactionOutput

  """
  Creates and deploys a new `ATKVestingAirdropProxy` contract for a given configuration. The proxy will point to the current `atkVestingAirdropImplementation`.
  This function performs the following steps: 1. **Authorization Check**: Verifies the caller has the `DEPLOYER_ROLE`. 2. **Salt Generation**: Computes a unique `salt` for CREATE2. 3. **Initialization Data**: Prepares the `initData` for the proxy to call `initialize` on the implementation. 4. **Proxy Deployment**: Deploys a `ATKVestingAirdropProxy` using CREATE2. 5. **Event Emission**: Emits `ATKVestingAirdropCreated`. 6. **Registry Update**: Adds the new proxy to `allAirdrops`.
  The address of the newly created `ATKVestingAirdropProxy` contract.
  """
  ATKVestingAirdropFactoryImplementationCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropFactoryImplementationCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropFactoryImplementationTransactionOutput

  """
  Initializes the `ATKVestingAirdropFactory`.
  Initializes the factory, deploys the initial `ATKVestingAirdrop` implementation, and sets up support for meta-transactions via ERC2771Context.
  """
  ATKVestingAirdropFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropFactoryImplementationTransactionOutput

  """
  Updates the address of the `ATKVestingAirdrop` implementation contract.
  Only callable by the factory owner. New proxies created after this call will use the new implementation. This does NOT automatically upgrade existing proxy instances.
  """
  ATKVestingAirdropFactoryImplementationUpdateImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropFactoryImplementationUpdateImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropFactoryImplementationTransactionOutput

  """
  Claims vested tokens for multiple allocations in a single transaction.
  Overrides the abstract batchClaim function from ATKAirdrop. All indices must have vesting initialized.
  """
  ATKVestingAirdropImplementationBatchClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationBatchClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Initializes vesting for multiple allocations in a single transaction.
  Batch version of initializeVesting for gas efficiency when handling multiple indices.
  """
  ATKVestingAirdropImplementationBatchInitializeVesting(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationBatchInitializeVestingInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Claims vested tokens for a specific allocation after vesting initialization.
  Overrides the abstract claim function from ATKAirdrop. Requires vesting to be initialized first.      The amount claimed is determined by the vesting strategy based on time elapsed since initialization.
  """
  ATKVestingAirdropImplementationClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Initializes the vesting airdrop contract with specified parameters.
  Sets up the base airdrop functionality and vesting-specific parameters.      Deploys its own claim tracker for secure claim management.
  """
  ATKVestingAirdropImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Initializes vesting for a specific allocation without transferring tokens.
  Users must call this function first to start their vesting schedule before they can claim tokens.      The vesting start time is recorded when this function is called.
  """
  ATKVestingAirdropImplementationInitializeVesting(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationInitializeVestingInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
  """
  ATKVestingAirdropImplementationRenounceOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Updates the vesting strategy contract.
  Only the owner can update the vesting strategy. The new strategy must support multiple claims.
  """
  ATKVestingAirdropImplementationSetVestingStrategy(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationSetVestingStrategyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
  """
  ATKVestingAirdropImplementationTransferOwnership(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationTransferOwnershipInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  ATKVestingAirdropImplementationWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKVestingAirdropImplementationWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKVestingAirdropImplementationTransactionOutput
  ATKXvPSettlementFactoryImplementationCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKXvPSettlementFactoryImplementationCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementFactoryImplementationTransactionOutput

  """
  Initializes the factory with system address and admin.
  Can only be called once, sets up initial roles and system integration.
  """
  ATKXvPSettlementFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKXvPSettlementFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementFactoryImplementationTransactionOutput

  """
  Updates the address of the XvPSettlement implementation contract.
  Only callable by the implementation manager. New proxies created after this call will use the new implementation. This does NOT automatically upgrade existing proxy instances.
  """
  ATKXvPSettlementFactoryImplementationUpdateImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKXvPSettlementFactoryImplementationUpdateImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementFactoryImplementationTransactionOutput

  """
  Approves a XvP settlement for execution.
  The caller must be a party in the settlement's flows.
  True if the approval was successful.
  """
  ATKXvPSettlementImplementationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementImplementationTransactionOutput

  """
  Cancels the settlement.
  The caller must be involved in the settlement and it must not be executed yet.
  True if the cancellation was successful.
  """
  ATKXvPSettlementImplementationCancel(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementImplementationTransactionOutput

  """
  Executes the flows if all approvals are in place.
  True if execution was successful.
  """
  ATKXvPSettlementImplementationExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementImplementationTransactionOutput
  ATKXvPSettlementImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ATKXvPSettlementImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementImplementationTransactionOutput

  """
  Revokes approval for a XvP settlement.
  The caller must have previously approved the settlement.
  True if the revocation was successful.
  """
  ATKXvPSettlementImplementationRevokeApproval(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ATKXvPSettlementImplementationTransactionOutput

  """
  Initializes the token registry.
  """
  AbstractATKTokenFactoryImplementationInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractATKTokenFactoryImplementationInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractATKTokenFactoryImplementationTransactionOutput

  """
  Updates the address of the token implementation contract.
  This function can only be called by an account with the DEFAULT_ADMIN_ROLE.      It allows changing the underlying contract that handles token logic.      Emits a {TokenImplementationUpdated} event on success.
  """
  AbstractATKTokenFactoryImplementationUpdateTokenImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractATKTokenFactoryImplementationUpdateTokenImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractATKTokenFactoryImplementationTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  AbstractAddressListComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractAddressListComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractAddressListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  AbstractAddressListComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractAddressListComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractAddressListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  AbstractAddressListComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractAddressListComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractAddressListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  AbstractComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  AbstractComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  AbstractComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  AbstractCountryComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractCountryComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractCountryComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  AbstractCountryComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractCountryComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractCountryComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  AbstractCountryComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractCountryComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractCountryComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  AbstractIdentityComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractIdentityComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractIdentityComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  AbstractIdentityComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractIdentityComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractIdentityComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  AbstractIdentityComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AbstractIdentityComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AbstractIdentityComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  AddressBlockListComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AddressBlockListComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AddressBlockListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  AddressBlockListComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AddressBlockListComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AddressBlockListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  AddressBlockListComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: AddressBlockListComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): AddressBlockListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  CountryAllowListComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CountryAllowListComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): CountryAllowListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  CountryAllowListComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CountryAllowListComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): CountryAllowListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  CountryAllowListComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CountryAllowListComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): CountryAllowListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  CountryBlockListComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CountryBlockListComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): CountryBlockListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  CountryBlockListComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CountryBlockListComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): CountryBlockListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  CountryBlockListComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: CountryBlockListComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): CountryBlockListComplianceModuleTransactionOutput

  """
  Deploy a contract
  """
  DeployContract(
    """
    The ABI of the contract
    """
    abi: JSON!

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The constructor arguments (must be an array)
    """
    constructorArguments: ConstructorArguments

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    The name of the contract
    """
    name: String!

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKAirdrop contract
  """
  DeployContractATKAirdrop(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKAmountClaimTracker contract
  """
  DeployContractATKAmountClaimTracker(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKAmountClaimTrackerInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKAssetProxy contract
  """
  DeployContractATKAssetProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKAssetRoles contract
  """
  DeployContractATKAssetRoles(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKBitmapClaimTracker contract
  """
  DeployContractATKBitmapClaimTracker(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKBitmapClaimTrackerInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKBondFactoryImplementation contract
  """
  DeployContractATKBondFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKBondFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKBondImplementation contract
  """
  DeployContractATKBondImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKBondImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKBondProxy contract
  """
  DeployContractATKBondProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKBondProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKComplianceImplementation contract
  """
  DeployContractATKComplianceImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKComplianceImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKComplianceModuleRegistryImplementation contract
  """
  DeployContractATKComplianceModuleRegistryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKComplianceModuleRegistryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKContractIdentityImplementation contract
  """
  DeployContractATKContractIdentityImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKContractIdentityImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKContractIdentityProxy contract
  """
  DeployContractATKContractIdentityProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKContractIdentityProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKDepositFactoryImplementation contract
  """
  DeployContractATKDepositFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKDepositFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKDepositImplementation contract
  """
  DeployContractATKDepositImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKDepositImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKDepositProxy contract
  """
  DeployContractATKDepositProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKDepositProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKEquityFactoryImplementation contract
  """
  DeployContractATKEquityFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKEquityFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKEquityImplementation contract
  """
  DeployContractATKEquityImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKEquityImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKEquityProxy contract
  """
  DeployContractATKEquityProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKEquityProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKFixedYieldProxy contract
  """
  DeployContractATKFixedYieldProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKFixedYieldProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKFixedYieldScheduleFactoryImplementation contract
  """
  DeployContractATKFixedYieldScheduleFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKFixedYieldScheduleFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKFixedYieldScheduleUpgradeable contract
  """
  DeployContractATKFixedYieldScheduleUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKFixedYieldScheduleUpgradeableInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKForwarder contract
  """
  DeployContractATKForwarder(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKFundFactoryImplementation contract
  """
  DeployContractATKFundFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKFundFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKFundImplementation contract
  """
  DeployContractATKFundImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKFundImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKFundProxy contract
  """
  DeployContractATKFundProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKFundProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKIdentityFactoryImplementation contract
  """
  DeployContractATKIdentityFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKIdentityFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKIdentityImplementation contract
  """
  DeployContractATKIdentityImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKIdentityImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKIdentityProxy contract
  """
  DeployContractATKIdentityProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKIdentityProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKIdentityRegistryImplementation contract
  """
  DeployContractATKIdentityRegistryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKIdentityRegistryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKIdentityRegistryStorageImplementation contract
  """
  DeployContractATKIdentityRegistryStorageImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKIdentityRegistryStorageImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKLinearVestingStrategy contract
  """
  DeployContractATKLinearVestingStrategy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKLinearVestingStrategyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKPeopleRoles contract
  """
  DeployContractATKPeopleRoles(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKPushAirdropFactoryImplementation contract
  """
  DeployContractATKPushAirdropFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKPushAirdropFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKPushAirdropImplementation contract
  """
  DeployContractATKPushAirdropImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKPushAirdropImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKPushAirdropProxy contract
  """
  DeployContractATKPushAirdropProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKPushAirdropProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKRoles contract
  """
  DeployContractATKRoles(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKStableCoinFactoryImplementation contract
  """
  DeployContractATKStableCoinFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKStableCoinFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKStableCoinImplementation contract
  """
  DeployContractATKStableCoinImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKStableCoinImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKStableCoinProxy contract
  """
  DeployContractATKStableCoinProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKStableCoinProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKSystemAccessManaged contract
  """
  DeployContractATKSystemAccessManaged(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKSystemAccessManagerImplementation contract
  """
  DeployContractATKSystemAccessManagerImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKSystemAccessManagerImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKSystemAddonRegistryImplementation contract
  """
  DeployContractATKSystemAddonRegistryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKSystemAddonRegistryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKSystemFactory contract
  """
  DeployContractATKSystemFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKSystemFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKSystemImplementation contract
  """
  DeployContractATKSystemImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKSystemImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKSystemRoles contract
  """
  DeployContractATKSystemRoles(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTimeBoundAirdropFactoryImplementation contract
  """
  DeployContractATKTimeBoundAirdropFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTimeBoundAirdropFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTimeBoundAirdropImplementation contract
  """
  DeployContractATKTimeBoundAirdropImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTimeBoundAirdropImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTimeBoundAirdropProxy contract
  """
  DeployContractATKTimeBoundAirdropProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTimeBoundAirdropProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTokenAccessManagerImplementation contract
  """
  DeployContractATKTokenAccessManagerImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTokenAccessManagerImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTokenAccessManagerProxy contract
  """
  DeployContractATKTokenAccessManagerProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTokenAccessManagerProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTokenFactoryRegistryImplementation contract
  """
  DeployContractATKTokenFactoryRegistryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTokenFactoryRegistryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTokenSale contract
  """
  DeployContractATKTokenSale(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTokenSaleInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTokenSaleFactory contract
  """
  DeployContractATKTokenSaleFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTokenSaleFactoryInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTokenSaleProxy contract
  """
  DeployContractATKTokenSaleProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTokenSaleProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTopicSchemeRegistryImplementation contract
  """
  DeployContractATKTopicSchemeRegistryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTopicSchemeRegistryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTopics contract
  """
  DeployContractATKTopics(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTrustedIssuersRegistryImplementation contract
  """
  DeployContractATKTrustedIssuersRegistryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTrustedIssuersRegistryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKTypedImplementationProxy contract
  """
  DeployContractATKTypedImplementationProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKTypedImplementationProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKVault contract
  """
  DeployContractATKVault(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKVaultInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKVaultFactoryImplementation contract
  """
  DeployContractATKVaultFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKVaultFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKVestingAirdropFactoryImplementation contract
  """
  DeployContractATKVestingAirdropFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKVestingAirdropFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKVestingAirdropImplementation contract
  """
  DeployContractATKVestingAirdropImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKVestingAirdropImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKVestingAirdropProxy contract
  """
  DeployContractATKVestingAirdropProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKVestingAirdropProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKXvPSettlementFactoryImplementation contract
  """
  DeployContractATKXvPSettlementFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKXvPSettlementFactoryImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKXvPSettlementImplementation contract
  """
  DeployContractATKXvPSettlementImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKXvPSettlementImplementationInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ATKXvPSettlementProxy contract
  """
  DeployContractATKXvPSettlementProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractATKXvPSettlementProxyInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AbstractATKSystemAddonFactoryImplementation contract
  """
  DeployContractAbstractATKSystemAddonFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AbstractATKSystemProxy contract
  """
  DeployContractAbstractATKSystemProxy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AbstractATKTokenFactoryImplementation contract
  """
  DeployContractAbstractATKTokenFactoryImplementation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AbstractAddressListComplianceModule contract
  """
  DeployContractAbstractAddressListComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AbstractComplianceModule contract
  """
  DeployContractAbstractComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AbstractCountryComplianceModule contract
  """
  DeployContractAbstractCountryComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AbstractIdentityComplianceModule contract
  """
  DeployContractAbstractIdentityComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a AddressBlockListComplianceModule contract
  """
  DeployContractAddressBlockListComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractAddressBlockListComplianceModuleInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ClaimAuthorizationExtension contract
  """
  DeployContractClaimAuthorizationExtension(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a CountryAllowListComplianceModule contract
  """
  DeployContractCountryAllowListComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractCountryAllowListComplianceModuleInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a CountryBlockListComplianceModule contract
  """
  DeployContractCountryBlockListComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractCountryBlockListComplianceModuleInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ERC734 contract
  """
  DeployContractERC734(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractERC734Input!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ERC734KeyPurposes contract
  """
  DeployContractERC734KeyPurposes(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ERC734KeyTypes contract
  """
  DeployContractERC734KeyTypes(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ERC735 contract
  """
  DeployContractERC735(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ERC735ClaimSchemes contract
  """
  DeployContractERC735ClaimSchemes(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKAirdrop contract
  """
  DeployContractIATKAirdrop(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKBond contract
  """
  DeployContractIATKBond(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKBondFactory contract
  """
  DeployContractIATKBondFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKClaimTracker contract
  """
  DeployContractIATKClaimTracker(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKCompliance contract
  """
  DeployContractIATKCompliance(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKComplianceModuleRegistry contract
  """
  DeployContractIATKComplianceModuleRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKContractIdentity contract
  """
  DeployContractIATKContractIdentity(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKDeposit contract
  """
  DeployContractIATKDeposit(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKDepositFactory contract
  """
  DeployContractIATKDepositFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKEquity contract
  """
  DeployContractIATKEquity(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKEquityFactory contract
  """
  DeployContractIATKEquityFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKFixedYieldScheduleFactory contract
  """
  DeployContractIATKFixedYieldScheduleFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKFund contract
  """
  DeployContractIATKFund(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKFundFactory contract
  """
  DeployContractIATKFundFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKIdentity contract
  """
  DeployContractIATKIdentity(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKIdentityFactory contract
  """
  DeployContractIATKIdentityFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKIdentityRegistry contract
  """
  DeployContractIATKIdentityRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKIdentityRegistryStorage contract
  """
  DeployContractIATKIdentityRegistryStorage(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKLinearVestingStrategy contract
  """
  DeployContractIATKLinearVestingStrategy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKPushAirdrop contract
  """
  DeployContractIATKPushAirdrop(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKPushAirdropFactory contract
  """
  DeployContractIATKPushAirdropFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKStableCoin contract
  """
  DeployContractIATKStableCoin(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKStableCoinFactory contract
  """
  DeployContractIATKStableCoinFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKSystem contract
  """
  DeployContractIATKSystem(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKSystemAccessManaged contract
  """
  DeployContractIATKSystemAccessManaged(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKSystemAccessManager contract
  """
  DeployContractIATKSystemAccessManager(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKSystemAddonRegistry contract
  """
  DeployContractIATKSystemAddonRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKSystemFactory contract
  """
  DeployContractIATKSystemFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTimeBoundAirdrop contract
  """
  DeployContractIATKTimeBoundAirdrop(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTimeBoundAirdropFactory contract
  """
  DeployContractIATKTimeBoundAirdropFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTokenFactory contract
  """
  DeployContractIATKTokenFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTokenFactoryRegistry contract
  """
  DeployContractIATKTokenFactoryRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTokenSale contract
  """
  DeployContractIATKTokenSale(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTopicSchemeRegistry contract
  """
  DeployContractIATKTopicSchemeRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTrustedIssuersRegistry contract
  """
  DeployContractIATKTrustedIssuersRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKTypedImplementationRegistry contract
  """
  DeployContractIATKTypedImplementationRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKVaultFactory contract
  """
  DeployContractIATKVaultFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKVestingAirdrop contract
  """
  DeployContractIATKVestingAirdrop(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKVestingAirdropFactory contract
  """
  DeployContractIATKVestingAirdropFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKVestingStrategy contract
  """
  DeployContractIATKVestingStrategy(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKXvPSettlement contract
  """
  DeployContractIATKXvPSettlement(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IATKXvPSettlementFactory contract
  """
  DeployContractIATKXvPSettlementFactory(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IClaimAuthorizer contract
  """
  DeployContractIClaimAuthorizer(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IContractIdentity contract
  """
  DeployContractIContractIdentity(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IContractWithIdentity contract
  """
  DeployContractIContractWithIdentity(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IERC3643 contract
  """
  DeployContractIERC3643(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IERC3643ClaimTopicsRegistry contract
  """
  DeployContractIERC3643ClaimTopicsRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IERC3643Compliance contract
  """
  DeployContractIERC3643Compliance(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IERC3643IdentityRegistry contract
  """
  DeployContractIERC3643IdentityRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IERC3643IdentityRegistryStorage contract
  """
  DeployContractIERC3643IdentityRegistryStorage(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IERC3643TrustedIssuersRegistry contract
  """
  DeployContractIERC3643TrustedIssuersRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMART contract
  """
  DeployContractISMART(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTBurnable contract
  """
  DeployContractISMARTBurnable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTCapped contract
  """
  DeployContractISMARTCapped(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTCollateral contract
  """
  DeployContractISMARTCollateral(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTCompliance contract
  """
  DeployContractISMARTCompliance(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTComplianceModule contract
  """
  DeployContractISMARTComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTCustodian contract
  """
  DeployContractISMARTCustodian(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTFixedYieldSchedule contract
  """
  DeployContractISMARTFixedYieldSchedule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTHistoricalBalances contract
  """
  DeployContractISMARTHistoricalBalances(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTIdentityRegistry contract
  """
  DeployContractISMARTIdentityRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTIdentityRegistryStorage contract
  """
  DeployContractISMARTIdentityRegistryStorage(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTPausable contract
  """
  DeployContractISMARTPausable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTRedeemable contract
  """
  DeployContractISMARTRedeemable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTTokenAccessManaged contract
  """
  DeployContractISMARTTokenAccessManaged(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTTokenAccessManager contract
  """
  DeployContractISMARTTokenAccessManager(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTTopicSchemeRegistry contract
  """
  DeployContractISMARTTopicSchemeRegistry(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTYield contract
  """
  DeployContractISMARTYield(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a ISMARTYieldSchedule contract
  """
  DeployContractISMARTYieldSchedule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IWithTypeIdentifier contract
  """
  DeployContractIWithTypeIdentifier(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IdentityAllowListComplianceModule contract
  """
  DeployContractIdentityAllowListComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractIdentityAllowListComplianceModuleInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a IdentityBlockListComplianceModule contract
  """
  DeployContractIdentityBlockListComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractIdentityBlockListComplianceModuleInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a OnChainContractIdentity contract
  """
  DeployContractOnChainContractIdentity(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a OnChainIdentity contract
  """
  DeployContractOnChainIdentity(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a OnChainIdentityWithRevocation contract
  """
  DeployContractOnChainIdentityWithRevocation(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMART contract
  """
  DeployContractSMART(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTBurnable contract
  """
  DeployContractSMARTBurnable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTBurnableUpgradeable contract
  """
  DeployContractSMARTBurnableUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTCapped contract
  """
  DeployContractSMARTCapped(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTCappedUpgradeable contract
  """
  DeployContractSMARTCappedUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTCollateral contract
  """
  DeployContractSMARTCollateral(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTCollateralUpgradeable contract
  """
  DeployContractSMARTCollateralUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTContext contract
  """
  DeployContractSMARTContext(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTCustodian contract
  """
  DeployContractSMARTCustodian(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTCustodianUpgradeable contract
  """
  DeployContractSMARTCustodianUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTExtension contract
  """
  DeployContractSMARTExtension(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTExtensionUpgradeable contract
  """
  DeployContractSMARTExtensionUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTFixedYieldSchedule contract
  """
  DeployContractSMARTFixedYieldSchedule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTFixedYieldScheduleLogic contract
  """
  DeployContractSMARTFixedYieldScheduleLogic(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTFixedYieldScheduleUpgradeable contract
  """
  DeployContractSMARTFixedYieldScheduleUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTHistoricalBalances contract
  """
  DeployContractSMARTHistoricalBalances(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTHistoricalBalancesUpgradeable contract
  """
  DeployContractSMARTHistoricalBalancesUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTHooks contract
  """
  DeployContractSMARTHooks(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTIdentityVerificationComplianceModule contract
  """
  DeployContractSMARTIdentityVerificationComplianceModule(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String
    constructorArguments: DeployContractSMARTIdentityVerificationComplianceModuleInput!

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTPausable contract
  """
  DeployContractSMARTPausable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTPausableUpgradeable contract
  """
  DeployContractSMARTPausableUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTRedeemable contract
  """
  DeployContractSMARTRedeemable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTRedeemableUpgradeable contract
  """
  DeployContractSMARTRedeemableUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTTokenAccessManaged contract
  """
  DeployContractSMARTTokenAccessManaged(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTTokenAccessManagedUpgradeable contract
  """
  DeployContractSMARTTokenAccessManagedUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTUpgradeable contract
  """
  DeployContractSMARTUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTYield contract
  """
  DeployContractSMARTYield(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Deploy a SMARTYieldUpgradeable contract
  """
  DeployContractSMARTYieldUpgradeable(
    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
  ): ContractDeploymentTransactionOutput

  """
  Adds a key to the identity with a specific purpose.
  See {IERC734-addKey}. Adds a _key to the identity. The _purpose specifies the purpose of the key. Emits a {KeyAdded} event. Requirements: - This function should typically be restricted (e.g., by an owner or management key in the inheriting contract).
  True if the key was successfully added.
  """
  ERC734AddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ERC734AddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ERC734TransactionOutput

  """
  Approves or disapproves an execution request.
  See {IERC734-approve}. Approves an execution. Emits an {Approved} event. If approval leads to execution, {Executed} or {ExecutionFailed} is emitted. Requirements: - `_id` must correspond to an existing, non-executed execution request. - The caller must have the appropriate permissions to approve (typically checked in the inheriting contract or via keyHasPurpose).
  True if the approval was processed successfully.
  """
  ERC734Approve(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ERC734ApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ERC734TransactionOutput

  """
  Creates an execution request.
  See {IERC734-execute}. Initiates an execution. If the caller has appropriate keys, it might be auto-approved. Emits an {ExecutionRequested} event. If auto-approved and executed, also emits {Executed} or {ExecutionFailed}. Returns the `executionId`. The actual approval logic based on `msg.sender`'s keys (e.g., MANAGEMENT or ACTION) is usually handled in the `approve` function or by an overriding `execute` in the inheriting Identity contract. This base implementation creates the request.
  The ID of the created execution request.
  """
  ERC734Execute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ERC734ExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ERC734TransactionOutput

  """
  Initializes the contract with a management key.
  """
  ERC734Initialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ERC734InitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ERC734TransactionOutput

  """
  Removes a specific purpose from a key.
  See {IERC734-removeKey}. Removes a _purpose from a _key. If it's the last purpose, the key is removed entirely. Emits a {KeyRemoved} event. Requirements: - This function should typically be restricted (e.g., by an owner or management key in the inheriting contract). - The _key must exist and have the specified _purpose.
  True if the key purpose was successfully removed.
  """
  ERC734RemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ERC734RemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ERC734TransactionOutput

  """
  Adds or updates a claim on the identity.
  See {IERC735-addClaim}. Adds or updates a claim. Emits {ClaimAdded} or {ClaimChanged}. The `_signature` is `keccak256(abi.encode(address(this), _topic, _data))` signed by the `issuer`. Claim ID is `keccak256(abi.encode(_issuer, _topic))`. Requirements: - If `issuer` is not this contract, the claim must be verifiable via `IClaimIssuer(issuer).isClaimValid(...)`. - This function should typically be restricted (e.g., by a claim key in the inheriting contract).
  The ID of the created or updated claim.
  """
  ERC735AddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ERC735AddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ERC735TransactionOutput

  """
  Removes a claim from the identity.
  See {IERC735-removeClaim}. Removes a claim by its ID. Emits {ClaimRemoved}. Claim ID is `keccak256(abi.encode(issuer_address, topic))`. Requirements: - The `_claimId` must correspond to an existing claim. - This function should typically be restricted (e.g., by a claim key or management key in the inheriting contract,   or only allow issuer or self to remove).
  True if the claim was successfully removed.
  """
  ERC735RemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ERC735RemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ERC735TransactionOutput

  """
  Claims multiple airdrop allocations for the caller in a single transaction.
  """
  IATKAirdropBatchClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKAirdropBatchClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKAirdropTransactionOutput

  """
  Claims an airdrop allocation for the caller.
  """
  IATKAirdropClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKAirdropClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKAirdropTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  IATKAirdropWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKAirdropWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKAirdropTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  IATKBondAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
  """
  IATKBondApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  IATKBondBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  IATKBondBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  IATKBondBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  IATKBondBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  IATKBondBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  IATKBondBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  IATKBondBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  IATKBondBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput
  IATKBondFactoryCreateBond(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondFactoryCreateBondInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondFactoryTransactionOutput

  """
  Initializes the token registry.
  """
  IATKBondFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondFactoryTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  IATKBondForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  IATKBondForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  IATKBondFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput
  IATKBondInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Closes off the bond at maturity, performing necessary state changes.
  Typically callable by addresses with a specific role (e.g., SUPPLY_MANAGEMENT_ROLE) only after the maturity date.May require sufficient denomination assets to be present for all potential redemptions before execution.
  """
  IATKBondMature(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  IATKBondMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  IATKBondPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  IATKBondRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  IATKBondRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Allows the caller (the token holder) to redeem a specific amount of their own tokens.
  When a token holder calls this function, the specified `amount` of their tokens will be burned (destroyed). This action reduces both the token holder's balance and the total supply of the token. The function should: 1. Optionally execute a `_beforeRedeem` hook for pre-redemption logic. 2. Perform the burn operation via an internal function like `_redeemable_executeBurn`. 3. Optionally execute an `_afterRedeem` hook for post-redemption logic. 4. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.
  A boolean value indicating whether the redemption was successful (typically `true`).
  """
  IATKBondRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Allows the caller (the token holder) to redeem all of their own tokens.
  When a token holder calls this function, their entire balance of this token will be burned (destroyed). This action reduces the token holder's balance to zero and decreases the total supply of the token accordingly. The function should: 1. Determine the caller's current token balance. 2. Optionally execute a `_beforeRedeem` hook for pre-redemption logic with the full balance amount. 3. Perform the burn operation for the full balance via an internal function like `_redeemable_executeBurn`. 4. Optionally execute an `_afterRedeem` hook for post-redemption logic with the full balance amount. 5. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.
  A boolean value indicating whether the redemption of all tokens was successful (typically `true`).
  """
  IATKBondRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  IATKBondRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  IATKBondSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Sets or updates the maximum total supply (cap) for the token.
  Allows an authorized caller to change the cap. The new cap cannot be zero or less      than the current total supply of the token. Emits a {CapSet} event on success.      The authorization logic for who can call this function is handled by the contract      implementing this interface.
  """
  IATKBondSetCap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondSetCapInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  IATKBondSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  IATKBondSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  IATKBondSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  IATKBondSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Sets or updates the yield schedule contract for this token.
  This function is crucial for configuring how yield is generated and distributed for the token. The `schedule` address points to another smart contract that implements the `ISMARTYieldSchedule` interface (or a more specific one like `ISMARTFixedYieldSchedule`). This schedule contract will contain the detailed logic for yield calculation, timing, and distribution. Implementers should consider adding access control to this function (e.g., only allowing an admin or owner role) to prevent unauthorized changes to the yield mechanism.
  """
  IATKBondSetYieldSchedule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondSetYieldScheduleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKBondTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKBondTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  IATKBondUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKBondUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  IATKBondUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKBondTransactionOutput

  """
  Records a claim for a specific index.
  """
  IATKClaimTrackerRecordClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKClaimTrackerRecordClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKClaimTrackerTransactionOutput

  """
  Adds a global compliance module that applies to all tokens.
  Only addresses with COMPLIANCE_MANAGER_ROLE can call this function. This module will be executed in addition to token-specific modules for all compliance checks.
  """
  IATKComplianceAddGlobalComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceAddGlobalComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Adds multiple addresses to the compliance bypass list in a single transaction.
  Only addresses with BYPASS_LIST_MANAGER_ROLE can call this function. This is a gas-efficient way to add multiple addresses to the bypass list at once.
  """
  IATKComplianceAddMultipleToBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceAddMultipleToBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Adds an address to the compliance bypass list.
  Only addresses with BYPASS_LIST_MANAGER_ROLE can call this function. Addresses on the bypass list can bypass compliance checks in canTransfer function.
  """
  IATKComplianceAddToBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceAddToBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Hook function called by the `ISMART` token contract *after* new tokens have been successfully minted.
  This function CAN modify state. It allows compliance modules to react to minting events.      The implementation should only be callable by the `_token` contract.      It typically iterates through active compliance modules and calls their `created` hook.
  """
  IATKComplianceCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Hook function called by the `ISMART` token contract *after* tokens have been successfully burned (destroyed).
  This function CAN modify state. It allows compliance modules to react to burn events.      The implementation should only be callable by the `_token` contract.      It typically iterates through active compliance modules and calls their `destroyed` hook.
  """
  IATKComplianceDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Initializes the compliance contract.
  """
  IATKComplianceInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Initializes the compliance module registry with initial admin accounts.
  """
  IATKComplianceModuleRegistryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceModuleRegistryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceModuleRegistryTransactionOutput

  """
  Registers a new compliance module in the registry.
  """
  IATKComplianceModuleRegistryRegisterComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceModuleRegistryRegisterComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceModuleRegistryTransactionOutput

  """
  Removes an address from the compliance bypass list.
  Only addresses with BYPASS_LIST_MANAGER_ROLE can call this function.
  """
  IATKComplianceRemoveFromBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceRemoveFromBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Removes a specific global compliance module.
  Only addresses with COMPLIANCE_MANAGER_ROLE can call this function.
  """
  IATKComplianceRemoveGlobalComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceRemoveGlobalComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Removes multiple addresses from the compliance bypass list in a single transaction.
  Only addresses with BYPASS_LIST_MANAGER_ROLE can call this function.
  """
  IATKComplianceRemoveMultipleFromBypassList(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceRemoveMultipleFromBypassListInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Updates parameters for an existing global compliance module.
  Only addresses with COMPLIANCE_MANAGER_ROLE can call this function.
  """
  IATKComplianceSetParametersForGlobalComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceSetParametersForGlobalComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Hook function called by the `ISMART` token contract *after* a token transfer has successfully occurred.
  This function CAN modify state. It is intended for compliance modules that need to update their internal state      (e.g., transaction counters, volume trackers) or log information post-transfer.      The implementation should only be callable by the `_token` contract it is associated with.      It typically iterates through active compliance modules and calls their `transferred` hook.
  """
  IATKComplianceTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKComplianceTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKComplianceTransactionOutput

  """
  Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.
  """
  IATKContractIdentityAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  IATKContractIdentityAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`.
  """
  IATKContractIdentityApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed.
  """
  IATKContractIdentityExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Initializes the contract identity with its owner contract address.
  """
  IATKContractIdentityInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Issues a claim to a subject identity on behalf of the associated contract.
  Only the associated contract can call this function to issue claims.
  The ID of the created claim.
  """
  IATKContractIdentityIssueClaimTo(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityIssueClaimToInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Registers a claim authorization contract.
  """
  IATKContractIdentityRegisterClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityRegisterClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  IATKContractIdentityRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Removes a claim authorization contract.
  """
  IATKContractIdentityRemoveClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityRemoveClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  IATKContractIdentityRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  will fetch the claim from the identity contract (unsafe).
  Revoke a claim previously issued, the claim is no longer considered as valid after revocation.
  isRevoked true when the claim is revoked.
  """
  IATKContractIdentityRevokeClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityRevokeClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Revoke a claim previously issued, the claim is no longer considered as valid after revocation.
  """
  IATKContractIdentityRevokeClaimBySignature(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKContractIdentityRevokeClaimBySignatureInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKContractIdentityTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  IATKDepositAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
  """
  IATKDepositApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  IATKDepositBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  IATKDepositBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  IATKDepositBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  IATKDepositBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  IATKDepositBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  IATKDepositBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  IATKDepositBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  IATKDepositBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput
  IATKDepositFactoryCreateDeposit(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositFactoryCreateDepositInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositFactoryTransactionOutput

  """
  Initializes the token registry.
  """
  IATKDepositFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositFactoryTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  IATKDepositForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  IATKDepositForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  IATKDepositFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput
  IATKDepositInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  IATKDepositMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  IATKDepositPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  IATKDepositRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  IATKDepositRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  IATKDepositRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  IATKDepositSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  IATKDepositSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  IATKDepositSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  IATKDepositSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  IATKDepositSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKDepositTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKDepositTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  IATKDepositUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKDepositUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  IATKDepositUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKDepositTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  IATKEquityAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
  """
  IATKEquityApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  IATKEquityBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  IATKEquityBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  IATKEquityBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  IATKEquityBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  IATKEquityBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  IATKEquityBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  IATKEquityBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  IATKEquityBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Delegates votes from the sender to `delegatee`.
  """
  IATKEquityDelegate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityDelegateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Delegates votes from signer to `delegatee`.
  """
  IATKEquityDelegateBySig(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityDelegateBySigInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput
  IATKEquityFactoryCreateEquity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityFactoryCreateEquityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityFactoryTransactionOutput

  """
  Initializes the token registry.
  """
  IATKEquityFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityFactoryTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  IATKEquityForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  IATKEquityForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  IATKEquityFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput
  IATKEquityInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  IATKEquityMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  IATKEquityPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  IATKEquityRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  IATKEquityRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  IATKEquityRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  IATKEquitySetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquitySetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  IATKEquitySetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquitySetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  IATKEquitySetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquitySetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  IATKEquitySetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquitySetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  IATKEquitySetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquitySetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKEquityTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKEquityTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  IATKEquityUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKEquityUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  IATKEquityUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKEquityTransactionOutput

  """
  Creates a new ATKFixedYieldSchedule proxy contract.
  This function deploys a new proxy contract that delegates to the current implementation. The proxy is deployed using CREATE2 for deterministic addresses.
  The address of the newly created `ATKFixedYieldProxy` contract.
  """
  IATKFixedYieldScheduleFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFixedYieldScheduleFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFixedYieldScheduleFactoryTransactionOutput

  """
  Initializes the factory with access manager and system address.
  """
  IATKFixedYieldScheduleFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFixedYieldScheduleFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFixedYieldScheduleFactoryTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  IATKFundAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
  """
  IATKFundApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  IATKFundBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  IATKFundBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  IATKFundBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  IATKFundBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  IATKFundBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  IATKFundBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  IATKFundBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  IATKFundBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Allows the fund manager to collect accrued management fees.
  The amount of fees collected.
  """
  IATKFundCollectManagementFee(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Delegates votes from the sender to `delegatee`.
  """
  IATKFundDelegate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundDelegateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Delegates votes from signer to `delegatee`.
  """
  IATKFundDelegateBySig(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundDelegateBySigInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput
  IATKFundFactoryCreateFund(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundFactoryCreateFundInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundFactoryTransactionOutput

  """
  Initializes the token registry.
  """
  IATKFundFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundFactoryTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  IATKFundForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  IATKFundForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  IATKFundFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput
  IATKFundInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  IATKFundMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  IATKFundPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  IATKFundRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  IATKFundRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  IATKFundRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  IATKFundSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  IATKFundSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  IATKFundSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  IATKFundSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  IATKFundSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKFundTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKFundTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  IATKFundUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKFundUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  IATKFundUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKFundTransactionOutput

  """
  Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.
  """
  IATKIdentityAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  IATKIdentityAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`.
  """
  IATKIdentityApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed.
  """
  IATKIdentityExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Creates a new on-chain identity for a contract that implements IContractWithIdentity.
  This function deploys a new identity contract using a salt based on the contract address.      The salt is calculated deterministically from the contract address for predictable deployment.      Permission checks are delegated to the contract itself via canAddClaim/canRemoveClaim.
  The address of the newly deployed contract identity contract.
  """
  IATKIdentityFactoryCreateContractIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityFactoryCreateContractIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityFactoryTransactionOutput

  """
  Creates a new on-chain identity for a given user wallet address.
  This function is expected to deploy a new identity contract (e.g., a `ATKIdentityProxy`)      and associate it with the `_wallet` address. It may also set up initial management keys for the identity.      The creation process often involves deterministic deployment using CREATE2 for predictable addresses.
  The address of the newly deployed identity contract.
  """
  IATKIdentityFactoryCreateIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityFactoryCreateIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityFactoryTransactionOutput

  """
  Initializes the identity factory.
  Sets up the system address for the factory.
  """
  IATKIdentityFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityFactoryTransactionOutput

  """
  Sets the identity factory's own OnChain ID and issues a self-claim.
  This is called during bootstrap by the system contract only. After setting the identity,      it issues a CONTRACT_IDENTITY claim to itself to attest that the factory is a contract identity.
  """
  IATKIdentityFactorySetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityFactorySetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityFactoryTransactionOutput

  """
  Initializes the ATK Identity contract.
  Sets up the initial management key and registers claim authorization contracts.
  """
  IATKIdentityInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Registers a claim authorization contract.
  """
  IATKIdentityRegisterClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegisterClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Registers multiple identities in a single batch transaction.
  This function is typically callable only by authorized agents or registrars.      It is a gas-saving measure for registering many users at once.      The function will usually revert if any of the `_userAddresses` are already registered or if the input arrays have mismatched lengths.      Care should be taken with the number of entries due to block gas limits.
  """
  IATKIdentityRegistryBatchRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryBatchRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Removes an existing identity registration for an investor's wallet address.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the `_userAddress` is not currently registered.      This action effectively unlinks the wallet address from its associated `IIdentity` contract in this registry.
  """
  IATKIdentityRegistryDeleteIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryDeleteIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Initializes the identity registry.
  Sets up the registry with initial configuration including admins and related contracts.
  """
  IATKIdentityRegistryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Recovers an identity by creating a new wallet registration with a new identity contract,         marking the old wallet as lost, and preserving the country code.
  This function handles the practical reality that losing wallet access often means losing      access to the identity contract as well. It creates a fresh start while maintaining      regulatory compliance data and recovery links for token reclaim.      The function is typically restricted to registrar roles.
  """
  IATKIdentityRegistryRecoverIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryRecoverIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Registers an investor's wallet address, linking it to their on-chain `IIdentity` contract and their country of residence.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the provided `_userAddress` is already registered to prevent duplicate entries.      The country code is important for jurisdictional compliance.
  """
  IATKIdentityRegistryRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Sets or updates the address of the `IdentityRegistryStorage` contract.
  This function is usually restricted to an administrative role (e.g., contract owner).      It allows the Identity Registry to delegate the actual storage of identity data to a separate, potentially upgradable, contract.      Changing this address can have significant implications, so it must be handled with care.
  """
  IATKIdentityRegistrySetIdentityRegistryStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistrySetIdentityRegistryStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Sets or updates the address of the `TopicSchemeRegistry` contract.
  This function is usually restricted to an administrative role (e.g., contract owner).      The `TopicSchemeRegistry` is responsible for maintaining valid claim topic schemes.      Updating this address changes which claim topics are considered valid for verification.
  """
  IATKIdentityRegistrySetTopicSchemeRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistrySetTopicSchemeRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Sets or updates the address of the `TrustedIssuersRegistry` contract.
  This function is usually restricted to an administrative role (e.g., contract owner).      The `TrustedIssuersRegistry` is responsible for maintaining a list of claim issuers whose attestations are considered valid.      Updating this address changes the set of authorities recognized for identity verification.
  """
  IATKIdentityRegistrySetTrustedIssuersRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistrySetTrustedIssuersRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Adds an identity contract corresponding to a user address in the storage.
  adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract.
  """
  IATKIdentityRegistryStorageAddIdentityToStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageAddIdentityToStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS.
  """
  IATKIdentityRegistryStorageBindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageBindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Initializes the identity registry storage.
  """
  IATKIdentityRegistryStorageInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Establishes a recovery link between a lost wallet and its replacement.
  This creates a bidirectional mapping for token recovery purposes.
  """
  IATKIdentityRegistryStorageLinkWalletRecovery(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageLinkWalletRecoveryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Marks a user wallet as lost for a specific identity contract in the storage.
  Called by an authorized Identity Registry. This indicates the wallet should no longer be considered active      for verification or operations related to this specific identity, and potentially globally.
  """
  IATKIdentityRegistryStorageMarkWalletAsLost(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageMarkWalletAsLostInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Updates an identity contract corresponding to a user address.
  Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract.
  """
  IATKIdentityRegistryStorageModifyStoredIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageModifyStoredIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Updates the country corresponding to a user address.
  Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract.
  """
  IATKIdentityRegistryStorageModifyStoredInvestorCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageModifyStoredInvestorCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Removes an user from the storage.
  Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract.
  """
  IATKIdentityRegistryStorageRemoveIdentityFromStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageRemoveIdentityFromStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract.
  """
  IATKIdentityRegistryStorageUnbindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryStorageUnbindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryStorageTransactionOutput

  """
  Updates the country code associated with a previously registered investor's wallet address.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the `_userAddress` is not registered.      This is used to reflect changes in an investor's country of residence for compliance purposes.
  """
  IATKIdentityRegistryUpdateCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryUpdateCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Updates the on-chain `IIdentity` contract associated with a previously registered investor's wallet address.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the `_userAddress` is not registered.      This is useful for scenarios like identity recovery, or if an investor upgrades or changes their `IIdentity` contract.
  """
  IATKIdentityRegistryUpdateIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRegistryUpdateIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityRegistryTransactionOutput

  """
  Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  IATKIdentityRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Removes a claim authorization contract.
  """
  IATKIdentityRemoveClaimAuthorizationContract(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRemoveClaimAuthorizationContractInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  IATKIdentityRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKIdentityRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKIdentityTransactionOutput

  """
  Claims multiple airdrop allocations for the caller in a single transaction.
  """
  IATKPushAirdropBatchClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropBatchClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropTransactionOutput

  """
  Distributes tokens to multiple recipients in a single transaction.
  Only the contract owner can distribute tokens.
  """
  IATKPushAirdropBatchDistribute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropBatchDistributeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropTransactionOutput

  """
  Claims an airdrop allocation for the caller.
  """
  IATKPushAirdropClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropTransactionOutput

  """
  Distributes tokens to a single recipient with Merkle proof verification.
  Only the contract owner can distribute tokens.
  """
  IATKPushAirdropDistribute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropDistributeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropTransactionOutput

  """
  Creates a new push airdrop proxy contract.
  The address of the newly created push airdrop proxy.
  """
  IATKPushAirdropFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropFactoryTransactionOutput

  """
  Initializes the factory with access manager and system address.
  """
  IATKPushAirdropFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropFactoryTransactionOutput

  """
  Updates the distribution cap.
  Only the owner can update the distribution cap.
  """
  IATKPushAirdropSetDistributionCap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropSetDistributionCapInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  IATKPushAirdropWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKPushAirdropWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKPushAirdropTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  IATKStableCoinAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
  """
  IATKStableCoinApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  IATKStableCoinBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  IATKStableCoinBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  IATKStableCoinBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  IATKStableCoinBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  IATKStableCoinBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  IATKStableCoinBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  IATKStableCoinBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  IATKStableCoinBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput
  IATKStableCoinFactoryCreateStableCoin(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinFactoryCreateStableCoinInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinFactoryTransactionOutput

  """
  Initializes the token registry.
  """
  IATKStableCoinFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinFactoryTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  IATKStableCoinForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  IATKStableCoinForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  IATKStableCoinFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput
  IATKStableCoinInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  IATKStableCoinMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  IATKStableCoinPause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  IATKStableCoinRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  IATKStableCoinRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Allows the caller (the token holder) to redeem a specific amount of their own tokens.
  When a token holder calls this function, the specified `amount` of their tokens will be burned (destroyed). This action reduces both the token holder's balance and the total supply of the token. The function should: 1. Optionally execute a `_beforeRedeem` hook for pre-redemption logic. 2. Perform the burn operation via an internal function like `_redeemable_executeBurn`. 3. Optionally execute an `_afterRedeem` hook for post-redemption logic. 4. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.
  A boolean value indicating whether the redemption was successful (typically `true`).
  """
  IATKStableCoinRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Allows the caller (the token holder) to redeem all of their own tokens.
  When a token holder calls this function, their entire balance of this token will be burned (destroyed). This action reduces the token holder's balance to zero and decreases the total supply of the token accordingly. The function should: 1. Determine the caller's current token balance. 2. Optionally execute a `_beforeRedeem` hook for pre-redemption logic with the full balance amount. 3. Perform the burn operation for the full balance via an internal function like `_redeemable_executeBurn`. 4. Optionally execute an `_afterRedeem` hook for post-redemption logic with the full balance amount. 5. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.
  A boolean value indicating whether the redemption of all tokens was successful (typically `true`).
  """
  IATKStableCoinRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  IATKStableCoinRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  IATKStableCoinSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  IATKStableCoinSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  IATKStableCoinSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  IATKStableCoinSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  IATKStableCoinSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKStableCoinTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IATKStableCoinTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  IATKStableCoinUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKStableCoinUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  IATKStableCoinUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKStableCoinTransactionOutput

  """
  Grants `role` to each address in `accounts`.
  """
  IATKSystemAccessManagerBatchGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerBatchGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Revokes `role` from each address in `accounts`.
  """
  IATKSystemAccessManagerBatchRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerBatchRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Grants multiple roles to a single account.
  """
  IATKSystemAccessManagerGrantMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerGrantMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Grants `role` to an address.
  """
  IATKSystemAccessManagerGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Renounces multiple roles from the calling account.
  """
  IATKSystemAccessManagerRenounceMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerRenounceMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Renounces a role from an address.
  """
  IATKSystemAccessManagerRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Revokes multiple roles from a single account.
  """
  IATKSystemAccessManagerRevokeMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerRevokeMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Revokes `role` from an address.
  """
  IATKSystemAccessManagerRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Sets the admin role for a given role.
  """
  IATKSystemAccessManagerSetRoleAdmin(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAccessManagerSetRoleAdminInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAccessManagerTransactionOutput

  """
  Initializes the addon registry with initial admin and system address.
  """
  IATKSystemAddonRegistryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAddonRegistryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAddonRegistryTransactionOutput

  """
  Registers a new system addon with the registry.
  The address of the newly created addon proxy.
  """
  IATKSystemAddonRegistryRegisterSystemAddon(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAddonRegistryRegisterSystemAddonInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAddonRegistryTransactionOutput

  """
  Updates the implementation address for an existing addon type.
  """
  IATKSystemAddonRegistrySetAddonImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemAddonRegistrySetAddonImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemAddonRegistryTransactionOutput

  """
  Initializes and sets up the entire ATK Protocol system.
  This function is responsible for the initial deployment and configuration of the ATK Protocol. This involves deploying necessary smart contracts, setting initial parameters, and defining the relationships and connections between different components of the system. It is critically important that this function is called only ONCE during the very first deployment of the protocol. Attempting to call it more than once could result in severe errors, misconfigurations, or unpredictable behavior in the protocol's operation.
  """
  IATKSystemBootstrap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemTransactionOutput

  """
  Creates and deploys a new `ATKSystem` instance using the factory's stored default implementation addresses.
  When this function is called, a new `ATKSystem` contract is created on the blockchain. The caller of this function (which is `_msgSender()`, resolving to the original user in an ERC2771 meta-transaction context) will be set as the initial administrator (granted `DEFAULT_ADMIN_ROLE`) of the newly created `ATKSystem`. The new system's address is added to the `atkSystems` array for tracking, and a `ATKSystemCreated` event is emitted.
  The blockchain address of the newly created `ATKSystem` contract.
  """
  IATKSystemFactoryCreateSystem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemFactoryTransactionOutput

  """
  Initializes the ATKSystem contract.
  This function is responsible for the initial deployment and configuration of the ATK Protocol. This involves deploying necessary smart contracts, setting initial parameters, and defining the relationships and connections between different components of the system. It is critically important that this function is called only ONCE during the very first deployment of the protocol.
  """
  IATKSystemInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemTransactionOutput

  """
  Issues a claim by the organisation identity to a target identity.
  Only callable by accounts with TOKEN_FACTORY_MODULE_ROLE or ISSUER_CLAIM_MANAGER_ROLE.
  """
  IATKSystemIssueClaimByOrganisation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKSystemIssueClaimByOrganisationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKSystemTransactionOutput

  """
  Claims multiple airdrop allocations for the caller in a single transaction.
  """
  IATKTimeBoundAirdropBatchClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTimeBoundAirdropBatchClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTimeBoundAirdropTransactionOutput

  """
  Claims an airdrop allocation for the caller.
  """
  IATKTimeBoundAirdropClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTimeBoundAirdropClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTimeBoundAirdropTransactionOutput

  """
  Creates a new time-bound airdrop proxy contract.
  The address of the newly created time-bound airdrop proxy.
  """
  IATKTimeBoundAirdropFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTimeBoundAirdropFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTimeBoundAirdropFactoryTransactionOutput

  """
  Initializes the factory with access manager and system address.
  """
  IATKTimeBoundAirdropFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTimeBoundAirdropFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTimeBoundAirdropFactoryTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  IATKTimeBoundAirdropWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTimeBoundAirdropWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTimeBoundAirdropTransactionOutput

  """
  Initializes the token registry.
  """
  IATKTokenFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenFactoryTransactionOutput

  """
  Initializes the token factory registry.
  """
  IATKTokenFactoryRegistryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenFactoryRegistryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenFactoryRegistryTransactionOutput

  """
  Registers a new token factory in the registry.
  The address of the deployed factory proxy.
  """
  IATKTokenFactoryRegistryRegisterTokenFactory(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenFactoryRegistryRegisterTokenFactoryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenFactoryRegistryTransactionOutput

  """
  Updates the implementation address for a specific token factory type.
  """
  IATKTokenFactoryRegistrySetTokenFactoryImplementation(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenFactoryRegistrySetTokenFactoryImplementationInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenFactoryRegistryTransactionOutput

  """
  Activates the sale, allowing purchases to be made.
  """
  IATKTokenSaleActivateSale(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Adds a payment currency that can be used to purchase tokens.
  """
  IATKTokenSaleAddPaymentCurrency(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenSaleAddPaymentCurrencyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Allows a buyer to purchase tokens using native currency (e.g., ETH).
  The amount of tokens purchased.
  """
  IATKTokenSaleBuyTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Allows a buyer to purchase tokens using an ERC20 token.
  The amount of tokens purchased.
  """
  IATKTokenSaleBuyTokensWithERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenSaleBuyTokensWithERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Configures vesting parameters if tokens should vest over time.
  """
  IATKTokenSaleConfigureVesting(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenSaleConfigureVestingInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Ends the sale permanently before its scheduled end time.
  """
  IATKTokenSaleEndSale(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Initializes the token sale contract.
  """
  IATKTokenSaleInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenSaleInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Pauses the sale, temporarily preventing purchases.
  """
  IATKTokenSalePauseSale(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Removes a payment currency from the list of accepted currencies.
  """
  IATKTokenSaleRemovePaymentCurrency(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenSaleRemovePaymentCurrencyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Sets individual purchase limits per buyer.
  """
  IATKTokenSaleSetPurchaseLimits(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenSaleSetPurchaseLimitsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Allows the issuer to withdraw accumulated funds from sales.
  The amount withdrawn.
  """
  IATKTokenSaleWithdrawFunds(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTokenSaleWithdrawFundsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Allows a buyer to withdraw their vested tokens.
  The amount of tokens withdrawn.
  """
  IATKTokenSaleWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTokenSaleTransactionOutput

  """
  Registers multiple topic schemes in a single transaction.
  topicIds are generated from names using keccak256 hash.
  """
  IATKTopicSchemeRegistryBatchRegisterTopicSchemes(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTopicSchemeRegistryBatchRegisterTopicSchemesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTopicSchemeRegistryTransactionOutput

  """
  Initializes the topic scheme registry with system access manager.
  """
  IATKTopicSchemeRegistryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTopicSchemeRegistryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTopicSchemeRegistryTransactionOutput

  """
  Registers a new topic scheme with its name and signature.
  topicId is generated as uint256(keccak256(abi.encodePacked(name))).
  """
  IATKTopicSchemeRegistryRegisterTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTopicSchemeRegistryRegisterTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTopicSchemeRegistryTransactionOutput

  """
  Removes a topic scheme from the registry.
  """
  IATKTopicSchemeRegistryRemoveTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTopicSchemeRegistryRemoveTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTopicSchemeRegistryTransactionOutput

  """
  Updates an existing topic scheme's signature.
  """
  IATKTopicSchemeRegistryUpdateTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTopicSchemeRegistryUpdateTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTopicSchemeRegistryTransactionOutput

  """
  Registers a ClaimIssuer contract as trusted claim issuer.
  registers a ClaimIssuer contract as trusted claim issuer.  Requires that a ClaimIssuer contract doesn't already exist  Requires that the claimTopics set is not empty  Requires that there is no more than 15 claimTopics  Requires that there is no more than 50 Trusted issuers.
  """
  IATKTrustedIssuersRegistryAddTrustedIssuer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTrustedIssuersRegistryAddTrustedIssuerInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTrustedIssuersRegistryTransactionOutput

  """
  Initializes the registry with an initial admin and registrars.
  """
  IATKTrustedIssuersRegistryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTrustedIssuersRegistryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTrustedIssuersRegistryTransactionOutput

  """
  Removes the ClaimIssuer contract of a trusted claim issuer.
  Removes the ClaimIssuer contract of a trusted claim issuer.  Requires that the claim issuer contract to be registered first.
  """
  IATKTrustedIssuersRegistryRemoveTrustedIssuer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTrustedIssuersRegistryRemoveTrustedIssuerInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTrustedIssuersRegistryTransactionOutput

  """
  Updates the set of claim topics that a trusted issuer is allowed to emit.
  Updates the set of claim topics that a trusted issuer is allowed to emit.  Requires that this ClaimIssuer contract already exists in the registry  Requires that the provided claimTopics set is not empty  Requires that there is no more than 15 claimTopics.
  """
  IATKTrustedIssuersRegistryUpdateIssuerClaimTopics(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKTrustedIssuersRegistryUpdateIssuerClaimTopicsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKTrustedIssuersRegistryTransactionOutput

  """
  Creates a new ATK Vault contract.
  Address of the newly created vault.
  """
  IATKVaultFactoryCreateVault(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVaultFactoryCreateVaultInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVaultFactoryTransactionOutput

  """
  Initializes the factory contract.
  """
  IATKVaultFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVaultFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVaultFactoryTransactionOutput

  """
  Claims multiple airdrop allocations for the caller in a single transaction.
  """
  IATKVestingAirdropBatchClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropBatchClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropTransactionOutput

  """
  Initializes vesting for multiple allocations in a single transaction.
  """
  IATKVestingAirdropBatchInitializeVesting(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropBatchInitializeVestingInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropTransactionOutput

  """
  Claims an airdrop allocation for the caller.
  """
  IATKVestingAirdropClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropTransactionOutput

  """
  Creates a new ATKVestingAirdrop proxy contract.
  This function is expected to be available on the factory contract. It's typically created automatically if the factory has a public state variable named `atkVestingAirdropImplementation`.
  The address of the newly created ATKVestingAirdropProxy contract.
  """
  IATKVestingAirdropFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropFactoryTransactionOutput

  """
  Initializes the factory with access manager and system address.
  """
  IATKVestingAirdropFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropFactoryTransactionOutput

  """
  Initializes the vesting airdrop contract with specified parameters.
  """
  IATKVestingAirdropInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropTransactionOutput

  """
  Initializes vesting for a specific allocation without transferring tokens.
  """
  IATKVestingAirdropInitializeVesting(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropInitializeVestingInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropTransactionOutput

  """
  Updates the vesting strategy contract.
  """
  IATKVestingAirdropSetVestingStrategy(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropSetVestingStrategyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropTransactionOutput

  """
  Allows the owner to withdraw any tokens remaining in the contract.
  """
  IATKVestingAirdropWithdrawTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKVestingAirdropWithdrawTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKVestingAirdropTransactionOutput

  """
  Approves a XvP settlement for execution.
  The caller must be a party in the settlement's flows.
  True if the approval was successful.
  """
  IATKXvPSettlementApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKXvPSettlementTransactionOutput

  """
  Cancels the settlement.
  True if the cancellation was successful.
  """
  IATKXvPSettlementCancel(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKXvPSettlementTransactionOutput

  """
  Executes the settlement if all approvals are in place.
  True if execution was successful.
  """
  IATKXvPSettlementExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKXvPSettlementTransactionOutput
  IATKXvPSettlementFactoryCreate(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKXvPSettlementFactoryCreateInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKXvPSettlementFactoryTransactionOutput

  """
  Initializes the factory with access manager and system address.
  """
  IATKXvPSettlementFactoryInitialize(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IATKXvPSettlementFactoryInitializeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKXvPSettlementFactoryTransactionOutput

  """
  Revokes approval for a XvP settlement.
  The caller must have previously approved the settlement.
  True if the revocation was successful.
  """
  IATKXvPSettlementRevokeApproval(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IATKXvPSettlementTransactionOutput

  """
  Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.
  """
  IContractIdentityAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  IContractIdentityAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`.
  """
  IContractIdentityApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed.
  """
  IContractIdentityExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Issues a claim to a subject identity on behalf of the associated contract.
  Only the associated contract can call this function to issue claims.
  The ID of the created claim.
  """
  IContractIdentityIssueClaimTo(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityIssueClaimToInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  IContractIdentityRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  IContractIdentityRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  will fetch the claim from the identity contract (unsafe).
  Revoke a claim previously issued, the claim is no longer considered as valid after revocation.
  isRevoked true when the claim is revoked.
  """
  IContractIdentityRevokeClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityRevokeClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Revoke a claim previously issued, the claim is no longer considered as valid after revocation.
  """
  IContractIdentityRevokeClaimBySignature(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IContractIdentityRevokeClaimBySignatureInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IContractIdentityTransactionOutput

  """
  Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
  """
  IERC3643Approve(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Burns tokens from multiple addresses in batch.
  Initiates burning of tokens in batch.  Requires that the `_userAddresses` addresses are all verified and whitelisted addresses.  IMPORTANT: THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH.  USE WITH CARE TO AVOID "OUT OF GAS" TRANSACTIONS AND POTENTIAL LOSS OF TX FEES.
  """
  IERC3643BatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Forces transfers from multiple addresses in batch.
  Initiates forced transfers in batch.  Requires that each _amounts[i] does not exceed the available balance of _fromList[i].  Requires that the _toList addresses are all verified and whitelisted addresses.  IMPORTANT: THIS TRANSACTION COULD EXCEED GAS LIMIT IF _fromList.length IS TOO HIGH.  USE WITH CARE TO AVOID "OUT OF GAS" TRANSACTIONS AND POTENTIAL LOSS OF TX FEES.
  """
  IERC3643BatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Freezes partial tokens for multiple addresses in batch.
  Initiates partial freezing of tokens in batch.  IMPORTANT: THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH.  USE WITH CARE TO AVOID "OUT OF GAS" TRANSACTIONS AND POTENTIAL LOSS OF TX FEES.
  """
  IERC3643BatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Mints tokens to multiple addresses in batch.
  Initiates minting of tokens in batch.  Requires that the `_toList` addresses are all verified and whitelisted addresses.  IMPORTANT: THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH.  USE WITH CARE TO AVOID "OUT OF GAS" TRANSACTIONS AND POTENTIAL LOSS OF TX FEES.
  """
  IERC3643BatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Sets frozen status for multiple addresses in batch.
  Initiates setting of frozen status for addresses in batch.  IMPORTANT: THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH.  USE WITH CARE TO AVOID "OUT OF GAS" TRANSACTIONS AND POTENTIAL LOSS OF TX FEES.
  """
  IERC3643BatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Transfers tokens to multiple addresses in batch.
  function allowing to issue transfers in batch  Require that the _msgSender() and `to` addresses are not frozen.  Require that the total value should not exceed available balance.  Require that the `to` addresses are all verified addresses,  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_toList.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION.
  """
  IERC3643BatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Unfreezes partial tokens for multiple addresses in batch.
  Initiates partial unfreezing of tokens in batch.  IMPORTANT: THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH.  USE WITH CARE TO AVOID "OUT OF GAS" TRANSACTIONS AND POTENTIAL LOSS OF TX FEES.
  """
  IERC3643BatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Burns tokens from a specified address.
  Burns tokens from a specified address.  If the account address does not have sufficient free tokens (unfrozen tokens)  but possesses a total balance equal to or greater than the specified value,  the frozen token amount is reduced to ensure enough free tokens for the burn.  In such cases, the remaining balance in the account consists entirely of frozen tokens post-transaction.
  """
  IERC3643Burn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643BurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Add a trusted claim topic to the registry.
  Add a trusted claim topic (For example: KYC=1, AML=2). Only owner can call. emits `ClaimTopicAdded` event cannot add more than 15 topics for 1 token as adding more could create gas issues.
  """
  IERC3643ClaimTopicsRegistryAddClaimTopic(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ClaimTopicsRegistryAddClaimTopicInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643ClaimTopicsRegistryTransactionOutput

  """
  Remove a trusted claim topic from the registry.
  Remove a trusted claim topic (For example: KYC=1, AML=2).  Only owner can call.  emits `ClaimTopicRemoved` event.
  """
  IERC3643ClaimTopicsRegistryRemoveClaimTopic(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ClaimTopicsRegistryRemoveClaimTopicInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643ClaimTopicsRegistryTransactionOutput

  """
  Binds a token to the compliance contract.
  binds a token to the compliance contract.
  """
  IERC3643ComplianceBindToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ComplianceBindTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643ComplianceTransactionOutput

  """
  Updates compliance state after tokens are created.
  function called whenever tokens are created on a wallet  this function can update state variables in the modules bound to the compliance  these state variables being used by the module checks to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the modules  This function can be called ONLY by the token contract bound to the compliance.
  """
  IERC3643ComplianceCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ComplianceCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643ComplianceTransactionOutput

  """
  Updates compliance state after tokens are destroyed.
  function called whenever tokens are destroyed from a wallet  this function can update state variables in the modules bound to the compliance  these state variables being used by the module checks to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the modules  This function can be called ONLY by the token contract bound to the compliance.
  """
  IERC3643ComplianceDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ComplianceDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643ComplianceTransactionOutput

  """
  Updates compliance state after a token transfer.
  function called whenever tokens are transferred  from one wallet to another  this function can update state variables in the modules bound to the compliance  these state variables being used by the module checks to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the modules  This function can be called ONLY by the token contract bound to the compliance.
  """
  IERC3643ComplianceTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ComplianceTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643ComplianceTransactionOutput

  """
  Unbinds a token from the compliance contract.
  unbinds a token from the compliance contract.
  """
  IERC3643ComplianceUnbindToken(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ComplianceUnbindTokenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643ComplianceTransactionOutput

  """
  Forces a transfer of tokens between two whitelisted wallets.
  Initiates a forced transfer of tokens between two whitelisted wallets.  If the `from` address does not have sufficient free tokens (unfrozen tokens)  but possesses a total balance equal to or greater than the specified `amount`,  the frozen token amount is reduced to ensure enough free tokens for the transfer.  In such cases, the remaining balance in the `from` account consists entirely of frozen tokens post-transfer.  It is imperative that the `to` address is a verified and whitelisted address.
  Returns true if the transfer was successful  This function can only be invoked by a wallet designated as an agent of the token,  provided the agent is not restricted from initiating forced transfers of the token.  Emits a `TokensUnfrozen` event if `_amount` is higher than the free balance of `_from`.  Also emits a `Transfer` event.  To execute this function, the calling agent must not be restricted from initiating forced transfers of the token.  If the agent is restricted from this capability, the function call will fail.  The function can only be called when the contract is not already paused.  error `AgentNotAuthorized` - Thrown if the agent is restricted from initiating forced transfers of the token,  indicating they do not have the necessary permissions to execute this function.
  """
  IERC3643ForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643ForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  To freeze tokens for an address, the calling agent must have the capability to freeze tokens enabled. If the agent is disabled from freezing tokens, the function call will fail. error AgentNotAuthorized - Thrown if the agent is disabled from freezing tokens, indicating they do not have the necessary permissions to execute this function.
  Freezes a specified token amount for a given address, preventing those tokens from being transferred. This function can be called by an agent of the token, provided the agent is not restricted from freezing tokens. emits a `TokensFrozen` event upon successful execution.
  """
  IERC3643FreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643FreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Registers multiple identities in a single transaction.
  function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN "OUT OF GAS" TRANSACTION.
  """
  IERC3643IdentityRegistryBatchRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryBatchRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Removes a user from the identity registry.
  Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract.
  """
  IERC3643IdentityRegistryDeleteIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryDeleteIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Registers an identity contract for a user address.
  Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract.
  """
  IERC3643IdentityRegistryRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Sets the claim topics registry contract address.
  Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract.
  """
  IERC3643IdentityRegistrySetClaimTopicsRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistrySetClaimTopicsRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Sets the identity registry storage contract address.
  Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract.
  """
  IERC3643IdentityRegistrySetIdentityRegistryStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistrySetIdentityRegistryStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Sets the trusted issuers registry contract address.
  Replace the actual trustedIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract.
  """
  IERC3643IdentityRegistrySetTrustedIssuersRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistrySetTrustedIssuersRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Adds an identity contract corresponding to a user address in the storage.
  adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract.
  """
  IERC3643IdentityRegistryStorageAddIdentityToStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryStorageAddIdentityToStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryStorageTransactionOutput

  """
  Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS.
  """
  IERC3643IdentityRegistryStorageBindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryStorageBindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryStorageTransactionOutput

  """
  Updates an identity contract corresponding to a user address.
  Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract.
  """
  IERC3643IdentityRegistryStorageModifyStoredIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryStorageModifyStoredIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryStorageTransactionOutput

  """
  Updates the country corresponding to a user address.
  Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract.
  """
  IERC3643IdentityRegistryStorageModifyStoredInvestorCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryStorageModifyStoredInvestorCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryStorageTransactionOutput

  """
  Removes an user from the storage.
  Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract.
  """
  IERC3643IdentityRegistryStorageRemoveIdentityFromStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryStorageRemoveIdentityFromStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryStorageTransactionOutput

  """
  Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract.
  """
  IERC3643IdentityRegistryStorageUnbindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryStorageUnbindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryStorageTransactionOutput

  """
  Updates the country for a user address.
  Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract.
  """
  IERC3643IdentityRegistryUpdateCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryUpdateCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Updates the identity contract for a user address.
  Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract.
  """
  IERC3643IdentityRegistryUpdateIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643IdentityRegistryUpdateIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643IdentityRegistryTransactionOutput

  """
  Mints tokens to a specified address.
  Mints tokens to a specified address.  This enhanced version of the default mint method allows tokens to be minted  to an address only if it is a verified and whitelisted address according to the security token.
  """
  IERC3643Mint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643MintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Pauses all token transfers.
  Pauses the token contract. When the contract is paused, investors cannot transfer tokens anymore. This function can only be called by an agent of the token, provided the agent is not restricted from pausing the token. emits a `Paused` event upon successful execution. To pause token transfers, the calling agent must have pausing capabilities enabled. If the agent is disabled from pausing, the function call will fail. The function can be called only when the contract is not already paused. error AgentNotAuthorized - Thrown if the agent is disabled from pausing the token, indicating they do not have the necessary permissions to execute this function.
  """
  IERC3643Pause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Recovers tokens from a lost wallet to a new wallet for an investor.
  Initiates a recovery process to transfer tokens and associated states from a lost wallet to a new wallet for an investor. This function allows an authorized agent to recover tokens from a lost wallet, transferring them to a new wallet while preserving the investor's identity and status within the token ecosystem. The function ensures that all relevant data, including frozen tokens and address freezing status, is accurately transferred to the new wallet.
  A boolean value indicating whether the recovery process was successful. Requirements: - The caller must be an agent authorized to perform recovery operations, with no restrictions on this capability. - The `_lostWallet` must have a non-zero token balance; otherwise, the recovery is unnecessary and will revert. - Either the `_lostWallet` or the `_newWallet` must be present in the identity registry;   if neither is present, the function will revert. Operations: - Transfers the entire token balance from `_lostWallet` to `_newWallet`. - Transfers any frozen tokens from `_lostWallet` to `_newWallet`, updating the frozen token count accordingly. - Transfers the address freeze status from `_lostWallet` to `_newWallet`,   ensuring the new wallet retains any restrictions if applicable. - Updates the identity registry:   - If `_lostWallet` is listed in the identity registry, it will be removed,     and `_newWallet` will be registered unless already present. Emits the following events: - `TokensUnfrozen` if there are frozen tokens on `_lostWallet` that are transferred. - `TokensFrozen` if frozen tokens are added to `_newWallet`. - `AddressFrozen` if the freeze status of either wallet changes. - `Transfer` to reflect the movement of tokens from `_lostWallet` to `_newWallet`. - `RecoverySuccess` upon successful completion of the recovery process. Reverts if: - The agent calling the function does not have the necessary permissions to perform recovery (`AgentNotAuthorized`). - The `_lostWallet` has no tokens to recover (`NoTokenToRecover`). - Neither `_lostWallet` nor `_newWallet` is present in the identity registry (`RecoveryNotPossible`).
  """
  IERC3643RecoveryAddress(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643RecoveryAddressInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  To change an address's frozen status, the calling agent must have the capability to freeze addresses enabled. If the agent is disabled from freezing addresses, the function call will fail. error AgentNotAuthorized - Thrown if the agent is disabled from freezing addresses, indicating they do not have the necessary permissions to execute this function.
  Sets an address's frozen status for this token, either freezing or unfreezing the address based on the provided boolean value. This function can be called by an agent of the token, assuming the agent is not restricted from freezing addresses. emits an `AddressFrozen` event upon successful execution.
  """
  IERC3643SetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643SetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Sets the compliance contract of the token.
  sets the compliance contract of the token.
  """
  IERC3643SetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643SetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Sets the Identity Registry for the token.
  sets the Identity Registry for the token.
  """
  IERC3643SetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643SetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Sets the token name.
  sets the token name.
  """
  IERC3643SetName(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643SetNameInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Sets the onchain ID of the token.
  sets the onchain ID of the token.
  """
  IERC3643SetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643SetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Sets the token symbol.
  sets the token symbol.
  """
  IERC3643SetSymbol(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643SetSymbolInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IERC3643Transfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643TransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  IERC3643TransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643TransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Registers a ClaimIssuer contract as trusted claim issuer.
  registers a ClaimIssuer contract as trusted claim issuer.  Requires that a ClaimIssuer contract doesn't already exist  Requires that the claimTopics set is not empty  Requires that there is no more than 15 claimTopics  Requires that there is no more than 50 Trusted issuers.
  """
  IERC3643TrustedIssuersRegistryAddTrustedIssuer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643TrustedIssuersRegistryAddTrustedIssuerInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TrustedIssuersRegistryTransactionOutput

  """
  Removes the ClaimIssuer contract of a trusted claim issuer.
  Removes the ClaimIssuer contract of a trusted claim issuer.  Requires that the claim issuer contract to be registered first.
  """
  IERC3643TrustedIssuersRegistryRemoveTrustedIssuer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643TrustedIssuersRegistryRemoveTrustedIssuerInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TrustedIssuersRegistryTransactionOutput

  """
  Updates the set of claim topics that a trusted issuer is allowed to emit.
  Updates the set of claim topics that a trusted issuer is allowed to emit.  Requires that this ClaimIssuer contract already exists in the registry  Requires that the provided claimTopics set is not empty  Requires that there is no more than 15 claimTopics.
  """
  IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopics(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopicsInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TrustedIssuersRegistryTransactionOutput

  """
  To unfreeze tokens for an address, the calling agent must have the capability to unfreeze tokens enabled. If the agent is disabled from unfreezing tokens, the function call will fail. error AgentNotAuthorized - Thrown if the agent is disabled from unfreezing tokens, indicating they do not have the necessary permissions to execute this function.
  Unfreezes a specified token amount for a given address, allowing those tokens to be transferred again. This function can be called by an agent of the token, assuming the agent is not restricted from unfreezing tokens. emits a `TokensUnfrozen` event upon successful execution.
  """
  IERC3643UnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IERC3643UnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Resumes token transfers after pause.
  Unpauses the token contract, allowing investors to resume token transfers under normal conditions This function can only be called by an agent of the token, provided the agent is not restricted from pausing the token. emits an `Unpaused` event upon successful execution. To unpause token transfers, the calling agent must have pausing capabilities enabled. If the agent is disabled from pausing, the function call will fail. The function can be called only when the contract is currently paused. error AgentNotAuthorized - Thrown if the agent is disabled from pausing the token, indicating they do not have the necessary permissions to execute this function.
  """
  IERC3643Unpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IERC3643TransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  ISMARTAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.
  """
  ISMARTApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  ISMARTBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  ISMARTBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  ISMARTBurnableBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTBurnableBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTBurnableTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  ISMARTBurnableBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTBurnableBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTBurnableTransactionOutput

  """
  Sets or updates the maximum total supply (cap) for the token.
  Allows an authorized caller to change the cap. The new cap cannot be zero or less      than the current total supply of the token. Emits a {CapSet} event on success.      The authorization logic for who can call this function is handled by the contract      implementing this interface.
  """
  ISMARTCappedSetCap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCappedSetCapInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCappedTransactionOutput

  """
  Hook function called by the `ISMART` token contract *after* new tokens have been successfully minted.
  This function CAN modify state. It allows compliance modules to react to minting events.      The implementation should only be callable by the `_token` contract.      It typically iterates through active compliance modules and calls their `created` hook.
  """
  ISMARTComplianceCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTComplianceCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTComplianceTransactionOutput

  """
  Hook function called by the `ISMART` token contract *after* tokens have been successfully burned (destroyed).
  This function CAN modify state. It allows compliance modules to react to burn events.      The implementation should only be callable by the `_token` contract.      It typically iterates through active compliance modules and calls their `destroyed` hook.
  """
  ISMARTComplianceDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTComplianceDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTComplianceTransactionOutput

  """
  Called by the main `ISMARTCompliance` contract immediately AFTER a token mint operation has successfully occurred.
  This function allows the compliance module to react to a completed mint. It CAN modify the module's state.      For example, it could update total supply trackers specific to this module or log minting events.      This is part of the post-creation hook mechanism.
  """
  ISMARTComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTComplianceModuleTransactionOutput

  """
  Called by the main `ISMARTCompliance` contract immediately AFTER a token burn or redeem operation has successfully occurred.
  This function allows the compliance module to react to a completed burn/redeem. It CAN modify the module's state.      For instance, it might update records related to token destruction or adjust available quotas.      This is part of the post-destruction hook mechanism.
  """
  ISMARTComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTComplianceModuleTransactionOutput

  """
  Called by the main `ISMARTCompliance` contract immediately AFTER a token transfer has successfully occurred.
  This function allows the compliance module to react to a completed transfer. It CAN modify the module's state,      for example, to update usage counters, record transaction details, or adjust dynamic limits.      This function is part of the post-transfer hook mechanism.
  """
  ISMARTComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTComplianceModuleTransactionOutput

  """
  Hook function called by the `ISMART` token contract *after* a token transfer has successfully occurred.
  This function CAN modify state. It is intended for compliance modules that need to update their internal state      (e.g., transaction counters, volume trackers) or log information post-transfer.      The implementation should only be callable by the `_token` contract it is associated with.      It typically iterates through active compliance modules and calls their `transferred` hook.
  """
  ISMARTComplianceTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTComplianceTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTComplianceTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  ISMARTCustodianBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  ISMARTCustodianBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  ISMARTCustodianBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  ISMARTCustodianBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  ISMARTCustodianForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  ISMARTCustodianForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  ISMARTCustodianFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  ISMARTCustodianSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  ISMARTCustodianUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTCustodianUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTCustodianTransactionOutput

  """
  Allows the caller (a token holder) to claim all their available (accrued and unclaimed) yield from completed periods.
  This function will typically: 1. Determine the periods for which the caller has not yet claimed yield. 2. Calculate the yield owed for those periods based on their historical token balance at the end of each respective period. 3. Transfer the total calculated yield (in `denominationAsset()`) to the caller. 4. Update the caller's `lastClaimedPeriod`. This is a state-changing function and will emit events (e.g., `YieldClaimed`).
  """
  ISMARTFixedYieldScheduleClaimYield(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTFixedYieldScheduleTransactionOutput

  """
  Allows anyone to deposit (top-up) the denomination asset into the schedule contract to fund yield payments.
  This function is used to ensure the contract has sufficient reserves of the `denominationAsset()` to pay out accrued yield. It typically involves the caller first approving the schedule contract to spend their `denominationAsset` tokens, then this function calls `transferFrom`.
  """
  ISMARTFixedYieldScheduleTopUpDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTFixedYieldScheduleTopUpDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTFixedYieldScheduleTransactionOutput

  """
  Allows an authorized administrator to withdraw all available `denominationAsset` tokens from the schedule contract.
  Similar to `withdrawDenominationAsset`, but withdraws the entire balance of `denominationAsset` held by the contract. Should also be strictly access-controlled.
  """
  ISMARTFixedYieldScheduleWithdrawAllDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTFixedYieldScheduleWithdrawAllDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTFixedYieldScheduleTransactionOutput

  """
  Allows an authorized administrator to withdraw a specific `amount` of the `denominationAsset` from the schedule contract.
  This is an administrative function and should be strictly access-controlled (e.g., `onlyRole(ADMIN_ROLE)`). Useful for managing excess funds or in emergency situations.
  """
  ISMARTFixedYieldScheduleWithdrawDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTFixedYieldScheduleWithdrawDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTFixedYieldScheduleTransactionOutput

  """
  Registers multiple identities in a single batch transaction.
  This function is typically callable only by authorized agents or registrars.      It is a gas-saving measure for registering many users at once.      The function will usually revert if any of the `_userAddresses` are already registered or if the input arrays have mismatched lengths.      Care should be taken with the number of entries due to block gas limits.
  """
  ISMARTIdentityRegistryBatchRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryBatchRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Removes an existing identity registration for an investor's wallet address.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the `_userAddress` is not currently registered.      This action effectively unlinks the wallet address from its associated `IIdentity` contract in this registry.
  """
  ISMARTIdentityRegistryDeleteIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryDeleteIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Recovers an identity by creating a new wallet registration with a new identity contract,         marking the old wallet as lost, and preserving the country code.
  This function handles the practical reality that losing wallet access often means losing      access to the identity contract as well. It creates a fresh start while maintaining      regulatory compliance data and recovery links for token reclaim.      The function is typically restricted to registrar roles.
  """
  ISMARTIdentityRegistryRecoverIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryRecoverIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Registers an investor's wallet address, linking it to their on-chain `IIdentity` contract and their country of residence.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the provided `_userAddress` is already registered to prevent duplicate entries.      The country code is important for jurisdictional compliance.
  """
  ISMARTIdentityRegistryRegisterIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryRegisterIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Sets or updates the address of the `IdentityRegistryStorage` contract.
  This function is usually restricted to an administrative role (e.g., contract owner).      It allows the Identity Registry to delegate the actual storage of identity data to a separate, potentially upgradable, contract.      Changing this address can have significant implications, so it must be handled with care.
  """
  ISMARTIdentityRegistrySetIdentityRegistryStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistrySetIdentityRegistryStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Sets or updates the address of the `TopicSchemeRegistry` contract.
  This function is usually restricted to an administrative role (e.g., contract owner).      The `TopicSchemeRegistry` is responsible for maintaining valid claim topic schemes.      Updating this address changes which claim topics are considered valid for verification.
  """
  ISMARTIdentityRegistrySetTopicSchemeRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistrySetTopicSchemeRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Sets or updates the address of the `TrustedIssuersRegistry` contract.
  This function is usually restricted to an administrative role (e.g., contract owner).      The `TrustedIssuersRegistry` is responsible for maintaining a list of claim issuers whose attestations are considered valid.      Updating this address changes the set of authorities recognized for identity verification.
  """
  ISMARTIdentityRegistrySetTrustedIssuersRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistrySetTrustedIssuersRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Adds an identity contract corresponding to a user address in the storage.
  adds an identity contract corresponding to a user address in the storage.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by an address set as agent of the smart contract.
  """
  ISMARTIdentityRegistryStorageAddIdentityToStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageAddIdentityToStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Adds an identity registry as agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function adds the identity registry to the list of identityRegistries linked to the storage contract  cannot bind more than 300 IR to 1 IRS.
  """
  ISMARTIdentityRegistryStorageBindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageBindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Establishes a recovery link between a lost wallet and its replacement.
  This creates a bidirectional mapping for token recovery purposes.
  """
  ISMARTIdentityRegistryStorageLinkWalletRecovery(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageLinkWalletRecoveryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Marks a user wallet as lost for a specific identity contract in the storage.
  Called by an authorized Identity Registry. This indicates the wallet should no longer be considered active      for verification or operations related to this specific identity, and potentially globally.
  """
  ISMARTIdentityRegistryStorageMarkWalletAsLost(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageMarkWalletAsLostInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Updates an identity contract corresponding to a user address.
  Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract.
  """
  ISMARTIdentityRegistryStorageModifyStoredIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageModifyStoredIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Updates the country corresponding to a user address.
  Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by an address set as agent of the smart contract.
  """
  ISMARTIdentityRegistryStorageModifyStoredInvestorCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageModifyStoredInvestorCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Removes an user from the storage.
  Removes an user from the storage.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by an address set as agent of the smart contract.
  """
  ISMARTIdentityRegistryStorageRemoveIdentityFromStorage(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageRemoveIdentityFromStorageInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Removes an identity registry from being agent of the Identity Registry Storage Contract.  This function can only be called by the wallet set as owner of the smart contract  This function removes the identity registry from the list of identityRegistries linked to the storage contract.
  """
  ISMARTIdentityRegistryStorageUnbindIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryStorageUnbindIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryStorageTransactionOutput

  """
  Updates the country code associated with a previously registered investor's wallet address.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the `_userAddress` is not registered.      This is used to reflect changes in an investor's country of residence for compliance purposes.
  """
  ISMARTIdentityRegistryUpdateCountry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryUpdateCountryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Updates the on-chain `IIdentity` contract associated with a previously registered investor's wallet address.
  This function is typically callable only by authorized agents or registrars.      It will usually revert if the `_userAddress` is not registered.      This is useful for scenarios like identity recovery, or if an investor upgrades or changes their `IIdentity` contract.
  """
  ISMARTIdentityRegistryUpdateIdentity(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTIdentityRegistryUpdateIdentityInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTIdentityRegistryTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  ISMARTMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  ISMARTPausablePause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTPausableTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  ISMARTPausableUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTPausableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  ISMARTRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  ISMARTRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Allows the caller (the token holder) to redeem a specific amount of their own tokens.
  When a token holder calls this function, the specified `amount` of their tokens will be burned (destroyed). This action reduces both the token holder's balance and the total supply of the token. The function should: 1. Optionally execute a `_beforeRedeem` hook for pre-redemption logic. 2. Perform the burn operation via an internal function like `_redeemable_executeBurn`. 3. Optionally execute an `_afterRedeem` hook for post-redemption logic. 4. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.
  A boolean value indicating whether the redemption was successful (typically `true`).
  """
  ISMARTRedeemableRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTRedeemableRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTRedeemableTransactionOutput

  """
  Allows the caller (the token holder) to redeem all of their own tokens.
  When a token holder calls this function, their entire balance of this token will be burned (destroyed). This action reduces the token holder's balance to zero and decreases the total supply of the token accordingly. The function should: 1. Determine the caller's current token balance. 2. Optionally execute a `_beforeRedeem` hook for pre-redemption logic with the full balance amount. 3. Perform the burn operation for the full balance via an internal function like `_redeemable_executeBurn`. 4. Optionally execute an `_afterRedeem` hook for post-redemption logic with the full balance amount. 5. Emit a `Redeemed` event to log the transaction on the blockchain. The contract implementing this interface is expected to use `_msgSender()` to identify the caller.
  A boolean value indicating whether the redemption of all tokens was successful (typically `true`).
  """
  ISMARTRedeemableRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTRedeemableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  ISMARTRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  ISMARTSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  ISMARTSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  ISMARTSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  ISMARTSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Grants `role` to each address in `accounts`.
  """
  ISMARTTokenAccessManagerBatchGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerBatchGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Revokes `role` from each address in `accounts`.
  """
  ISMARTTokenAccessManagerBatchRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerBatchRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Grants multiple roles to a single account.
  """
  ISMARTTokenAccessManagerGrantMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerGrantMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
  """
  ISMARTTokenAccessManagerGrantRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerGrantRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Renounces multiple roles from the calling account.
  """
  ISMARTTokenAccessManagerRenounceMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerRenounceMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.
  """
  ISMARTTokenAccessManagerRenounceRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerRenounceRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Revokes multiple roles from a single account.
  """
  ISMARTTokenAccessManagerRevokeMultipleRoles(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerRevokeMultipleRolesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
  """
  ISMARTTokenAccessManagerRevokeRole(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTokenAccessManagerRevokeRoleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTokenAccessManagerTransactionOutput

  """
  Registers multiple topic schemes in a single transaction.
  topicIds are generated from names using keccak256 hash.
  """
  ISMARTTopicSchemeRegistryBatchRegisterTopicSchemes(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTopicSchemeRegistryBatchRegisterTopicSchemesInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTopicSchemeRegistryTransactionOutput

  """
  Registers a new topic scheme with its name and signature.
  topicId is generated as uint256(keccak256(abi.encodePacked(name))).
  """
  ISMARTTopicSchemeRegistryRegisterTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTopicSchemeRegistryRegisterTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTopicSchemeRegistryTransactionOutput

  """
  Removes a topic scheme from the registry.
  """
  ISMARTTopicSchemeRegistryRemoveTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTopicSchemeRegistryRemoveTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTopicSchemeRegistryTransactionOutput

  """
  Updates an existing topic scheme's signature.
  """
  ISMARTTopicSchemeRegistryUpdateTopicScheme(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTopicSchemeRegistryUpdateTopicSchemeInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTopicSchemeRegistryTransactionOutput

  """
  Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  ISMARTTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.
  """
  ISMARTTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTTransactionOutput

  """
  Sets or updates the yield schedule contract for this token.
  This function is crucial for configuring how yield is generated and distributed for the token. The `schedule` address points to another smart contract that implements the `ISMARTYieldSchedule` interface (or a more specific one like `ISMARTFixedYieldSchedule`). This schedule contract will contain the detailed logic for yield calculation, timing, and distribution. Implementers should consider adding access control to this function (e.g., only allowing an admin or owner role) to prevent unauthorized changes to the yield mechanism.
  """
  ISMARTYieldSetYieldSchedule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: ISMARTYieldSetYieldScheduleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): ISMARTYieldTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  IdentityAllowListComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IdentityAllowListComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IdentityAllowListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  IdentityAllowListComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IdentityAllowListComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IdentityAllowListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  IdentityAllowListComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IdentityAllowListComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IdentityAllowListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  IdentityBlockListComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IdentityBlockListComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IdentityBlockListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  IdentityBlockListComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IdentityBlockListComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IdentityBlockListComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  IdentityBlockListComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: IdentityBlockListComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): IdentityBlockListComplianceModuleTransactionOutput

  """
  Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.
  """
  OnChainContractIdentityAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainContractIdentityAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainContractIdentityTransactionOutput

  """
  Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  OnChainContractIdentityAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainContractIdentityAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainContractIdentityTransactionOutput

  """
  Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`.
  """
  OnChainContractIdentityApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainContractIdentityApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainContractIdentityTransactionOutput

  """
  Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed.
  """
  OnChainContractIdentityExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainContractIdentityExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainContractIdentityTransactionOutput

  """
  Issues a CONTRACT scheme claim to a subject identity on behalf of the associated contract.
  Only the associated contract can call this function to issue claims.
  The ID of the created claim.
  """
  OnChainContractIdentityIssueClaimTo(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainContractIdentityIssueClaimToInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainContractIdentityTransactionOutput

  """
  Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  OnChainContractIdentityRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainContractIdentityRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainContractIdentityTransactionOutput

  """
  Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  OnChainContractIdentityRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainContractIdentityRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainContractIdentityTransactionOutput

  """
  Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.
  """
  OnChainIdentityAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityTransactionOutput

  """
  Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  OnChainIdentityAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityTransactionOutput

  """
  Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`.
  """
  OnChainIdentityApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityTransactionOutput

  """
  Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed.
  """
  OnChainIdentityExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityTransactionOutput

  """
  Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  OnChainIdentityRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityTransactionOutput

  """
  Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  OnChainIdentityRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityTransactionOutput

  """
  Add or update a claim. Triggers Event: `ClaimAdded`, `ClaimChanged` Specification: Add or update a claim from an issuer. _signature is a signed message of the following structure: `keccak256(abi.encode(address identityHolder_address, uint256 topic, bytes data))`. Claim IDs are generated using `keccak256(abi.encode(address issuer_address + uint256 topic))`.
  """
  OnChainIdentityWithRevocationAddClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationAddClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  Adds a _key to the identity. The _purpose specifies the purpose of the key. Triggers Event: `KeyAdded` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  OnChainIdentityWithRevocationAddKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationAddKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  Approves an execution. Triggers Event: `Approved` Triggers on execution successful Event: `Executed` Triggers on execution failure Event: `ExecutionFailed`.
  """
  OnChainIdentityWithRevocationApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  Passes an execution instruction to an ERC734 identity. How the execution is handled is up to the identity implementation: An execution COULD be requested and require `approve` to be called with one or more keys of purpose 1 or 2 to approve this execution. Execute COULD be used as the only accessor for `addKey` and `removeKey`. Triggers Event: ExecutionRequested Triggers on direct execution Event: Executed.
  """
  OnChainIdentityWithRevocationExecute(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationExecuteInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  Removes a claim. Triggers Event: `ClaimRemoved` Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  OnChainIdentityWithRevocationRemoveClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationRemoveClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  Removes _purpose for _key from the identity. Triggers Event: `KeyRemoved` Specification: MUST only be done by keys of purpose 1, or the identity itself. If it's the identity itself, the approval process will determine its approval.
  """
  OnChainIdentityWithRevocationRemoveKey(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationRemoveKeyInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  will fetch the claim from the identity contract (unsafe).
  Revoke a claim previously issued, the claim is no longer considered as valid after revocation.
  isRevoked true when the claim is revoked.
  """
  OnChainIdentityWithRevocationRevokeClaim(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationRevokeClaimInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  Revoke a claim previously issued, the claim is no longer considered as valid after revocation.
  """
  OnChainIdentityWithRevocationRevokeClaimBySignature(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: OnChainIdentityWithRevocationRevokeClaimBySignatureInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): OnChainIdentityWithRevocationTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Transfers tokens to multiple recipients in a batch.
  Implements the `batchTransfer` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_batchTransfer` from `_SMARTLogic` for execution.
  """
  SMARTBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTBurnableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTBurnableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  SMARTBurnableBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTBurnableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTBurnableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  SMARTBurnableBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTBurnableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTBurnableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTBurnableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTBurnableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTBurnableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTBurnableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTBurnableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTBurnableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTBurnableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTBurnableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTBurnableUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTBurnableUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Burns (destroys) tokens from multiple user addresses in a single transaction.
  This function allows for efficient batch processing of token burns, which can save on      transaction fees (gas) compared to calling `burn` multiple times individually.      It requires that the `userAddresses` array and the `amounts` array have the same number of elements,      with each `amounts[i]` corresponding to `userAddresses[i]`.      Similar to the single `burn` function, authorization for each individual burn within the batch      is expected to be handled by the implementing contract (e.g., via an `_authorizeBurn` hook).      If the lengths of the input arrays do not match, the transaction should revert to prevent errors.
  """
  SMARTBurnableUpgradeableBatchBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableBatchBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTBurnableUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTBurnableUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Burns (destroys) a specific amount of tokens from a given user's address.
  This function is intended for an authorized operator (like an admin or a special role)      to burn tokens on behalf of a user, or from a specific account as part of token management.      The actual authorization logic (who can call this) is typically handled by the contract      implementing this interface, often through a mechanism like an `_authorizeBurn` hook.      The function signature and intent are similar to `operatorBurn` as suggested by standards      like ERC3643, where an operator can manage token holdings.
  """
  SMARTBurnableUpgradeableBurn(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableBurnInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTBurnableUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTBurnableUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTBurnableUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTBurnableUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTBurnableUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTBurnableUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTBurnableUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTBurnableUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTBurnableUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTBurnableUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTBurnableUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTBurnableUpgradeableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTCappedAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTCappedApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTCappedBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTCappedBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTCappedMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTCappedRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTCappedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTCappedRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Sets or updates the maximum total supply (cap) for the token.
  Allows an authorized caller to change the cap. The new cap cannot be zero or less      than the current total supply of the token. Emits a {CapSet} event on success.      The authorization logic for who can call this function is handled by the contract      implementing this interface.
  """
  SMARTCappedSetCap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedSetCapInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTCappedSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTCappedSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTCappedSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTCappedSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTCappedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTCappedTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTCappedUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTCappedUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTCappedUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTCappedUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTCappedUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTCappedUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTCappedUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTCappedUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Sets or updates the maximum total supply (cap) for the token.
  Allows an authorized caller to change the cap. The new cap cannot be zero or less      than the current total supply of the token. Emits a {CapSet} event on success.      The authorization logic for who can call this function is handled by the contract      implementing this interface.
  """
  SMARTCappedUpgradeableSetCap(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableSetCapInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTCappedUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTCappedUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTCappedUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTCappedUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTCappedUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTCappedUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCappedUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCappedUpgradeableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTCollateralAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTCollateralApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTCollateralBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTCollateralBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTCollateralMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTCollateralRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTCollateralRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTCollateralRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTCollateralSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTCollateralSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTCollateralSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTCollateralSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTCollateralTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTCollateralTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTCollateralUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTCollateralUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTCollateralUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTCollateralUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTCollateralUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTCollateralUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTCollateralUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTCollateralUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTCollateralUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTCollateralUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTCollateralUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTCollateralUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTCollateralUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTCollateralUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCollateralUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCollateralUpgradeableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTCustodianAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTCustodianApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  SMARTCustodianBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  SMARTCustodianBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTCustodianBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  SMARTCustodianBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTCustodianBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  SMARTCustodianBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  SMARTCustodianForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  SMARTCustodianForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  SMARTCustodianFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTCustodianMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTCustodianRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTCustodianRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTCustodianRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  SMARTCustodianSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTCustodianSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTCustodianSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTCustodianSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTCustodianSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTCustodianTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTCustodianTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  SMARTCustodianUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTCustodianUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTCustodianUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Forcefully transfers tokens for multiple address pairs in a batch.
  A gas-efficient version of `forcedTransfer` for multiple operations.      Requires strong authorization for the entire batch.      Arrays `fromList`, `toList`, and `amounts` must be of the same length.
  """
  SMARTCustodianUpgradeableBatchForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Freezes specific amounts of tokens for multiple addresses in a batch.
  Allows freezing different amounts for different users simultaneously.      Requires authorization for each partial freeze operation.      Arrays must be of the same length.
  """
  SMARTCustodianUpgradeableBatchFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTCustodianUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Freezes or unfreezes multiple addresses in a batch operation.
  A gas-efficient way to update the frozen status for several addresses at once.      Requires authorization for each underlying freeze/unfreeze operation.      The `userAddresses` and `freeze` arrays must be of the same length.
  """
  SMARTCustodianUpgradeableBatchSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTCustodianUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Unfreezes specific amounts of tokens for multiple addresses in a batch.
  Allows unfreezing different amounts for different users simultaneously.      Requires authorization for each partial unfreeze operation.      Arrays must be of the same length.
  """
  SMARTCustodianUpgradeableBatchUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableBatchUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Forcefully recovers tokens from a lost or compromised wallet to a new wallet belonging to the same         verified identity.
  This is a powerful administrative function. It can recover tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  """
  SMARTCustodianUpgradeableForcedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableForcedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Forcefully transfers tokens from one address to another, bypassing standard transfer restrictions.
  This is a powerful administrative function. It can move tokens even if addresses are frozen or      if other transfer conditions (like compliance checks) would normally fail.      If the `from` address has partially frozen tokens, this function may automatically unfreeze      the necessary amount to cover the transfer.      The implementation typically uses an internal flag (like `__isForcedUpdate`) to bypass standard hooks      (e.g., `_beforeTransfer`) during the actual token movement.      Requires strong authorization (e.g., a FORCED_TRANSFER_ROLE).
  bool Returns `true` upon successful execution (should revert on failure).
  """
  SMARTCustodianUpgradeableForcedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableForcedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Freezes a specific amount of tokens for a given address.
  This prevents the specified `amount` of tokens from being used in standard operations by `userAddress`.      The user can still transact with their unfrozen balance.      Reverts if the `amount` to freeze exceeds the user's available (currently unfrozen) balance.      Requires authorization.
  """
  SMARTCustodianUpgradeableFreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableFreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTCustodianUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTCustodianUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTCustodianUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTCustodianUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Freezes or unfreezes an entire address, preventing or allowing standard token operations.
  When an address is frozen, typically all standard transfers, mints (to it), and burns (from it)      are blocked. Unfreezing reverses this.      Implementations should ensure this function requires proper authorization (e.g., a FREEZER_ROLE).
  """
  SMARTCustodianUpgradeableSetAddressFrozen(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableSetAddressFrozenInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTCustodianUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTCustodianUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTCustodianUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTCustodianUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTCustodianUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTCustodianUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Unfreezes a specific amount of previously partially frozen tokens for an address.
  Reduces the partially frozen amount for `userAddress` by the specified `amount`.      Reverts if `amount` exceeds the currently frozen token amount for that address.      Requires authorization.
  """
  SMARTCustodianUpgradeableUnfreezePartialTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTCustodianUpgradeableUnfreezePartialTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTCustodianUpgradeableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTExtensionAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTExtensionApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTExtensionBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTExtensionBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTExtensionMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTExtensionRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTExtensionRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTExtensionRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTExtensionSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTExtensionSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTExtensionSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTExtensionSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTExtensionTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTExtensionTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTExtensionUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTExtensionUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTExtensionUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTExtensionUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTExtensionUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTExtensionUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTExtensionUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTExtensionUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTExtensionUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTExtensionUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTExtensionUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTExtensionUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTExtensionUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTExtensionUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTExtensionUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTExtensionUpgradeableTransactionOutput

  """
  Allows the caller (a token holder) to claim all their available (accrued and unclaimed) yield from completed periods.
  This function will typically: 1. Determine the periods for which the caller has not yet claimed yield. 2. Calculate the yield owed for those periods based on their historical token balance at the end of each respective period. 3. Transfer the total calculated yield (in `denominationAsset()`) to the caller. 4. Update the caller's `lastClaimedPeriod`. This is a state-changing function and will emit events (e.g., `YieldClaimed`).
  """
  SMARTFixedYieldScheduleClaimYield(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleTransactionOutput

  """
  Allows the caller (a token holder) to claim all their available (accrued and unclaimed) yield from completed periods.
  This function will typically: 1. Determine the periods for which the caller has not yet claimed yield. 2. Calculate the yield owed for those periods based on their historical token balance at the end of each respective period. 3. Transfer the total calculated yield (in `denominationAsset()`) to the caller. 4. Update the caller's `lastClaimedPeriod`. This is a state-changing function and will emit events (e.g., `YieldClaimed`).
  """
  SMARTFixedYieldScheduleLogicClaimYield(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleLogicTransactionOutput

  """
  Allows anyone to deposit (top-up) the denomination asset into the schedule contract to fund yield payments.
  This function is used to ensure the contract has sufficient reserves of the `denominationAsset()` to pay out accrued yield. It typically involves the caller first approving the schedule contract to spend their `denominationAsset` tokens, then this function calls `transferFrom`.
  """
  SMARTFixedYieldScheduleLogicTopUpDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleLogicTopUpDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleLogicTransactionOutput

  """
  Allows an authorized administrator to withdraw all available `denominationAsset` tokens from the schedule contract.
  Similar to `withdrawDenominationAsset`, but withdraws the entire balance of `denominationAsset` held by the contract. Should also be strictly access-controlled.
  """
  SMARTFixedYieldScheduleLogicWithdrawAllDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleLogicWithdrawAllDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleLogicTransactionOutput

  """
  Allows an authorized administrator to withdraw a specific `amount` of the `denominationAsset` from the schedule contract.
  This is an administrative function and should be strictly access-controlled (e.g., `onlyRole(ADMIN_ROLE)`). Useful for managing excess funds or in emergency situations.
  """
  SMARTFixedYieldScheduleLogicWithdrawDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleLogicWithdrawDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleLogicTransactionOutput

  """
  Allows anyone to deposit (top-up) the denomination asset into the schedule contract to fund yield payments.
  This function is used to ensure the contract has sufficient reserves of the `denominationAsset()` to pay out accrued yield. It typically involves the caller first approving the schedule contract to spend their `denominationAsset` tokens, then this function calls `transferFrom`.
  """
  SMARTFixedYieldScheduleTopUpDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleTopUpDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleTransactionOutput

  """
  Allows the caller (a token holder) to claim all their available (accrued and unclaimed) yield from completed periods.
  This function will typically: 1. Determine the periods for which the caller has not yet claimed yield. 2. Calculate the yield owed for those periods based on their historical token balance at the end of each respective period. 3. Transfer the total calculated yield (in `denominationAsset()`) to the caller. 4. Update the caller's `lastClaimedPeriod`. This is a state-changing function and will emit events (e.g., `YieldClaimed`).
  """
  SMARTFixedYieldScheduleUpgradeableClaimYield(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput

  """
  Allows anyone to deposit (top-up) the denomination asset into the schedule contract to fund yield payments.
  This function is used to ensure the contract has sufficient reserves of the `denominationAsset()` to pay out accrued yield. It typically involves the caller first approving the schedule contract to spend their `denominationAsset` tokens, then this function calls `transferFrom`.
  """
  SMARTFixedYieldScheduleUpgradeableTopUpDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableTopUpDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput

  """
  Allows an authorized administrator to withdraw all available `denominationAsset` tokens from the schedule contract.
  Similar to `withdrawDenominationAsset`, but withdraws the entire balance of `denominationAsset` held by the contract. Should also be strictly access-controlled.
  """
  SMARTFixedYieldScheduleUpgradeableWithdrawAllDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableWithdrawAllDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput

  """
  Allows an authorized administrator to withdraw a specific `amount` of the `denominationAsset` from the schedule contract.
  This is an administrative function and should be strictly access-controlled (e.g., `onlyRole(ADMIN_ROLE)`). Useful for managing excess funds or in emergency situations.
  """
  SMARTFixedYieldScheduleUpgradeableWithdrawDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleUpgradeableWithdrawDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleUpgradeableTransactionOutput

  """
  Allows an authorized administrator to withdraw all available `denominationAsset` tokens from the schedule contract.
  Similar to `withdrawDenominationAsset`, but withdraws the entire balance of `denominationAsset` held by the contract. Should also be strictly access-controlled.
  """
  SMARTFixedYieldScheduleWithdrawAllDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleWithdrawAllDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleTransactionOutput

  """
  Allows an authorized administrator to withdraw a specific `amount` of the `denominationAsset` from the schedule contract.
  This is an administrative function and should be strictly access-controlled (e.g., `onlyRole(ADMIN_ROLE)`). Useful for managing excess funds or in emergency situations.
  """
  SMARTFixedYieldScheduleWithdrawDenominationAsset(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTFixedYieldScheduleWithdrawDenominationAssetInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTFixedYieldScheduleTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTHistoricalBalancesAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTHistoricalBalancesApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTHistoricalBalancesBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTHistoricalBalancesBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTHistoricalBalancesMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTHistoricalBalancesRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTHistoricalBalancesRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTHistoricalBalancesRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTHistoricalBalancesSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTHistoricalBalancesSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTHistoricalBalancesSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTHistoricalBalancesSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTHistoricalBalancesTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTHistoricalBalancesTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTHistoricalBalancesUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTHistoricalBalancesUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTHistoricalBalancesUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTHistoricalBalancesUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTHistoricalBalancesUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTHistoricalBalancesUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTHistoricalBalancesUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTHistoricalBalancesUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTHistoricalBalancesUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTHistoricalBalancesUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTHistoricalBalancesUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTHistoricalBalancesUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTHistoricalBalancesUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTHistoricalBalancesUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTHistoricalBalancesUpgradeableTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* new tokens have been created (minted).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token creation. If a module doesn't need to react to token creation, it doesn't need to override this.
  """
  SMARTIdentityVerificationComplianceModuleCreated(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTIdentityVerificationComplianceModuleCreatedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTIdentityVerificationComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `SMARTComplianceImplementation` contract *after* tokens have been destroyed (burned).
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on successful token destruction. If a module doesn't need to react to token destruction, it doesn't need to override this.
  """
  SMARTIdentityVerificationComplianceModuleDestroyed(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTIdentityVerificationComplianceModuleDestroyedInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTIdentityVerificationComplianceModuleTransactionOutput

  """
  This function is a hook called by the main `ATKComplianceImplementation` contract *after* a token transfer has occurred.
  This is an empty `virtual` implementation. Inheriting contracts can `override` this function if they need to perform actions or update state based on a successful transfer. For example, a module might log transfer details or update internal counters. If a module doesn't need to react to transfers, it doesn't need to override this.
  """
  SMARTIdentityVerificationComplianceModuleTransferred(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTIdentityVerificationComplianceModuleTransferredInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTIdentityVerificationComplianceModuleTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTPausableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTPausableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTPausableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTPausableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTPausableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  SMARTPausablePause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTPausableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTPausableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTPausableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTPausableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTPausableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTPausableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTPausableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTPausableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTPausableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  SMARTPausableUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTPausableUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTPausableUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTPausableUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTPausableUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTPausableUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Pauses the contract, which typically prevents certain actions like token transfers.
  Implementations should ensure this function can only be called by an authorized address      (e.g., through a modifier like `onlyPauser`). It should revert if the contract is already paused      to prevent redundant operations or event emissions.
  """
  SMARTPausableUpgradeablePause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTPausableUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTPausableUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTPausableUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTPausableUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTPausableUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTPausableUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTPausableUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTPausableUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTPausableUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTPausableUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Unpauses the contract, resuming normal operations (e.g., allowing token transfers again).
  Similar to `pause()`, this function should be restricted to authorized addresses and should      revert if the contract is not currently paused.
  """
  SMARTPausableUpgradeableUnpause(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTPausableUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.
  """
  SMARTRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTRedeemableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTRedeemableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTRedeemableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTRedeemableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTRedeemableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTRedeemableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTRedeemableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Allows the caller (the token holder) to redeem a specific amount of their own tokens.
  This function implements the `redeem` function from the `ISMARTRedeemable` interface. It allows a token holder to burn a specific `amount` of their own tokens. It delegates the core logic to the internal `__smart_redeemLogic` function. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption was successful (typically `true`).
  """
  SMARTRedeemableRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Allows the caller (the token holder) to redeem all of their own tokens.
  This function implements the `redeemAll` function from the `ISMARTRedeemable` interface. It allows a token holder to burn their entire token balance. First, it retrieves the caller's full balance using `__redeemable_getBalance`. Then, it delegates the core logic to the internal `__smart_redeemLogic` function with the retrieved balance. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption of all tokens was successful (typically `true`).
  """
  SMARTRedeemableRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTRedeemableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTRedeemableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTRedeemableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTRedeemableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTRedeemableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTRedeemableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTRedeemableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTRedeemableUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTRedeemableUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTRedeemableUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTRedeemableUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTRedeemableUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTRedeemableUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTRedeemableUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Allows the caller (the token holder) to redeem a specific amount of their own tokens.
  This function implements the `redeem` function from the `ISMARTRedeemable` interface. It allows a token holder to burn a specific `amount` of their own tokens. It delegates the core logic to the internal `__smart_redeemLogic` function. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption was successful (typically `true`).
  """
  SMARTRedeemableUpgradeableRedeem(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableRedeemInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Allows the caller (the token holder) to redeem all of their own tokens.
  This function implements the `redeemAll` function from the `ISMARTRedeemable` interface. It allows a token holder to burn their entire token balance. First, it retrieves the caller's full balance using `__redeemable_getBalance`. Then, it delegates the core logic to the internal `__smart_redeemLogic` function with the retrieved balance. Marked `external virtual` so it can be called from outside and overridden if necessary.
  A boolean value indicating whether the redemption of all tokens was successful (typically `true`).
  """
  SMARTRedeemableUpgradeableRedeemAll(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTRedeemableUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTRedeemableUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTRedeemableUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTRedeemableUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTRedeemableUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTRedeemableUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTRedeemableUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRedeemableUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTRedeemableUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTTokenAccessManagedAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTTokenAccessManagedApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTTokenAccessManagedBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTTokenAccessManagedBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTTokenAccessManagedMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTTokenAccessManagedRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTTokenAccessManagedRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTTokenAccessManagedRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTTokenAccessManagedSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTTokenAccessManagedSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTTokenAccessManagedSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTTokenAccessManagedSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTTokenAccessManagedTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTTokenAccessManagedTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTTokenAccessManagedUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTTokenAccessManagedUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTTokenAccessManagedUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTTokenAccessManagedUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTTokenAccessManagedUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTTokenAccessManagedUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTTokenAccessManagedUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTTokenAccessManagedUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTTokenAccessManagedUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTTokenAccessManagedUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTTokenAccessManagedUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTTokenAccessManagedUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTTokenAccessManagedUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTokenAccessManagedUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTokenAccessManagedUpgradeableTransactionOutput

  """
  Transfers `amount` tokens from `msg.sender` to address `to`.
  Overrides the standard `ERC20.transfer` and `IERC20.transfer`.      Delegates the core transfer logic to `_smart_transfer` from `_SMARTLogic`,      which incorporates SMART compliance and verification checks via hooks.
  bool Returns `true` upon successful transfer completion (reverts on failure).
  """
  SMARTTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Transfers tokens to multiple recipients in a batch from the effective sender.
  Implements `ISMART.batchTransfer` (via `_SMARTExtension`). Delegates to `_smart_batchTransfer`.
  """
  SMARTUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  Implements the `recoverTokens` function from `ISMART` (via `_SMARTExtension`).      Delegates to `_smart_recoverTokens` from `_SMARTLogic` for execution.
  """
  SMARTUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Transfers `amount` tokens from the effective sender to address `to`.
  Overrides `ERC20Upgradeable.transfer` and `IERC20.transfer`.      Delegates to `_smart_transfer` from `_SMARTLogic`, which integrates SMART compliance/verification.      The effective sender is determined by `_smartSender()` (from `SMARTContext` via `SMARTExtensionUpgradeable`), which supports meta-transactions if `ERC2771ContextUpgradeable` is used.
  bool Returns `true` on success (reverts on failure).
  """
  SMARTUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTUpgradeableTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTYieldAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTYieldApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTYieldBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTYieldBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTYieldMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTYieldRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTYieldRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTYieldRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTYieldSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTYieldSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTYieldSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTYieldSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Sets or updates the yield schedule contract for this token.
  This function is crucial for configuring how yield is generated and distributed for the token. The `schedule` address points to another smart contract that implements the `ISMARTYieldSchedule` interface (or a more specific one like `ISMARTFixedYieldSchedule`). This schedule contract will contain the detailed logic for yield calculation, timing, and distribution. Implementers should consider adding access control to this function (e.g., only allowing an admin or owner role) to prevent unauthorized changes to the yield mechanism.
  """
  SMARTYieldSetYieldSchedule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldSetYieldScheduleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTYieldTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTYieldTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldTransactionOutput

  """
  Adds a new compliance module contract to this token's compliance framework and sets its initial configuration parameters.
  Before adding, the implementation (or the main `ISMARTCompliance` contract) MUST validate:      1. That `_module` is a valid contract address.      2. That `_module` correctly implements the `ISMARTComplianceModule` interface (e.g., via ERC165 `supportsInterface`).      3. That the provided `_params` are valid for the `_module` (by calling `_module.validateParameters(_params)`).      Typically restricted to an administrative role. Emits `ComplianceModuleAdded`.
  """
  SMARTYieldUpgradeableAddComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableAddComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.
  """
  SMARTYieldUpgradeableApprove(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableApproveInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Mints tokens to multiple recipient addresses in a single batch transaction.
  This is an efficiency function to reduce transaction costs when minting to many users.      Typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`.      If any recipient fails checks, the entire batch operation should revert to maintain atomicity.      Emits multiple `MintCompleted` and ERC20 `Transfer` events.
  """
  SMARTYieldUpgradeableBatchMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableBatchMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Transfers tokens from the caller to multiple recipient addresses in a single batch transaction.
  This is an efficiency function, useful for distributions or airdrops (if compliant).      The caller (`msg.sender`) must have a sufficient balance to cover the sum of all `_amounts`.      Implementations MUST perform identity verification and compliance checks for *each* recipient in `_toList`      and also check the sender (`msg.sender`) if sender-side compliance rules apply.      If any part of the batch fails checks, the entire operation should revert.      Emits multiple `TransferCompleted` and ERC20 `Transfer` events.
  """
  SMARTYieldUpgradeableBatchTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableBatchTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Creates (mints) a specified `_amount` of new tokens and assigns them to the `_to` address.
  This function is typically restricted to accounts with a specific minter role.      Implementations MUST perform identity verification and compliance checks on the `_to` address before minting.      Failure to meet these checks should result in a revert (e.g., with `RecipientNotVerified` or a compliance error).      Emits `MintCompleted` and the standard ERC20 `Transfer` event (from `address(0)` to `_to`).
  """
  SMARTYieldUpgradeableMint(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableMintInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Allows an authorized account to recover ERC20 tokens that were mistakenly sent to this SMART token contract's address.
  This function is crucial for retrieving assets that are not the SMART token itself but are held by the contract.      Access to this function MUST be strictly controlled (e.g., via an `_authorizeRecoverERC20` internal hook or role).      It is critical that this function CANNOT be used to recover the SMART token itself, as that could drain the contract or interfere with its logic.      It should use a safe transfer mechanism (like OpenZeppelin's `SafeERC20.safeTransfer`) to prevent issues with non-standard ERC20 tokens.
  """
  SMARTYieldUpgradeableRecoverERC20(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableRecoverERC20Input!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Recovers SMART tokens from a lost wallet to the caller's address.
  This will make it possible to recover SMART tokens from the lostWallet to msgSender, if it was correctly marked as lost in the identity registry.
  """
  SMARTYieldUpgradeableRecoverTokens(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableRecoverTokensInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Removes an active compliance module from this token's compliance framework.
  Once removed, the rules enforced by this `_module` will no longer apply to token operations.      Typically restricted to an administrative role. Emits `ComplianceModuleRemoved`.
  """
  SMARTYieldUpgradeableRemoveComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableRemoveComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Sets or updates the address of the main `ISMARTCompliance` contract used by this token.
  The Compliance contract orchestrates checks across various compliance modules to determine transfer legality.      Typically restricted to an administrative role. Emits `ComplianceAdded`.
  """
  SMARTYieldUpgradeableSetCompliance(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableSetComplianceInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Sets or updates the address of the `ISMARTIdentityRegistry` contract used by this token.
  The Identity Registry is responsible for managing associations between investor wallet addresses and their on-chain Identity contracts,      and for verifying identities against required claims.      Typically restricted to an administrative role. Emits `IdentityRegistryAdded`.
  """
  SMARTYieldUpgradeableSetIdentityRegistry(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableSetIdentityRegistryInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Sets or updates the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can be used to represent the token issuer or the token itself as an on-chain entity.      Typically, this function is restricted to an administrative role.
  """
  SMARTYieldUpgradeableSetOnchainID(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableSetOnchainIDInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Sets or updates the configuration parameters for a specific, already added compliance module.
  This allows an administrator to change how a particular compliance rule behaves for this token.      The implementing contract (or the `ISMARTCompliance` contract) MUST validate these `_params` by calling      the module's `validateParameters(_params)` function before applying them.      Typically restricted to an administrative role. Emits `ModuleParametersUpdated`.
  """
  SMARTYieldUpgradeableSetParametersForComplianceModule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableSetParametersForComplianceModuleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  Sets or updates the yield schedule contract for this token.
  This function is crucial for configuring how yield is generated and distributed for the token. The `schedule` address points to another smart contract that implements the `ISMARTYieldSchedule` interface (or a more specific one like `ISMARTFixedYieldSchedule`). This schedule contract will contain the detailed logic for yield calculation, timing, and distribution. Implementers should consider adding access control to this function (e.g., only allowing an admin or owner role) to prevent unauthorized changes to the yield mechanism.
  """
  SMARTYieldUpgradeableSetYieldSchedule(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableSetYieldScheduleInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.
  """
  SMARTYieldUpgradeableTransfer(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableTransferInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput

  """
  See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.
  """
  SMARTYieldUpgradeableTransferFrom(
    """
    The address of the contract
    """
    address: String!

    """
    Challenge ID that is used to verify access to the private key of the from address
    """
    challengeId: String

    """
    Challenge response that is used to verify access to the private key of the from address
    """
    challengeResponse: String

    """
    The address of the sender
    """
    from: String!

    """
    Gas limit
    """
    gasLimit: String

    """
    Gas price
    """
    gasPrice: String
    input: SMARTYieldUpgradeableTransferFromInput!

    """
    Metadata (store custom metadata from your application)
    """
    metadata: JSON

    """
    Simulate the transaction before sending it
    """
    simulate: Boolean

    """
    Payable value (wei)
    """
    value: String

    """
    Verification ID that is used to verify access to the private key of the from address
    """
    verificationId: String
      @deprecated(
        reason: "Use challengeId instead. This field will be removed in a future version."
      )
  ): SMARTYieldUpgradeableTransactionOutput
  createWallet(
    """
    The ID of the key vault where the wallet will be created
    """
    keyVaultId: String!

    """
    Information about the wallet to be created
    """
    walletInfo: CreateWalletInfoInput!
  ): CreateWalletOutput

  """
  Create a new verification for a specific user wallet
  """
  createWalletVerification(
    """
    The Ethereum address of the user wallet
    """
    userWalletAddress: String!
    verificationInfo: CreateWalletVerificationInput!
  ): CreateWalletVerificationOutput

  """
  Creates a verification challenge for a specific verification id
  """
  createWalletVerificationChallenge(
    """
    The Ethereum address of the user's wallet
    """
    userWalletAddress: String!

    """
    ID of the verification to create the challenge for
    """
    verificationId: String!
  ): VerificationChallenge

  """
  Generates and returns challenges for all or specific verification methods of a user's wallet
  """
  createWalletVerificationChallenges(
    """
    Number of challenges to create (1-10, defaults to 1)
    """
    amount: Int = 1

    """
    The Ethereum address of the user's wallet
    """
    userWalletAddress: String!

    """
    Optional ID of a specific verification to create challenges for
    """
    verificationId: String
  ): [WalletVerificationChallenge!]
    @deprecated(
      reason: "Use createWalletVerificationChallenge instead. Migration: Replace mutation name, add required verificationId parameter, remove amount parameter."
    )

  """
  Removes a specific verification method from a user's wallet
  """
  deleteWalletVerification(
    """
    Ethereum address of the user's wallet
    """
    userWalletAddress: String!

    """
    Unique identifier of the verification to delete
    """
    verificationId: String!
  ): DeleteWalletVerificationOutput

  """
  Verifies a wallet verification challenge
  """
  verifyWalletVerificationChallenge(
    """
    The challenge response to verify (e.g., hashed PIN with challenge secret)
    """
    challengeResponse: String!

    """
    Ethereum address of the user's wallet
    """
    userWalletAddress: String!

    """
    Optional verification ID for specific verification method
    """
    verificationId: String
  ): VerifyWalletVerificationChallengeOutput
    @deprecated(
      reason: "Use verifyWalletVerificationChallengeById instead. Migration: Replace mutation name, add required challengeId parameter, remove userWalletAddress/verificationId parameters."
    )

  """
  Verifies a wallet verification challenge by challenge ID
  """
  verifyWalletVerificationChallengeById(
    """
    ID of the challenge to verify
    """
    challengeId: String!

    """
    The challenge response to verify (e.g., hashed PIN with challenge secret)
    """
    challengeResponse: String!
  ): VerifyWalletVerificationChallengeOutput
}

"""
Algorithm used for OTP verification
"""
enum OTPAlgorithm {
  SHA1
  SHA3_224
  SHA3_256
  SHA3_384
  SHA3_512
  SHA224
  SHA256
  SHA384
  SHA512
}

input OTPSettingsInput {
  """
  The algorithm for OTP verification
  """
  algorithm: OTPAlgorithm

  """
  The number of digits for OTP verification
  """
  digits: Int

  """
  The issuer for OTP verification
  """
  issuer: String

  """
  The name of the OTP verification
  """
  name: String!

  """
  The period (in seconds) for OTP verification
  """
  period: Int
}

type OnChainContractIdentity {
  """
  Returns the address of the contract associated with this identity.
  Must be implemented by inheriting contracts.
  The contract address.
  """
  getAssociatedContract: String

  """
  Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  getClaim(_claimId: String!): OnChainContractIdentityGetClaimOutput

  """
  Returns an array of claim IDs by topic.
  """
  getClaimIdsByTopic(
    _topic: String!
  ): OnChainContractIdentityGetClaimIdsByTopicOutput

  """
  Returns the full key data, if present in the identity.
  """
  getKey(_key: String!): OnChainContractIdentityGetKeyOutput

  """
  Returns the list of purposes associated with a key.
  """
  getKeyPurposes(_key: String!): OnChainContractIdentityGetKeyPurposesOutput

  """
  Returns an array of public key bytes32 held by this identity.
  """
  getKeysByPurpose(
    _purpose: String!
  ): OnChainContractIdentityGetKeysByPurposeOutput
  id: ID

  """
  Checks if a claim is revoked (always returns false for contract identities).
  Contract identities manage claims through existence, not revocation.      The parameter is unnamed as it is not used in this implementation.
  Always returns false as claims are not revoked, only removed.
  """
  isClaimRevoked(bytes0: String!): Boolean

  """
  Validates a CONTRACT scheme claim by checking its existence on the subject identity.
  For CONTRACT scheme claims, validation is done by existence rather than signature verification.
  True if the claim exists with matching parameters, false otherwise.
  """
  isClaimValid(
    bytes2: String!
    data: String!
    subject: String!
    topic: String!
  ): Boolean

  """
  Returns TRUE if a key is present and has the given purpose. If the key is not present it returns FALSE.
  """
  keyHasPurpose(
    _key: String!
    _purpose: String!
  ): OnChainContractIdentityKeyHasPurposeOutput

  """
  Revokes a claim (not implemented for contract identities).
  Contract identities manage claims through existence, not revocation lists.      The parameters are unnamed as they are not used in this implementation.
  Always returns false as revocation is not supported.
  """
  revokeClaim(address1: String!, bytes320: String!): Boolean
}

input OnChainContractIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input OnChainContractIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input OnChainContractIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input OnChainContractIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type OnChainContractIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type OnChainContractIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type OnChainContractIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type OnChainContractIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type OnChainContractIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

input OnChainContractIdentityIssueClaimToInput {
  """
  The claim data
  """
  data: String!

  """
  The identity contract to add the claim to
  """
  subject: String!

  """
  The claim topic
  """
  topic: String!

  """
  The claim URI (e.g., IPFS hash)
  """
  uri: String!
}

type OnChainContractIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input OnChainContractIdentityRemoveClaimInput {
  _claimId: String!
}

input OnChainContractIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

"""
Returns the transaction hash
"""
type OnChainContractIdentityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type OnChainContractIdentityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type OnChainIdentity {
  """
  Get a claim by its ID. Claim IDs are generated using `keccak256(abi.encode(address issuer_address, uint256 topic))`.
  """
  getClaim(_claimId: String!): OnChainIdentityGetClaimOutput

  """
  Returns an array of claim IDs by topic.
  """
  getClaimIdsByTopic(_topic: String!): OnChainIdentityGetClaimIdsByTopicOutput

  """
  Returns the full key data, if present in the identity.
  """
  getKey(_key: String!): OnChainIdentityGetKeyOutput

  """
  Returns the list of purposes associated with a key.
  """
  getKeyPurposes(_key: String!): OnChainIdentityGetKeyPurposesOutput

  """
  Returns an array of public key bytes32 held by this identity.
  """
  getKeysByPurpose(_purpose: String!): OnChainIdentityGetKeysByPurposeOutput

  """
  Recovers the address that signed the given data.
  returns the address that signed the given data.
  the address that signed dataHash and created the signature sig.
  """
  getRecoveredAddress(
    dataHash: String!
    sig: String!
  ): OnChainIdentityGetRecoveredAddressOutput
  id: ID

  """
  Validates a claim by verifying its signature.
  Checks if a claim is valid. Claims issued by the identity are self-attested claims. They do not have a built-in revocation mechanism and are considered valid as long as their signature is valid and they are still stored by the identity contract.
  true if the claim is valid, false otherwise.
  """
  isClaimValid(
    _identity: String!
    claimTopic: String!
    data: String!
    sig: String!
  ): OnChainIdentityIsClaimValidOutput

  """
  Checks if a key has a specific purpose.
  True if the key has the specified purpose.
  """
  keyHasPurpose(
    _key: String!
    _purpose: String!
  ): OnChainIdentityKeyHasPurposeOutput
}

input OnChainIdentityAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input OnChainIdentityAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input OnChainIdentityApproveInput {
  _approve: Boolean!
  _id: String!
}

input OnChainIdentityExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type OnChainIdentityGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type OnChainIdentityGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type OnChainIdentityGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type OnChainIdentityGetKeyPurposesOutput {
  _purposes: [String!]
}

type OnChainIdentityGetKeysByPurposeOutput {
  keys: [String!]
}

type OnChainIdentityGetRecoveredAddressOutput {
  addr: String
}

type OnChainIdentityIsClaimValidOutput {
  claimValid: Boolean
}

type OnChainIdentityKeyHasPurposeOutput {
  exists: Boolean
}

input OnChainIdentityRemoveClaimInput {
  _claimId: String!
}

input OnChainIdentityRemoveKeyInput {
  _key: String!
  _purpose: String!
}

"""
Returns the transaction hash
"""
type OnChainIdentityTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type OnChainIdentityTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type OnChainIdentityWithRevocation {
  """
  Retrieves a claim by its ID.
  The data of the claim, The address of the claim issuer, The signature scheme used, The signature of the claim, The topic of the claim, The URI of the claim.
  """
  getClaim(_claimId: String!): OnChainIdentityWithRevocationGetClaimOutput

  """
  Returns an array of claim IDs by topic.
  """
  getClaimIdsByTopic(
    _topic: String!
  ): OnChainIdentityWithRevocationGetClaimIdsByTopicOutput

  """
  Returns the full key data, if present in the identity.
  """
  getKey(_key: String!): OnChainIdentityWithRevocationGetKeyOutput

  """
  Returns the list of purposes associated with a key.
  """
  getKeyPurposes(
    _key: String!
  ): OnChainIdentityWithRevocationGetKeyPurposesOutput

  """
  Returns an array of public key bytes32 held by this identity.
  """
  getKeysByPurpose(
    _purpose: String!
  ): OnChainIdentityWithRevocationGetKeysByPurposeOutput

  """
  Recovers the address that signed the given data.
  returns the address that signed the given data.
  the address that signed dataHash and created the signature sig.
  """
  getRecoveredAddress(
    dataHash: String!
    sig: String!
  ): OnChainIdentityWithRevocationGetRecoveredAddressOutput
  id: ID

  """
  Checks if a claim is revoked.
  Checks if a claim is revoked.
  True if the claim is revoked, false otherwise.
  """
  isClaimRevoked(_sig: String!): Boolean

  """
  Validates a claim and checks if it has been revoked.
  Checks if a claim is valid by first checking the parent implementation and then verifying it's not revoked.
  true if the claim is valid and not revoked, false otherwise.
  """
  isClaimValid(
    _identity: String!
    claimTopic: String!
    data: String!
    sig: String!
  ): OnChainIdentityWithRevocationIsClaimValidOutput

  """
  Checks if a key has a specific purpose.
  True if the key has the specified purpose.
  """
  keyHasPurpose(
    _key: String!
    _purpose: String!
  ): OnChainIdentityWithRevocationKeyHasPurposeOutput

  """
  Mapping to track revoked claims by their signature hash.
  """
  revokedClaims(bytes320: String!): Boolean
}

input OnChainIdentityWithRevocationAddClaimInput {
  _data: String!
  _scheme: String!
  _signature: String!
  _topic: String!
  _uri: String!
  issuer: String!
}

input OnChainIdentityWithRevocationAddKeyInput {
  _key: String!
  _keyType: String!
  _purpose: String!
}

input OnChainIdentityWithRevocationApproveInput {
  _approve: Boolean!
  _id: String!
}

input OnChainIdentityWithRevocationExecuteInput {
  _data: String!
  _to: String!
  _value: String!
}

type OnChainIdentityWithRevocationGetClaimIdsByTopicOutput {
  claimIds: [String!]
}

type OnChainIdentityWithRevocationGetClaimOutput {
  data: String
  issuer: String
  scheme: String
  signature: String
  topic: String
  uri: String
}

type OnChainIdentityWithRevocationGetKeyOutput {
  key: String
  keyType: String
  purposes: [String!]
}

type OnChainIdentityWithRevocationGetKeyPurposesOutput {
  _purposes: [String!]
}

type OnChainIdentityWithRevocationGetKeysByPurposeOutput {
  keys: [String!]
}

type OnChainIdentityWithRevocationGetRecoveredAddressOutput {
  addr: String
}

type OnChainIdentityWithRevocationIsClaimValidOutput {
  claimValid: Boolean
}

type OnChainIdentityWithRevocationKeyHasPurposeOutput {
  exists: Boolean
}

input OnChainIdentityWithRevocationRemoveClaimInput {
  _claimId: String!
}

input OnChainIdentityWithRevocationRemoveKeyInput {
  _key: String!
  _purpose: String!
}

input OnChainIdentityWithRevocationRevokeClaimBySignatureInput {
  """
  the signature of the claim
  """
  signature: String!
}

input OnChainIdentityWithRevocationRevokeClaimInput {
  """
  the id of the claim
  """
  _claimId: String!

  """
  the address of the identity contract
  """
  _identity: String!
}

"""
Returns the transaction hash
"""
type OnChainIdentityWithRevocationTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type OnChainIdentityWithRevocationTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input PincodeSettingsInput {
  """
  The name of the PINCODE verification
  """
  name: String!

  """
  The pincode for PINCODE verification
  """
  pincode: String!
}

type Query {
  ATKAirdrop(
    """
    The address of the contract
    """
    address: String!
  ): ATKAirdrop

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAirdropBatchClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAirdropClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAirdropRenounceOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAirdropTransferOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAirdropWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAirdropTransactionReceiptOutput
  ATKAmountClaimTracker(
    """
    The address of the contract
    """
    address: String!
  ): ATKAmountClaimTracker

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAmountClaimTrackerRecordClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAmountClaimTrackerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAmountClaimTrackerRenounceOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAmountClaimTrackerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKAmountClaimTrackerTransferOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKAmountClaimTrackerTransactionReceiptOutput
  ATKAssetProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKAssetProxy
  ATKAssetRoles(
    """
    The address of the contract
    """
    address: String!
  ): ATKAssetRoles
  ATKBitmapClaimTracker(
    """
    The address of the contract
    """
    address: String!
  ): ATKBitmapClaimTracker

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBitmapClaimTrackerRecordClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBitmapClaimTrackerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBitmapClaimTrackerRenounceOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBitmapClaimTrackerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBitmapClaimTrackerTransferOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBitmapClaimTrackerTransactionReceiptOutput
  ATKBondFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKBondFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondFactoryImplementationCreateBondReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondFactoryImplementationUpdateTokenImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondFactoryImplementationTransactionReceiptOutput
  ATKBondImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKBondImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationMatureReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationSetCapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationSetYieldScheduleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKBondImplementationUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKBondImplementationTransactionReceiptOutput
  ATKBondProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKBondProxy
  ATKComplianceImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKComplianceImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationAddGlobalComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationAddMultipleToBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationAddToBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationRemoveFromBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationRemoveGlobalComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationRemoveMultipleFromBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationSetParametersForGlobalComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceImplementationTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceImplementationTransactionReceiptOutput
  ATKComplianceModuleRegistryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKComplianceModuleRegistryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceModuleRegistryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceModuleRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKComplianceModuleRegistryImplementationRegisterComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKComplianceModuleRegistryImplementationTransactionReceiptOutput
  ATKContractIdentityImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKContractIdentityImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationIssueClaimToReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationRegisterClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationRemoveClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKContractIdentityImplementationRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKContractIdentityImplementationTransactionReceiptOutput
  ATKContractIdentityProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKContractIdentityProxy
  ATKDepositFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKDepositFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositFactoryImplementationCreateDepositReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositFactoryImplementationUpdateTokenImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositFactoryImplementationTransactionReceiptOutput
  ATKDepositImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKDepositImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKDepositImplementationUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKDepositImplementationTransactionReceiptOutput
  ATKDepositProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKDepositProxy
  ATKEquityFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKEquityFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityFactoryImplementationCreateEquityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityFactoryImplementationUpdateTokenImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityFactoryImplementationTransactionReceiptOutput
  ATKEquityImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKEquityImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationDelegateBySigReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationDelegateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKEquityImplementationUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKEquityImplementationTransactionReceiptOutput
  ATKEquityProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKEquityProxy
  ATKFixedYieldProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKFixedYieldProxy
  ATKFixedYieldScheduleFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKFixedYieldScheduleFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleFactoryImplementationCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleFactoryImplementationUpdateImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleFactoryImplementationTransactionReceiptOutput
  ATKFixedYieldScheduleUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): ATKFixedYieldScheduleUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableClaimYieldReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeablePauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableSetOnchainIdReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableTopUpDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableWithdrawAllDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFixedYieldScheduleUpgradeableWithdrawDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFixedYieldScheduleUpgradeableTransactionReceiptOutput
  ATKForwarder(
    """
    The address of the contract
    """
    address: String!
  ): ATKForwarder

  """
  Fetches the receipt for the given transaction hash
  """
  ATKForwarderExecuteBatchReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKForwarderTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKForwarderExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKForwarderTransactionReceiptOutput
  ATKFundFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKFundFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundFactoryImplementationCreateFundReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundFactoryImplementationUpdateTokenImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundFactoryImplementationTransactionReceiptOutput
  ATKFundImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKFundImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationCollectManagementFeeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationDelegateBySigReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationDelegateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKFundImplementationUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKFundImplementationTransactionReceiptOutput
  ATKFundProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKFundProxy
  ATKIdentityFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKIdentityFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityFactoryImplementationCreateContractIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityFactoryImplementationCreateIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityFactoryImplementationSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityFactoryImplementationTransactionReceiptOutput
  ATKIdentityImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKIdentityImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationRegisterClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationRemoveClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationRevokeClaimBySignatureReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityImplementationRevokeClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityImplementationTransactionReceiptOutput
  ATKIdentityProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKIdentityProxy
  ATKIdentityRegistryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKIdentityRegistryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationBatchRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationDeleteIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationRecoverIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationSetIdentityRegistryStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationSetTopicSchemeRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationSetTrustedIssuersRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationUpdateCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryImplementationUpdateIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryImplementationTransactionReceiptOutput
  ATKIdentityRegistryStorageImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKIdentityRegistryStorageImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationAddIdentityToStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationBindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationLinkWalletRecoveryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationMarkWalletAsLostReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationModifyStoredIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationModifyStoredInvestorCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationRemoveIdentityFromStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKIdentityRegistryStorageImplementationUnbindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKIdentityRegistryStorageImplementationTransactionReceiptOutput
  ATKLinearVestingStrategy(
    """
    The address of the contract
    """
    address: String!
  ): ATKLinearVestingStrategy
  ATKPeopleRoles(
    """
    The address of the contract
    """
    address: String!
  ): ATKPeopleRoles
  ATKPushAirdropFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKPushAirdropFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropFactoryImplementationCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropFactoryImplementationUpdateImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropFactoryImplementationTransactionReceiptOutput
  ATKPushAirdropImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKPushAirdropImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropImplementationBatchDistributeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropImplementationDistributeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropImplementationRenounceOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropImplementationSetDistributionCapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropImplementationTransferOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKPushAirdropImplementationWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKPushAirdropImplementationTransactionReceiptOutput
  ATKPushAirdropProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKPushAirdropProxy
  ATKRoles(
    """
    The address of the contract
    """
    address: String!
  ): ATKRoles
  ATKStableCoinFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKStableCoinFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinFactoryImplementationCreateStableCoinReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinFactoryImplementationUpdateTokenImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinFactoryImplementationTransactionReceiptOutput
  ATKStableCoinImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKStableCoinImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKStableCoinImplementationUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKStableCoinImplementationTransactionReceiptOutput
  ATKStableCoinProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKStableCoinProxy
  ATKSystemAccessManaged(
    """
    The address of the contract
    """
    address: String!
  ): ATKSystemAccessManaged
  ATKSystemAccessManagerImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKSystemAccessManagerImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationBatchGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationBatchRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationGrantMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationRenounceMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationRevokeMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationSetRoleAdminReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAccessManagerImplementationUpgradeToAndCallReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAccessManagerImplementationTransactionReceiptOutput
  ATKSystemAddonRegistryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKSystemAddonRegistryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAddonRegistryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAddonRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAddonRegistryImplementationRegisterSystemAddonReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAddonRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemAddonRegistryImplementationSetAddonImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemAddonRegistryImplementationTransactionReceiptOutput
  ATKSystemFactory(
    """
    The address of the contract
    """
    address: String!
  ): ATKSystemFactory

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemFactoryCreateSystemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemFactoryTransactionReceiptOutput
  ATKSystemImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKSystemImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationBootstrapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationIssueClaimByOrganisationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetAddonRegistryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetComplianceImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetComplianceModuleRegistryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetContractIdentityImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetIdentityFactoryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetIdentityImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetIdentityRegistryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetIdentityRegistryStorageImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetTokenAccessManagerImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetTokenFactoryRegistryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetTopicSchemeRegistryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationSetTrustedIssuersRegistryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKSystemImplementationUpgradeToAndCallReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKSystemImplementationTransactionReceiptOutput
  ATKSystemRoles(
    """
    The address of the contract
    """
    address: String!
  ): ATKSystemRoles
  ATKTimeBoundAirdropFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKTimeBoundAirdropFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropFactoryImplementationCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropFactoryImplementationUpdateImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropFactoryImplementationTransactionReceiptOutput
  ATKTimeBoundAirdropImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKTimeBoundAirdropImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropImplementationBatchClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropImplementationClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropImplementationRenounceOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropImplementationTransferOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTimeBoundAirdropImplementationWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTimeBoundAirdropImplementationTransactionReceiptOutput
  ATKTimeBoundAirdropProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKTimeBoundAirdropProxy
  ATKTokenAccessManagerImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKTokenAccessManagerImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationBatchGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationBatchRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationGrantMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationRenounceMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationRevokeMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenAccessManagerImplementationRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenAccessManagerImplementationTransactionReceiptOutput
  ATKTokenAccessManagerProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKTokenAccessManagerProxy
  ATKTokenFactoryRegistryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKTokenFactoryRegistryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenFactoryRegistryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenFactoryRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenFactoryRegistryImplementationRegisterTokenFactoryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenFactoryRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenFactoryRegistryImplementationSetTokenFactoryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenFactoryRegistryImplementationTransactionReceiptOutput
  ATKTokenSale(
    """
    The address of the contract
    """
    address: String!
  ): ATKTokenSale

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleActivateSaleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleAddPaymentCurrencyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleBuyTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleBuyTokensWithERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleConfigureVestingReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleEndSaleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput
  ATKTokenSaleFactory(
    """
    The address of the contract
    """
    address: String!
  ): ATKTokenSaleFactory

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleFactoryDeployTokenSaleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleFactoryGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleFactoryRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleFactoryRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleFactoryUpdateImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSalePauseSaleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput
  ATKTokenSaleProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKTokenSaleProxy

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleRemovePaymentCurrencyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleSetPurchaseLimitsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleWithdrawFundsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTokenSaleWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTokenSaleTransactionReceiptOutput
  ATKTopicSchemeRegistryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKTopicSchemeRegistryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTopicSchemeRegistryImplementationBatchRegisterTopicSchemesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTopicSchemeRegistryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTopicSchemeRegistryImplementationRegisterTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTopicSchemeRegistryImplementationRemoveTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTopicSchemeRegistryImplementationUpdateTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTopicSchemeRegistryImplementationTransactionReceiptOutput
  ATKTopics(
    """
    The address of the contract
    """
    address: String!
  ): ATKTopics
  ATKTrustedIssuersRegistryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKTrustedIssuersRegistryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTrustedIssuersRegistryImplementationAddTrustedIssuerReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTrustedIssuersRegistryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTrustedIssuersRegistryImplementationRemoveTrustedIssuerReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKTrustedIssuersRegistryImplementationUpdateIssuerClaimTopicsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKTrustedIssuersRegistryImplementationTransactionReceiptOutput
  ATKTypedImplementationProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKTypedImplementationProxy
  ATKVault(
    """
    The address of the contract
    """
    address: String!
  ): ATKVault

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultAddSignaturesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput
  ATKVaultFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKVaultFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultFactoryImplementationCreateVaultReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultSetOnchainIdReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultSetRequirementReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultSetSignerWeightReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultSetTotalWeightRequiredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultSetWeightedSignaturesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultSubmitTransactionWithSignaturesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVaultUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVaultTransactionReceiptOutput
  ATKVestingAirdropFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKVestingAirdropFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropFactoryImplementationCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropFactoryImplementationUpdateImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropFactoryImplementationTransactionReceiptOutput
  ATKVestingAirdropImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKVestingAirdropImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationBatchClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationBatchInitializeVestingReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationInitializeVestingReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationRenounceOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationSetVestingStrategyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationTransferOwnershipReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKVestingAirdropImplementationWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKVestingAirdropImplementationTransactionReceiptOutput
  ATKVestingAirdropProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKVestingAirdropProxy
  ATKXvPSettlementFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKXvPSettlementFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementFactoryImplementationCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementFactoryImplementationUpdateImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementFactoryImplementationTransactionReceiptOutput
  ATKXvPSettlementImplementation(
    """
    The address of the contract
    """
    address: String!
  ): ATKXvPSettlementImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementImplementationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementImplementationCancelReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementImplementationExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ATKXvPSettlementImplementationRevokeApprovalReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ATKXvPSettlementImplementationTransactionReceiptOutput
  ATKXvPSettlementProxy(
    """
    The address of the contract
    """
    address: String!
  ): ATKXvPSettlementProxy
  AbstractATKSystemAddonFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): AbstractATKSystemAddonFactoryImplementation
  AbstractATKSystemProxy(
    """
    The address of the contract
    """
    address: String!
  ): AbstractATKSystemProxy
  AbstractATKTokenFactoryImplementation(
    """
    The address of the contract
    """
    address: String!
  ): AbstractATKTokenFactoryImplementation

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractATKTokenFactoryImplementationInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractATKTokenFactoryImplementationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractATKTokenFactoryImplementationUpdateTokenImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractATKTokenFactoryImplementationTransactionReceiptOutput
  AbstractAddressListComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): AbstractAddressListComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractAddressListComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractAddressListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractAddressListComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractAddressListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractAddressListComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractAddressListComplianceModuleTransactionReceiptOutput
  AbstractComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): AbstractComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractComplianceModuleTransactionReceiptOutput
  AbstractCountryComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): AbstractCountryComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractCountryComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractCountryComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractCountryComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractCountryComplianceModuleTransactionReceiptOutput
  AbstractIdentityComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): AbstractIdentityComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractIdentityComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractIdentityComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractIdentityComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractIdentityComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AbstractIdentityComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AbstractIdentityComplianceModuleTransactionReceiptOutput
  AddressBlockListComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): AddressBlockListComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  AddressBlockListComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AddressBlockListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AddressBlockListComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AddressBlockListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  AddressBlockListComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): AddressBlockListComplianceModuleTransactionReceiptOutput
  ClaimAuthorizationExtension(
    """
    The address of the contract
    """
    address: String!
  ): ClaimAuthorizationExtension
  CountryAllowListComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): CountryAllowListComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  CountryAllowListComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CountryAllowListComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CountryAllowListComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CountryAllowListComplianceModuleTransactionReceiptOutput
  CountryBlockListComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): CountryBlockListComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  CountryBlockListComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CountryBlockListComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  CountryBlockListComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): CountryBlockListComplianceModuleTransactionReceiptOutput
  ERC734(
    """
    The address of the contract
    """
    address: String!
  ): ERC734

  """
  Fetches the receipt for the given transaction hash
  """
  ERC734AddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ERC734TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ERC734ApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ERC734TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ERC734ExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ERC734TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ERC734InitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ERC734TransactionReceiptOutput
  ERC734KeyPurposes(
    """
    The address of the contract
    """
    address: String!
  ): ERC734KeyPurposes
  ERC734KeyTypes(
    """
    The address of the contract
    """
    address: String!
  ): ERC734KeyTypes

  """
  Fetches the receipt for the given transaction hash
  """
  ERC734RemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ERC734TransactionReceiptOutput
  ERC735(
    """
    The address of the contract
    """
    address: String!
  ): ERC735

  """
  Fetches the receipt for the given transaction hash
  """
  ERC735AddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ERC735TransactionReceiptOutput
  ERC735ClaimSchemes(
    """
    The address of the contract
    """
    address: String!
  ): ERC735ClaimSchemes

  """
  Fetches the receipt for the given transaction hash
  """
  ERC735RemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ERC735TransactionReceiptOutput
  IATKAirdrop(
    """
    The address of the contract
    """
    address: String!
  ): IATKAirdrop

  """
  Fetches the receipt for the given transaction hash
  """
  IATKAirdropBatchClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKAirdropClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKAirdropWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKAirdropTransactionReceiptOutput
  IATKBond(
    """
    The address of the contract
    """
    address: String!
  ): IATKBond

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput
  IATKBondFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKBondFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondFactoryCreateBondReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondMatureReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondSetCapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondSetYieldScheduleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKBondUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKBondTransactionReceiptOutput
  IATKClaimTracker(
    """
    The address of the contract
    """
    address: String!
  ): IATKClaimTracker

  """
  Fetches the receipt for the given transaction hash
  """
  IATKClaimTrackerRecordClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKClaimTrackerTransactionReceiptOutput
  IATKCompliance(
    """
    The address of the contract
    """
    address: String!
  ): IATKCompliance

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceAddGlobalComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceAddMultipleToBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceAddToBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput
  IATKComplianceModuleRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IATKComplianceModuleRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceModuleRegistryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceModuleRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceModuleRegistryRegisterComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceModuleRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceRemoveFromBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceRemoveGlobalComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceRemoveMultipleFromBypassListReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceSetParametersForGlobalComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKComplianceTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKComplianceTransactionReceiptOutput
  IATKContractIdentity(
    """
    The address of the contract
    """
    address: String!
  ): IATKContractIdentity

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityIssueClaimToReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityRegisterClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityRemoveClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityRevokeClaimBySignatureReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKContractIdentityRevokeClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKContractIdentityTransactionReceiptOutput
  IATKDeposit(
    """
    The address of the contract
    """
    address: String!
  ): IATKDeposit

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput
  IATKDepositFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKDepositFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositFactoryCreateDepositReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKDepositUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKDepositTransactionReceiptOutput
  IATKEquity(
    """
    The address of the contract
    """
    address: String!
  ): IATKEquity

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityDelegateBySigReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityDelegateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput
  IATKEquityFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKEquityFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityFactoryCreateEquityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquitySetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquitySetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquitySetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquitySetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquitySetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKEquityUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKEquityTransactionReceiptOutput
  IATKFixedYieldScheduleFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKFixedYieldScheduleFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFixedYieldScheduleFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFixedYieldScheduleFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFixedYieldScheduleFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFixedYieldScheduleFactoryTransactionReceiptOutput
  IATKFund(
    """
    The address of the contract
    """
    address: String!
  ): IATKFund

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundCollectManagementFeeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundDelegateBySigReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundDelegateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput
  IATKFundFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKFundFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundFactoryCreateFundReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKFundUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKFundTransactionReceiptOutput
  IATKIdentity(
    """
    The address of the contract
    """
    address: String!
  ): IATKIdentity

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput
  IATKIdentityFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKIdentityFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityFactoryCreateContractIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityFactoryCreateIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityFactorySetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegisterClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput
  IATKIdentityRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IATKIdentityRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryBatchRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryDeleteIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryRecoverIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistrySetIdentityRegistryStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistrySetTopicSchemeRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistrySetTrustedIssuersRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput
  IATKIdentityRegistryStorage(
    """
    The address of the contract
    """
    address: String!
  ): IATKIdentityRegistryStorage

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageAddIdentityToStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageBindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageLinkWalletRecoveryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageMarkWalletAsLostReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageModifyStoredIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageModifyStoredInvestorCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageRemoveIdentityFromStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryStorageUnbindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryUpdateCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRegistryUpdateIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRemoveClaimAuthorizationContractReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKIdentityRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKIdentityTransactionReceiptOutput
  IATKLinearVestingStrategy(
    """
    The address of the contract
    """
    address: String!
  ): IATKLinearVestingStrategy
  IATKPushAirdrop(
    """
    The address of the contract
    """
    address: String!
  ): IATKPushAirdrop

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropBatchClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropBatchDistributeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropDistributeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropTransactionReceiptOutput
  IATKPushAirdropFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKPushAirdropFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropSetDistributionCapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKPushAirdropWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKPushAirdropTransactionReceiptOutput
  IATKStableCoin(
    """
    The address of the contract
    """
    address: String!
  ): IATKStableCoin

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput
  IATKStableCoinFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKStableCoinFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinFactoryCreateStableCoinReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinPauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKStableCoinUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKStableCoinTransactionReceiptOutput
  IATKSystem(
    """
    The address of the contract
    """
    address: String!
  ): IATKSystem
  IATKSystemAccessManaged(
    """
    The address of the contract
    """
    address: String!
  ): IATKSystemAccessManaged
  IATKSystemAccessManager(
    """
    The address of the contract
    """
    address: String!
  ): IATKSystemAccessManager

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerBatchGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerBatchRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerGrantMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerRenounceMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerRevokeMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAccessManagerSetRoleAdminReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAccessManagerTransactionReceiptOutput
  IATKSystemAddonRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IATKSystemAddonRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAddonRegistryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAddonRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAddonRegistryRegisterSystemAddonReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAddonRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemAddonRegistrySetAddonImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemAddonRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemBootstrapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemTransactionReceiptOutput
  IATKSystemFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKSystemFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemFactoryCreateSystemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKSystemIssueClaimByOrganisationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKSystemTransactionReceiptOutput
  IATKTimeBoundAirdrop(
    """
    The address of the contract
    """
    address: String!
  ): IATKTimeBoundAirdrop

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTimeBoundAirdropBatchClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTimeBoundAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTimeBoundAirdropClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTimeBoundAirdropTransactionReceiptOutput
  IATKTimeBoundAirdropFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKTimeBoundAirdropFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTimeBoundAirdropFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTimeBoundAirdropFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTimeBoundAirdropFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTimeBoundAirdropFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTimeBoundAirdropWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTimeBoundAirdropTransactionReceiptOutput
  IATKTokenFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKTokenFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenFactoryTransactionReceiptOutput
  IATKTokenFactoryRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IATKTokenFactoryRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenFactoryRegistryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenFactoryRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenFactoryRegistryRegisterTokenFactoryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenFactoryRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenFactoryRegistrySetTokenFactoryImplementationReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenFactoryRegistryTransactionReceiptOutput
  IATKTokenSale(
    """
    The address of the contract
    """
    address: String!
  ): IATKTokenSale

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleActivateSaleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleAddPaymentCurrencyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleBuyTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleBuyTokensWithERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleConfigureVestingReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleEndSaleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSalePauseSaleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleRemovePaymentCurrencyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleSetPurchaseLimitsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleWithdrawFundsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTokenSaleWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTokenSaleTransactionReceiptOutput
  IATKTopicSchemeRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IATKTopicSchemeRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTopicSchemeRegistryBatchRegisterTopicSchemesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTopicSchemeRegistryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTopicSchemeRegistryRegisterTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTopicSchemeRegistryRemoveTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTopicSchemeRegistryUpdateTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTopicSchemeRegistryTransactionReceiptOutput
  IATKTrustedIssuersRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IATKTrustedIssuersRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTrustedIssuersRegistryAddTrustedIssuerReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTrustedIssuersRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTrustedIssuersRegistryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTrustedIssuersRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTrustedIssuersRegistryRemoveTrustedIssuerReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTrustedIssuersRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKTrustedIssuersRegistryUpdateIssuerClaimTopicsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKTrustedIssuersRegistryTransactionReceiptOutput
  IATKTypedImplementationRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IATKTypedImplementationRegistry
  IATKVaultFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKVaultFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVaultFactoryCreateVaultReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVaultFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVaultFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVaultFactoryTransactionReceiptOutput
  IATKVestingAirdrop(
    """
    The address of the contract
    """
    address: String!
  ): IATKVestingAirdrop

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropBatchClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropBatchInitializeVestingReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropTransactionReceiptOutput
  IATKVestingAirdropFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKVestingAirdropFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropInitializeVestingReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropSetVestingStrategyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKVestingAirdropWithdrawTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKVestingAirdropTransactionReceiptOutput
  IATKVestingStrategy(
    """
    The address of the contract
    """
    address: String!
  ): IATKVestingStrategy
  IATKXvPSettlement(
    """
    The address of the contract
    """
    address: String!
  ): IATKXvPSettlement

  """
  Fetches the receipt for the given transaction hash
  """
  IATKXvPSettlementApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKXvPSettlementTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKXvPSettlementCancelReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKXvPSettlementTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKXvPSettlementExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKXvPSettlementTransactionReceiptOutput
  IATKXvPSettlementFactory(
    """
    The address of the contract
    """
    address: String!
  ): IATKXvPSettlementFactory

  """
  Fetches the receipt for the given transaction hash
  """
  IATKXvPSettlementFactoryCreateReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKXvPSettlementFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKXvPSettlementFactoryInitializeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKXvPSettlementFactoryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IATKXvPSettlementRevokeApprovalReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IATKXvPSettlementTransactionReceiptOutput
  IClaimAuthorizer(
    """
    The address of the contract
    """
    address: String!
  ): IClaimAuthorizer
  IContractIdentity(
    """
    The address of the contract
    """
    address: String!
  ): IContractIdentity

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityIssueClaimToReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityRevokeClaimBySignatureReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IContractIdentityRevokeClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IContractIdentityTransactionReceiptOutput
  IContractWithIdentity(
    """
    The address of the contract
    """
    address: String!
  ): IContractWithIdentity
  IERC3643(
    """
    The address of the contract
    """
    address: String!
  ): IERC3643

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643BurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  IERC3643ClaimTopicsRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IERC3643ClaimTopicsRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ClaimTopicsRegistryAddClaimTopicReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643ClaimTopicsRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ClaimTopicsRegistryRemoveClaimTopicReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643ClaimTopicsRegistryTransactionReceiptOutput
  IERC3643Compliance(
    """
    The address of the contract
    """
    address: String!
  ): IERC3643Compliance

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ComplianceBindTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ComplianceCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ComplianceDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ComplianceTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ComplianceUnbindTokenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643ComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643ForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643FreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  IERC3643IdentityRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IERC3643IdentityRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryBatchRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryDeleteIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistrySetClaimTopicsRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistrySetIdentityRegistryStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistrySetTrustedIssuersRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput
  IERC3643IdentityRegistryStorage(
    """
    The address of the contract
    """
    address: String!
  ): IERC3643IdentityRegistryStorage

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryStorageAddIdentityToStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryStorageBindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryStorageModifyStoredIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryStorageModifyStoredInvestorCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryStorageRemoveIdentityFromStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryStorageUnbindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryUpdateCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643IdentityRegistryUpdateIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643IdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643MintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643PauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643RecoveryAddressReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643SetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643SetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643SetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643SetNameReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643SetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643SetSymbolReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643TransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643TransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  IERC3643TrustedIssuersRegistry(
    """
    The address of the contract
    """
    address: String!
  ): IERC3643TrustedIssuersRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643TrustedIssuersRegistryAddTrustedIssuerReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TrustedIssuersRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643TrustedIssuersRegistryRemoveTrustedIssuerReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TrustedIssuersRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643TrustedIssuersRegistryUpdateIssuerClaimTopicsReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TrustedIssuersRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643UnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IERC3643UnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IERC3643TransactionReceiptOutput
  ISMART(
    """
    The address of the contract
    """
    address: String!
  ): ISMART

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTBurnable(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTBurnable

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTBurnableBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTBurnableBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTBurnableTransactionReceiptOutput
  ISMARTCapped(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTCapped

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCappedSetCapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCappedTransactionReceiptOutput
  ISMARTCollateral(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTCollateral
  ISMARTCompliance(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTCompliance

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTComplianceCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTComplianceTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTComplianceDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTComplianceTransactionReceiptOutput
  ISMARTComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTComplianceTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTComplianceTransactionReceiptOutput
  ISMARTCustodian(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTCustodian

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTCustodianUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTCustodianTransactionReceiptOutput
  ISMARTFixedYieldSchedule(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTFixedYieldSchedule

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTFixedYieldScheduleClaimYieldReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTFixedYieldScheduleTopUpDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTFixedYieldScheduleWithdrawAllDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTFixedYieldScheduleWithdrawDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTFixedYieldScheduleTransactionReceiptOutput
  ISMARTHistoricalBalances(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTHistoricalBalances
  ISMARTIdentityRegistry(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTIdentityRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryBatchRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryDeleteIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryRecoverIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryRegisterIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistrySetIdentityRegistryStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistrySetTopicSchemeRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistrySetTrustedIssuersRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput
  ISMARTIdentityRegistryStorage(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTIdentityRegistryStorage

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageAddIdentityToStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageBindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageLinkWalletRecoveryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageMarkWalletAsLostReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageModifyStoredIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageModifyStoredInvestorCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageRemoveIdentityFromStorageReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryStorageUnbindIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryStorageTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryUpdateCountryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTIdentityRegistryUpdateIdentityReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTIdentityRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTPausable(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTPausable

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTPausablePauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTPausableUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTRedeemable(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTRedeemable

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTRedeemableRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTRedeemableRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTTokenAccessManaged(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTTokenAccessManaged
  ISMARTTokenAccessManager(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTTokenAccessManager

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerBatchGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerBatchRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerGrantMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerGrantRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerRenounceMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerRenounceRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerRevokeMultipleRolesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTokenAccessManagerRevokeRoleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTokenAccessManagerTransactionReceiptOutput
  ISMARTTopicSchemeRegistry(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTTopicSchemeRegistry

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTopicSchemeRegistryBatchRegisterTopicSchemesReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTopicSchemeRegistryRegisterTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTopicSchemeRegistryRemoveTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTopicSchemeRegistryUpdateTopicSchemeReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTopicSchemeRegistryTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTTransactionReceiptOutput
  ISMARTYield(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTYield
  ISMARTYieldSchedule(
    """
    The address of the contract
    """
    address: String!
  ): ISMARTYieldSchedule

  """
  Fetches the receipt for the given transaction hash
  """
  ISMARTYieldSetYieldScheduleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): ISMARTYieldTransactionReceiptOutput
  IWithTypeIdentifier(
    """
    The address of the contract
    """
    address: String!
  ): IWithTypeIdentifier
  IdentityAllowListComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): IdentityAllowListComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  IdentityAllowListComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IdentityAllowListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IdentityAllowListComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IdentityAllowListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IdentityAllowListComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IdentityAllowListComplianceModuleTransactionReceiptOutput
  IdentityBlockListComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): IdentityBlockListComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  IdentityBlockListComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IdentityBlockListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IdentityBlockListComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IdentityBlockListComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  IdentityBlockListComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): IdentityBlockListComplianceModuleTransactionReceiptOutput
  OnChainContractIdentity(
    """
    The address of the contract
    """
    address: String!
  ): OnChainContractIdentity

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainContractIdentityAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainContractIdentityAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainContractIdentityApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainContractIdentityExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainContractIdentityIssueClaimToReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainContractIdentityRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainContractIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainContractIdentityRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainContractIdentityTransactionReceiptOutput
  OnChainIdentity(
    """
    The address of the contract
    """
    address: String!
  ): OnChainIdentity

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityTransactionReceiptOutput
  OnChainIdentityWithRevocation(
    """
    The address of the contract
    """
    address: String!
  ): OnChainIdentityWithRevocation

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationAddClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationAddKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationExecuteReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationRemoveClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationRemoveKeyReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationRevokeClaimBySignatureReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  OnChainIdentityWithRevocationRevokeClaimReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): OnChainIdentityWithRevocationTransactionReceiptOutput
  SMART(
    """
    The address of the contract
    """
    address: String!
  ): SMART

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTBurnable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTBurnable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableTransactionReceiptOutput
  SMARTBurnableUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTBurnableUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableBatchBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableBurnReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTBurnableUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTBurnableUpgradeableTransactionReceiptOutput
  SMARTCapped(
    """
    The address of the contract
    """
    address: String!
  ): SMARTCapped

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedSetCapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedTransactionReceiptOutput
  SMARTCappedUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTCappedUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableSetCapReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCappedUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCappedUpgradeableTransactionReceiptOutput
  SMARTCollateral(
    """
    The address of the contract
    """
    address: String!
  ): SMARTCollateral

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralTransactionReceiptOutput
  SMARTCollateralUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTCollateralUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCollateralUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCollateralUpgradeableTransactionReceiptOutput
  SMARTContext(
    """
    The address of the contract
    """
    address: String!
  ): SMARTContext
  SMARTCustodian(
    """
    The address of the contract
    """
    address: String!
  ): SMARTCustodian

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianTransactionReceiptOutput
  SMARTCustodianUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTCustodianUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableBatchForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableBatchFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableBatchSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableBatchUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableForcedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableForcedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableFreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableSetAddressFrozenReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTCustodianUpgradeableUnfreezePartialTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTCustodianUpgradeableTransactionReceiptOutput
  SMARTExtension(
    """
    The address of the contract
    """
    address: String!
  ): SMARTExtension

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionTransactionReceiptOutput
  SMARTExtensionUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTExtensionUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTExtensionUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTExtensionUpgradeableTransactionReceiptOutput
  SMARTFixedYieldSchedule(
    """
    The address of the contract
    """
    address: String!
  ): SMARTFixedYieldSchedule

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleClaimYieldReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput
  SMARTFixedYieldScheduleLogic(
    """
    The address of the contract
    """
    address: String!
  ): SMARTFixedYieldScheduleLogic

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleLogicClaimYieldReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleLogicTopUpDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleLogicWithdrawAllDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleLogicWithdrawDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleLogicTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleTopUpDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput
  SMARTFixedYieldScheduleUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTFixedYieldScheduleUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleUpgradeableClaimYieldReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleUpgradeableTopUpDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleUpgradeableWithdrawAllDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleUpgradeableWithdrawDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleWithdrawAllDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTFixedYieldScheduleWithdrawDenominationAssetReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTFixedYieldScheduleTransactionReceiptOutput
  SMARTHistoricalBalances(
    """
    The address of the contract
    """
    address: String!
  ): SMARTHistoricalBalances

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesTransactionReceiptOutput
  SMARTHistoricalBalancesUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTHistoricalBalancesUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTHistoricalBalancesUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput
  SMARTHooks(
    """
    The address of the contract
    """
    address: String!
  ): SMARTHooks
  SMARTIdentityVerificationComplianceModule(
    """
    The address of the contract
    """
    address: String!
  ): SMARTIdentityVerificationComplianceModule

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTIdentityVerificationComplianceModuleCreatedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTIdentityVerificationComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTIdentityVerificationComplianceModuleDestroyedReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTIdentityVerificationComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTIdentityVerificationComplianceModuleTransferredReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTIdentityVerificationComplianceModuleTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTPausable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTPausable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausablePauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableTransactionReceiptOutput
  SMARTPausableUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTPausableUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeablePauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTPausableUpgradeableUnpauseReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTPausableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTRedeemable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTRedeemable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableTransactionReceiptOutput
  SMARTRedeemableUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTRedeemableUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableRedeemAllReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableRedeemReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRedeemableUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTRedeemableUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTTokenAccessManaged(
    """
    The address of the contract
    """
    address: String!
  ): SMARTTokenAccessManaged

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedTransactionReceiptOutput
  SMARTTokenAccessManagedUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTTokenAccessManagedUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTokenAccessManagedUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTTransactionReceiptOutput
  SMARTUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTUpgradeableTransactionReceiptOutput
  SMARTYield(
    """
    The address of the contract
    """
    address: String!
  ): SMARTYield

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldSetYieldScheduleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldTransactionReceiptOutput
  SMARTYieldUpgradeable(
    """
    The address of the contract
    """
    address: String!
  ): SMARTYieldUpgradeable

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableAddComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableApproveReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableBatchMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableBatchTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableMintReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableRecoverERC20Receipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableRecoverTokensReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableRemoveComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableSetComplianceReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableSetIdentityRegistryReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableSetOnchainIDReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableSetParametersForComplianceModuleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableSetYieldScheduleReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableTransferFromReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Fetches the receipt for the given transaction hash
  """
  SMARTYieldUpgradeableTransferReceipt(
    """
    The transaction hash
    """
    transactionHash: String!
  ): SMARTYieldUpgradeableTransactionReceiptOutput

  """
  Get all contracts
  """
  getContracts(
    """
    The name of the ABIs to filter by
    """
    abiNames: [String!]

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AbstractAddressListComplianceModule ABI
  """
  getContractsAbstractAddressListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AbstractATKSystemAddonFactoryImplementation ABI
  """
  getContractsAbstractAtkSystemAddonFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AbstractATKSystemProxy ABI
  """
  getContractsAbstractAtkSystemProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AbstractATKTokenFactoryImplementation ABI
  """
  getContractsAbstractAtkTokenFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AbstractComplianceModule ABI
  """
  getContractsAbstractComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AbstractCountryComplianceModule ABI
  """
  getContractsAbstractCountryComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AbstractIdentityComplianceModule ABI
  """
  getContractsAbstractIdentityComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the AddressBlockListComplianceModule ABI
  """
  getContractsAddressBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKAirdrop ABI
  """
  getContractsAtkAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKAmountClaimTracker ABI
  """
  getContractsAtkAmountClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKAssetProxy ABI
  """
  getContractsAtkAssetProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKAssetRoles ABI
  """
  getContractsAtkAssetRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKBitmapClaimTracker ABI
  """
  getContractsAtkBitmapClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKBondFactoryImplementation ABI
  """
  getContractsAtkBondFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKBondImplementation ABI
  """
  getContractsAtkBondImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKBondProxy ABI
  """
  getContractsAtkBondProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKComplianceImplementation ABI
  """
  getContractsAtkComplianceImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKComplianceModuleRegistryImplementation ABI
  """
  getContractsAtkComplianceModuleRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKContractIdentityImplementation ABI
  """
  getContractsAtkContractIdentityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKContractIdentityProxy ABI
  """
  getContractsAtkContractIdentityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKDepositFactoryImplementation ABI
  """
  getContractsAtkDepositFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKDepositImplementation ABI
  """
  getContractsAtkDepositImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKDepositProxy ABI
  """
  getContractsAtkDepositProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKEquityFactoryImplementation ABI
  """
  getContractsAtkEquityFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKEquityImplementation ABI
  """
  getContractsAtkEquityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKEquityProxy ABI
  """
  getContractsAtkEquityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKFixedYieldProxy ABI
  """
  getContractsAtkFixedYieldProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKFixedYieldScheduleFactoryImplementation ABI
  """
  getContractsAtkFixedYieldScheduleFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKFixedYieldScheduleUpgradeable ABI
  """
  getContractsAtkFixedYieldScheduleUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKForwarder ABI
  """
  getContractsAtkForwarder(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKFundFactoryImplementation ABI
  """
  getContractsAtkFundFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKFundImplementation ABI
  """
  getContractsAtkFundImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKFundProxy ABI
  """
  getContractsAtkFundProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKIdentityFactoryImplementation ABI
  """
  getContractsAtkIdentityFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKIdentityImplementation ABI
  """
  getContractsAtkIdentityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKIdentityProxy ABI
  """
  getContractsAtkIdentityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKIdentityRegistryImplementation ABI
  """
  getContractsAtkIdentityRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKIdentityRegistryStorageImplementation ABI
  """
  getContractsAtkIdentityRegistryStorageImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKLinearVestingStrategy ABI
  """
  getContractsAtkLinearVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKPeopleRoles ABI
  """
  getContractsAtkPeopleRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKPushAirdropFactoryImplementation ABI
  """
  getContractsAtkPushAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKPushAirdropImplementation ABI
  """
  getContractsAtkPushAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKPushAirdropProxy ABI
  """
  getContractsAtkPushAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKRoles ABI
  """
  getContractsAtkRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKStableCoinFactoryImplementation ABI
  """
  getContractsAtkStableCoinFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKStableCoinImplementation ABI
  """
  getContractsAtkStableCoinImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKStableCoinProxy ABI
  """
  getContractsAtkStableCoinProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKSystemAccessManaged ABI
  """
  getContractsAtkSystemAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKSystemAccessManagerImplementation ABI
  """
  getContractsAtkSystemAccessManagerImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKSystemAddonRegistryImplementation ABI
  """
  getContractsAtkSystemAddonRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKSystemFactory ABI
  """
  getContractsAtkSystemFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKSystemImplementation ABI
  """
  getContractsAtkSystemImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKSystemRoles ABI
  """
  getContractsAtkSystemRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTimeBoundAirdropFactoryImplementation ABI
  """
  getContractsAtkTimeBoundAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTimeBoundAirdropImplementation ABI
  """
  getContractsAtkTimeBoundAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTimeBoundAirdropProxy ABI
  """
  getContractsAtkTimeBoundAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTokenAccessManagerImplementation ABI
  """
  getContractsAtkTokenAccessManagerImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTokenAccessManagerProxy ABI
  """
  getContractsAtkTokenAccessManagerProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTokenFactoryRegistryImplementation ABI
  """
  getContractsAtkTokenFactoryRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTokenSale ABI
  """
  getContractsAtkTokenSale(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTokenSaleFactory ABI
  """
  getContractsAtkTokenSaleFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTokenSaleProxy ABI
  """
  getContractsAtkTokenSaleProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTopicSchemeRegistryImplementation ABI
  """
  getContractsAtkTopicSchemeRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTopics ABI
  """
  getContractsAtkTopics(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTrustedIssuersRegistryImplementation ABI
  """
  getContractsAtkTrustedIssuersRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKTypedImplementationProxy ABI
  """
  getContractsAtkTypedImplementationProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKVault ABI
  """
  getContractsAtkVault(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKVaultFactoryImplementation ABI
  """
  getContractsAtkVaultFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKVestingAirdropFactoryImplementation ABI
  """
  getContractsAtkVestingAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKVestingAirdropImplementation ABI
  """
  getContractsAtkVestingAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKVestingAirdropProxy ABI
  """
  getContractsAtkVestingAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKXvPSettlementFactoryImplementation ABI
  """
  getContractsAtkXvPSettlementFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKXvPSettlementImplementation ABI
  """
  getContractsAtkXvPSettlementImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ATKXvPSettlementProxy ABI
  """
  getContractsAtkXvPSettlementProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ClaimAuthorizationExtension ABI
  """
  getContractsClaimAuthorizationExtension(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the CountryAllowListComplianceModule ABI
  """
  getContractsCountryAllowListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the CountryBlockListComplianceModule ABI
  """
  getContractsCountryBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts with their deployment status
  """
  getContractsDeployStatus(
    """
    The name of the ABIs to filter by
    """
    abiNames: [String!]

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractAddressListComplianceModule ABI
  """
  getContractsDeployStatusAbstractAddressListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKSystemAddonFactoryImplementation ABI
  """
  getContractsDeployStatusAbstractAtkSystemAddonFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKSystemProxy ABI
  """
  getContractsDeployStatusAbstractAtkSystemProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKTokenFactoryImplementation ABI
  """
  getContractsDeployStatusAbstractAtkTokenFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractComplianceModule ABI
  """
  getContractsDeployStatusAbstractComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractCountryComplianceModule ABI
  """
  getContractsDeployStatusAbstractCountryComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractIdentityComplianceModule ABI
  """
  getContractsDeployStatusAbstractIdentityComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AddressBlockListComplianceModule ABI
  """
  getContractsDeployStatusAddressBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAirdrop ABI
  """
  getContractsDeployStatusAtkAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAmountClaimTracker ABI
  """
  getContractsDeployStatusAtkAmountClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAssetProxy ABI
  """
  getContractsDeployStatusAtkAssetProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAssetRoles ABI
  """
  getContractsDeployStatusAtkAssetRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBitmapClaimTracker ABI
  """
  getContractsDeployStatusAtkBitmapClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondFactoryImplementation ABI
  """
  getContractsDeployStatusAtkBondFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondImplementation ABI
  """
  getContractsDeployStatusAtkBondImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondProxy ABI
  """
  getContractsDeployStatusAtkBondProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceImplementation ABI
  """
  getContractsDeployStatusAtkComplianceImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceModuleRegistryImplementation ABI
  """
  getContractsDeployStatusAtkComplianceModuleRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKContractIdentityImplementation ABI
  """
  getContractsDeployStatusAtkContractIdentityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKContractIdentityProxy ABI
  """
  getContractsDeployStatusAtkContractIdentityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositFactoryImplementation ABI
  """
  getContractsDeployStatusAtkDepositFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositImplementation ABI
  """
  getContractsDeployStatusAtkDepositImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositProxy ABI
  """
  getContractsDeployStatusAtkDepositProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkEquityFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityImplementation ABI
  """
  getContractsDeployStatusAtkEquityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityProxy ABI
  """
  getContractsDeployStatusAtkEquityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldProxy ABI
  """
  getContractsDeployStatusAtkFixedYieldProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldScheduleFactoryImplementation ABI
  """
  getContractsDeployStatusAtkFixedYieldScheduleFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldScheduleUpgradeable ABI
  """
  getContractsDeployStatusAtkFixedYieldScheduleUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKForwarder ABI
  """
  getContractsDeployStatusAtkForwarder(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundFactoryImplementation ABI
  """
  getContractsDeployStatusAtkFundFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundImplementation ABI
  """
  getContractsDeployStatusAtkFundImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundProxy ABI
  """
  getContractsDeployStatusAtkFundProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityImplementation ABI
  """
  getContractsDeployStatusAtkIdentityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityProxy ABI
  """
  getContractsDeployStatusAtkIdentityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryStorageImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryStorageImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKLinearVestingStrategy ABI
  """
  getContractsDeployStatusAtkLinearVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPeopleRoles ABI
  """
  getContractsDeployStatusAtkPeopleRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPushAirdropFactoryImplementation ABI
  """
  getContractsDeployStatusAtkPushAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPushAirdropImplementation ABI
  """
  getContractsDeployStatusAtkPushAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPushAirdropProxy ABI
  """
  getContractsDeployStatusAtkPushAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKRoles ABI
  """
  getContractsDeployStatusAtkRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinFactoryImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinProxy ABI
  """
  getContractsDeployStatusAtkStableCoinProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemAccessManaged ABI
  """
  getContractsDeployStatusAtkSystemAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemAccessManagerImplementation ABI
  """
  getContractsDeployStatusAtkSystemAccessManagerImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemAddonRegistryImplementation ABI
  """
  getContractsDeployStatusAtkSystemAddonRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemFactory ABI
  """
  getContractsDeployStatusAtkSystemFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemImplementation ABI
  """
  getContractsDeployStatusAtkSystemImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemRoles ABI
  """
  getContractsDeployStatusAtkSystemRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTimeBoundAirdropFactoryImplementation ABI
  """
  getContractsDeployStatusAtkTimeBoundAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTimeBoundAirdropImplementation ABI
  """
  getContractsDeployStatusAtkTimeBoundAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTimeBoundAirdropProxy ABI
  """
  getContractsDeployStatusAtkTimeBoundAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerImplementation ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerProxy ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenFactoryRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTokenFactoryRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenSale ABI
  """
  getContractsDeployStatusAtkTokenSale(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenSaleFactory ABI
  """
  getContractsDeployStatusAtkTokenSaleFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenSaleProxy ABI
  """
  getContractsDeployStatusAtkTokenSaleProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopicSchemeRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTopicSchemeRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopics ABI
  """
  getContractsDeployStatusAtkTopics(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTrustedIssuersRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTrustedIssuersRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTypedImplementationProxy ABI
  """
  getContractsDeployStatusAtkTypedImplementationProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVault ABI
  """
  getContractsDeployStatusAtkVault(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVaultFactoryImplementation ABI
  """
  getContractsDeployStatusAtkVaultFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVestingAirdropFactoryImplementation ABI
  """
  getContractsDeployStatusAtkVestingAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVestingAirdropImplementation ABI
  """
  getContractsDeployStatusAtkVestingAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVestingAirdropProxy ABI
  """
  getContractsDeployStatusAtkVestingAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKXvPSettlementFactoryImplementation ABI
  """
  getContractsDeployStatusAtkXvPSettlementFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKXvPSettlementImplementation ABI
  """
  getContractsDeployStatusAtkXvPSettlementImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKXvPSettlementProxy ABI
  """
  getContractsDeployStatusAtkXvPSettlementProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ClaimAuthorizationExtension ABI
  """
  getContractsDeployStatusClaimAuthorizationExtension(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryAllowListComplianceModule ABI
  """
  getContractsDeployStatusCountryAllowListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryBlockListComplianceModule ABI
  """
  getContractsDeployStatusCountryBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC734 ABI
  """
  getContractsDeployStatusErc734(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC734KeyPurposes ABI
  """
  getContractsDeployStatusErc734KeyPurposes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC734KeyTypes ABI
  """
  getContractsDeployStatusErc734KeyTypes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC735 ABI
  """
  getContractsDeployStatusErc735(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC735ClaimSchemes ABI
  """
  getContractsDeployStatusErc735ClaimSchemes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IClaimAuthorizer ABI
  """
  getContractsDeployStatusIClaimAuthorizer(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IContractIdentity ABI
  """
  getContractsDeployStatusIContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IContractWithIdentity ABI
  """
  getContractsDeployStatusIContractWithIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IWithTypeIdentifier ABI
  """
  getContractsDeployStatusIWithTypeIdentifier(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKAirdrop ABI
  """
  getContractsDeployStatusIatkAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKBond ABI
  """
  getContractsDeployStatusIatkBond(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKBondFactory ABI
  """
  getContractsDeployStatusIatkBondFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKClaimTracker ABI
  """
  getContractsDeployStatusIatkClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKCompliance ABI
  """
  getContractsDeployStatusIatkCompliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKComplianceModuleRegistry ABI
  """
  getContractsDeployStatusIatkComplianceModuleRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKContractIdentity ABI
  """
  getContractsDeployStatusIatkContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKDeposit ABI
  """
  getContractsDeployStatusIatkDeposit(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKDepositFactory ABI
  """
  getContractsDeployStatusIatkDepositFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKEquity ABI
  """
  getContractsDeployStatusIatkEquity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKEquityFactory ABI
  """
  getContractsDeployStatusIatkEquityFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFixedYieldScheduleFactory ABI
  """
  getContractsDeployStatusIatkFixedYieldScheduleFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFund ABI
  """
  getContractsDeployStatusIatkFund(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFundFactory ABI
  """
  getContractsDeployStatusIatkFundFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentity ABI
  """
  getContractsDeployStatusIatkIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityFactory ABI
  """
  getContractsDeployStatusIatkIdentityFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityRegistry ABI
  """
  getContractsDeployStatusIatkIdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityRegistryStorage ABI
  """
  getContractsDeployStatusIatkIdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKLinearVestingStrategy ABI
  """
  getContractsDeployStatusIatkLinearVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKPushAirdrop ABI
  """
  getContractsDeployStatusIatkPushAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKPushAirdropFactory ABI
  """
  getContractsDeployStatusIatkPushAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoin ABI
  """
  getContractsDeployStatusIatkStableCoin(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoinFactory ABI
  """
  getContractsDeployStatusIatkStableCoinFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystem ABI
  """
  getContractsDeployStatusIatkSystem(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemAccessManaged ABI
  """
  getContractsDeployStatusIatkSystemAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemAccessManager ABI
  """
  getContractsDeployStatusIatkSystemAccessManager(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemAddonRegistry ABI
  """
  getContractsDeployStatusIatkSystemAddonRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemFactory ABI
  """
  getContractsDeployStatusIatkSystemFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTimeBoundAirdrop ABI
  """
  getContractsDeployStatusIatkTimeBoundAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTimeBoundAirdropFactory ABI
  """
  getContractsDeployStatusIatkTimeBoundAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenFactory ABI
  """
  getContractsDeployStatusIatkTokenFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenFactoryRegistry ABI
  """
  getContractsDeployStatusIatkTokenFactoryRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenSale ABI
  """
  getContractsDeployStatusIatkTokenSale(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTopicSchemeRegistry ABI
  """
  getContractsDeployStatusIatkTopicSchemeRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTrustedIssuersRegistry ABI
  """
  getContractsDeployStatusIatkTrustedIssuersRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTypedImplementationRegistry ABI
  """
  getContractsDeployStatusIatkTypedImplementationRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVaultFactory ABI
  """
  getContractsDeployStatusIatkVaultFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVestingAirdrop ABI
  """
  getContractsDeployStatusIatkVestingAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVestingAirdropFactory ABI
  """
  getContractsDeployStatusIatkVestingAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVestingStrategy ABI
  """
  getContractsDeployStatusIatkVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKXvPSettlement ABI
  """
  getContractsDeployStatusIatkXvPSettlement(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKXvPSettlementFactory ABI
  """
  getContractsDeployStatusIatkXvPSettlementFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IdentityAllowListComplianceModule ABI
  """
  getContractsDeployStatusIdentityAllowListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IdentityBlockListComplianceModule ABI
  """
  getContractsDeployStatusIdentityBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643 ABI
  """
  getContractsDeployStatusIerc3643(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643ClaimTopicsRegistry ABI
  """
  getContractsDeployStatusIerc3643ClaimTopicsRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643Compliance ABI
  """
  getContractsDeployStatusIerc3643Compliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistry ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistryStorage ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643TrustedIssuersRegistry ABI
  """
  getContractsDeployStatusIerc3643TrustedIssuersRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMART ABI
  """
  getContractsDeployStatusIsmart(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTBurnable ABI
  """
  getContractsDeployStatusIsmartBurnable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCapped ABI
  """
  getContractsDeployStatusIsmartCapped(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCollateral ABI
  """
  getContractsDeployStatusIsmartCollateral(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCompliance ABI
  """
  getContractsDeployStatusIsmartCompliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTComplianceModule ABI
  """
  getContractsDeployStatusIsmartComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCustodian ABI
  """
  getContractsDeployStatusIsmartCustodian(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusIsmartFixedYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTHistoricalBalances ABI
  """
  getContractsDeployStatusIsmartHistoricalBalances(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistry ABI
  """
  getContractsDeployStatusIsmartIdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistryStorage ABI
  """
  getContractsDeployStatusIsmartIdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTPausable ABI
  """
  getContractsDeployStatusIsmartPausable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTRedeemable ABI
  """
  getContractsDeployStatusIsmartRedeemable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusIsmartTokenAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManager ABI
  """
  getContractsDeployStatusIsmartTokenAccessManager(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTopicSchemeRegistry ABI
  """
  getContractsDeployStatusIsmartTopicSchemeRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTYield ABI
  """
  getContractsDeployStatusIsmartYield(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTYieldSchedule ABI
  """
  getContractsDeployStatusIsmartYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainContractIdentity ABI
  """
  getContractsDeployStatusOnChainContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentity ABI
  """
  getContractsDeployStatusOnChainIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentityWithRevocation ABI
  """
  getContractsDeployStatusOnChainIdentityWithRevocation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMART ABI
  """
  getContractsDeployStatusSmart(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnable ABI
  """
  getContractsDeployStatusSmartBurnable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnableUpgradeable ABI
  """
  getContractsDeployStatusSmartBurnableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCapped ABI
  """
  getContractsDeployStatusSmartCapped(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCappedUpgradeable ABI
  """
  getContractsDeployStatusSmartCappedUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateral ABI
  """
  getContractsDeployStatusSmartCollateral(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateralUpgradeable ABI
  """
  getContractsDeployStatusSmartCollateralUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTContext ABI
  """
  getContractsDeployStatusSmartContext(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodian ABI
  """
  getContractsDeployStatusSmartCustodian(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodianUpgradeable ABI
  """
  getContractsDeployStatusSmartCustodianUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtension ABI
  """
  getContractsDeployStatusSmartExtension(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtensionUpgradeable ABI
  """
  getContractsDeployStatusSmartExtensionUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusSmartFixedYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleLogic ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleLogic(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleUpgradeable ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalances ABI
  """
  getContractsDeployStatusSmartHistoricalBalances(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalancesUpgradeable ABI
  """
  getContractsDeployStatusSmartHistoricalBalancesUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHooks ABI
  """
  getContractsDeployStatusSmartHooks(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTIdentityVerificationComplianceModule ABI
  """
  getContractsDeployStatusSmartIdentityVerificationComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausable ABI
  """
  getContractsDeployStatusSmartPausable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausableUpgradeable ABI
  """
  getContractsDeployStatusSmartPausableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemable ABI
  """
  getContractsDeployStatusSmartRedeemable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemableUpgradeable ABI
  """
  getContractsDeployStatusSmartRedeemableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusSmartTokenAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManagedUpgradeable ABI
  """
  getContractsDeployStatusSmartTokenAccessManagedUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTUpgradeable ABI
  """
  getContractsDeployStatusSmartUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTYield ABI
  """
  getContractsDeployStatusSmartYield(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTYieldUpgradeable ABI
  """
  getContractsDeployStatusSmartYieldUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts for the ERC734 ABI
  """
  getContractsErc734(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ERC734KeyPurposes ABI
  """
  getContractsErc734KeyPurposes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ERC734KeyTypes ABI
  """
  getContractsErc734KeyTypes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ERC735 ABI
  """
  getContractsErc735(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ERC735ClaimSchemes ABI
  """
  getContractsErc735ClaimSchemes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IClaimAuthorizer ABI
  """
  getContractsIClaimAuthorizer(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IContractIdentity ABI
  """
  getContractsIContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IContractWithIdentity ABI
  """
  getContractsIContractWithIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IWithTypeIdentifier ABI
  """
  getContractsIWithTypeIdentifier(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKAirdrop ABI
  """
  getContractsIatkAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKBond ABI
  """
  getContractsIatkBond(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKBondFactory ABI
  """
  getContractsIatkBondFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKClaimTracker ABI
  """
  getContractsIatkClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKCompliance ABI
  """
  getContractsIatkCompliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKComplianceModuleRegistry ABI
  """
  getContractsIatkComplianceModuleRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKContractIdentity ABI
  """
  getContractsIatkContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKDeposit ABI
  """
  getContractsIatkDeposit(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKDepositFactory ABI
  """
  getContractsIatkDepositFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKEquity ABI
  """
  getContractsIatkEquity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKEquityFactory ABI
  """
  getContractsIatkEquityFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKFixedYieldScheduleFactory ABI
  """
  getContractsIatkFixedYieldScheduleFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKFund ABI
  """
  getContractsIatkFund(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKFundFactory ABI
  """
  getContractsIatkFundFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKIdentity ABI
  """
  getContractsIatkIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKIdentityFactory ABI
  """
  getContractsIatkIdentityFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKIdentityRegistry ABI
  """
  getContractsIatkIdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKIdentityRegistryStorage ABI
  """
  getContractsIatkIdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKLinearVestingStrategy ABI
  """
  getContractsIatkLinearVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKPushAirdrop ABI
  """
  getContractsIatkPushAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKPushAirdropFactory ABI
  """
  getContractsIatkPushAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKStableCoin ABI
  """
  getContractsIatkStableCoin(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKStableCoinFactory ABI
  """
  getContractsIatkStableCoinFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKSystem ABI
  """
  getContractsIatkSystem(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKSystemAccessManaged ABI
  """
  getContractsIatkSystemAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKSystemAccessManager ABI
  """
  getContractsIatkSystemAccessManager(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKSystemAddonRegistry ABI
  """
  getContractsIatkSystemAddonRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKSystemFactory ABI
  """
  getContractsIatkSystemFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTimeBoundAirdrop ABI
  """
  getContractsIatkTimeBoundAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTimeBoundAirdropFactory ABI
  """
  getContractsIatkTimeBoundAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTokenFactory ABI
  """
  getContractsIatkTokenFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTokenFactoryRegistry ABI
  """
  getContractsIatkTokenFactoryRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTokenSale ABI
  """
  getContractsIatkTokenSale(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTopicSchemeRegistry ABI
  """
  getContractsIatkTopicSchemeRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTrustedIssuersRegistry ABI
  """
  getContractsIatkTrustedIssuersRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKTypedImplementationRegistry ABI
  """
  getContractsIatkTypedImplementationRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKVaultFactory ABI
  """
  getContractsIatkVaultFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKVestingAirdrop ABI
  """
  getContractsIatkVestingAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKVestingAirdropFactory ABI
  """
  getContractsIatkVestingAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKVestingStrategy ABI
  """
  getContractsIatkVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKXvPSettlement ABI
  """
  getContractsIatkXvPSettlement(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IATKXvPSettlementFactory ABI
  """
  getContractsIatkXvPSettlementFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IdentityAllowListComplianceModule ABI
  """
  getContractsIdentityAllowListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IdentityBlockListComplianceModule ABI
  """
  getContractsIdentityBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IERC3643 ABI
  """
  getContractsIerc3643(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IERC3643ClaimTopicsRegistry ABI
  """
  getContractsIerc3643ClaimTopicsRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IERC3643Compliance ABI
  """
  getContractsIerc3643Compliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IERC3643IdentityRegistry ABI
  """
  getContractsIerc3643IdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IERC3643IdentityRegistryStorage ABI
  """
  getContractsIerc3643IdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the IERC3643TrustedIssuersRegistry ABI
  """
  getContractsIerc3643TrustedIssuersRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMART ABI
  """
  getContractsIsmart(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTBurnable ABI
  """
  getContractsIsmartBurnable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTCapped ABI
  """
  getContractsIsmartCapped(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTCollateral ABI
  """
  getContractsIsmartCollateral(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTCompliance ABI
  """
  getContractsIsmartCompliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTComplianceModule ABI
  """
  getContractsIsmartComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTCustodian ABI
  """
  getContractsIsmartCustodian(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTFixedYieldSchedule ABI
  """
  getContractsIsmartFixedYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTHistoricalBalances ABI
  """
  getContractsIsmartHistoricalBalances(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTIdentityRegistry ABI
  """
  getContractsIsmartIdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTIdentityRegistryStorage ABI
  """
  getContractsIsmartIdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTPausable ABI
  """
  getContractsIsmartPausable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTRedeemable ABI
  """
  getContractsIsmartRedeemable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTTokenAccessManaged ABI
  """
  getContractsIsmartTokenAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTTokenAccessManager ABI
  """
  getContractsIsmartTokenAccessManager(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTTopicSchemeRegistry ABI
  """
  getContractsIsmartTopicSchemeRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTYield ABI
  """
  getContractsIsmartYield(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the ISMARTYieldSchedule ABI
  """
  getContractsIsmartYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the OnChainContractIdentity ABI
  """
  getContractsOnChainContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the OnChainIdentity ABI
  """
  getContractsOnChainIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the OnChainIdentityWithRevocation ABI
  """
  getContractsOnChainIdentityWithRevocation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMART ABI
  """
  getContractsSmart(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTBurnable ABI
  """
  getContractsSmartBurnable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTBurnableUpgradeable ABI
  """
  getContractsSmartBurnableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTCapped ABI
  """
  getContractsSmartCapped(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTCappedUpgradeable ABI
  """
  getContractsSmartCappedUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTCollateral ABI
  """
  getContractsSmartCollateral(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTCollateralUpgradeable ABI
  """
  getContractsSmartCollateralUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTContext ABI
  """
  getContractsSmartContext(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTCustodian ABI
  """
  getContractsSmartCustodian(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTCustodianUpgradeable ABI
  """
  getContractsSmartCustodianUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTExtension ABI
  """
  getContractsSmartExtension(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTExtensionUpgradeable ABI
  """
  getContractsSmartExtensionUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTFixedYieldSchedule ABI
  """
  getContractsSmartFixedYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTFixedYieldScheduleLogic ABI
  """
  getContractsSmartFixedYieldScheduleLogic(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTFixedYieldScheduleUpgradeable ABI
  """
  getContractsSmartFixedYieldScheduleUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTHistoricalBalances ABI
  """
  getContractsSmartHistoricalBalances(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTHistoricalBalancesUpgradeable ABI
  """
  getContractsSmartHistoricalBalancesUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTHooks ABI
  """
  getContractsSmartHooks(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTIdentityVerificationComplianceModule ABI
  """
  getContractsSmartIdentityVerificationComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTPausable ABI
  """
  getContractsSmartPausable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTPausableUpgradeable ABI
  """
  getContractsSmartPausableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTRedeemable ABI
  """
  getContractsSmartRedeemable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTRedeemableUpgradeable ABI
  """
  getContractsSmartRedeemableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTTokenAccessManaged ABI
  """
  getContractsSmartTokenAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTTokenAccessManagedUpgradeable ABI
  """
  getContractsSmartTokenAccessManagedUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTUpgradeable ABI
  """
  getContractsSmartUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTYield ABI
  """
  getContractsSmartYield(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get all contracts for the SMARTYieldUpgradeable ABI
  """
  getContractsSmartYieldUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsPaginatedOutput

  """
  Get the list of pending and recently processed transactions
  """
  getPendingAndRecentlyProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-01-01T00:00:00.000Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get the list of pending transactions
  """
  getPendingTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """
  Get the list of processed transactions
  """
  getProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-01-01T00:00:00.000Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get a transaction
  """
  getTransaction(
    """
    Transaction hash
    """
    transactionHash: String!
  ): TransactionOutput

  """
  Get transaction counts over time
  """
  getTransactionsTimeline(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Granularity of the timeline
    """
    granularity: TransactionTimelineGranularity!

    """
    Processed after date, use json like date format (eg 2025-01-01T00:00:00.000Z)
    """
    processedAfter: String

    """
    Timeline end date, use json like date format (eg 2025-01-01T00:00:00.000Z) (for month and year interval the last day of the month or year is used). Defaults to the current date.
    """
    timelineEndDate: String

    """
    Timeline start date, use json like date format (eg 2025-01-01T00:00:00.000Z) (for month and year interval the first day of the month or year is used)
    """
    timelineStartDate: String!
  ): [TransactionTimelineOutput!]

  """
  Retrieves all active verification methods for a user's wallet
  """
  getWalletVerifications(
    """
    Ethereum address of the user's wallet
    """
    userWalletAddress: String!
  ): [WalletVerification!]
}

type SMART {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the `ISMARTCompliance` contract instance used by this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  ISMARTCompliance The current compliance contract.
  """
  compliance: String

  """
  Returns a list of all active compliance modules and their current parameters.
  Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
  SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
  """
  complianceModules: [SMARTTuple0ComplianceModulesOutput!]

  """
  Returns the number of decimals used to represent token amounts.
  Overrides `ERC20.decimals` and `IERC20Metadata.decimals`.      It fetches the `__decimals` value stored in `_SMARTLogic`'s state, ensuring consistency      with the value set during initialization.
  uint8 The number of decimals.
  """
  decimals: Int
  id: ID

  """
  Returns the `ISMARTIdentityRegistry` contract instance used by this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  ISMARTIdentityRegistry The current identity registry contract.
  """
  identityRegistry: String

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the on-chain ID address associated with this token.
  This can represent the token issuer or the token entity.
  address The current on-chain ID address.
  """
  onchainID: String

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Standard ERC165 function to check if the contract supports a specific interface.
  This implementation enhances OpenZeppelin's `ERC165.supportsInterface`.      It first calls `__smart_supportsInterface(interfaceId)` (from `_SMARTLogic`). This checks if the      `interfaceId` was registered by any SMART extension (via `_registerInterface`) or if it is the core      `type(ISMART).interfaceId`.      If that returns `false`, it then calls `super.supportsInterface(interfaceId)`, which invokes the      standard OpenZeppelin `ERC165` logic (checking for `type(IERC165).interfaceId` and any interfaces      registered directly with OZ's `_registerInterface` if it were used, though SMART uses its own).      It is recommended that the final concrete contract also explicitly registers `type(IERC165).interfaceId`      using `_SMARTExtension._registerInterface` in its constructor for full ERC165 compliance discovery.
  bool `true` if the contract implements `interfaceId` (either through SMART logic or standard ERC165),         `false` otherwise. Interface ID `0xffffffff` always returns `false`.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTApproveInput {
  spender: String!
  value: String!
}

input SMARTBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTBatchTransferInput {
  """
  An array of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  An array of recipient addresses.
  """
  toList: [String!]!
}

type SMARTBurnable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTBurnableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTBurnableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTBurnableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTBurnableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTBurnableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTBurnableApproveInput {
  spender: String!
  value: String!
}

input SMARTBurnableBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input SMARTBurnableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTBurnableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input SMARTBurnableBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

type SMARTBurnableComplianceModulesOutput {
  modulesList: [SMARTBurnableModulesListComplianceModulesOutput!]
}

type SMARTBurnableComplianceOutput {
  complianceContract: String
}

type SMARTBurnableIdentityRegistryOutput {
  registryContract: String
}

input SMARTBurnableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTBurnableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTBurnableOnchainIDOutput {
  idAddress: String
}

input SMARTBurnableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTBurnableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTBurnableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTBurnableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTBurnableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTBurnableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTBurnableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTBurnableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTBurnableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTBurnableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTBurnableTransferInput {
  to: String!
  value: String!
}

type SMARTBurnableUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTBurnableUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTBurnableUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTBurnableUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTBurnableUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTBurnableUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTBurnableUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTBurnableUpgradeableBatchBurnInput {
  """
  An array of token quantities to be burned. `amounts[i]` tokens will be burned                from `userAddresses[i]`.
  """
  amounts: [String!]!

  """
  An array of blockchain addresses from which tokens will be burned.
  """
  userAddresses: [String!]!
}

input SMARTBurnableUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTBurnableUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input SMARTBurnableUpgradeableBurnInput {
  """
  The quantity of tokens to burn. This should be a non-negative integer.
  """
  amount: String!

  """
  The blockchain address of the account from which tokens will be burned.                    This is the account whose token balance will decrease.
  """
  userAddress: String!
}

type SMARTBurnableUpgradeableComplianceModulesOutput {
  modulesList: [SMARTBurnableUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTBurnableUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTBurnableUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTBurnableUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTBurnableUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTBurnableUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTBurnableUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTBurnableUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTBurnableUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTBurnableUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTBurnableUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTBurnableUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTBurnableUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTBurnableUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTBurnableUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTBurnableUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTBurnableUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTCapped {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the maximum allowed total supply for this token (the "cap").
  This public view function implements the `cap()` function from the `ISMARTCapped` interface.      It allows anyone to query the token's cap.      The `override` keyword is not strictly needed here as it's implementing an interface function      in an abstract contract, but it can be good practice. If ISMARTCapped was a contract, it would be required.
  uint256 The maximum number of tokens that can be in circulation.
  """
  cap: String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTCappedComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTCappedComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTCappedIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTCappedOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTCappedAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTCappedApproveInput {
  spender: String!
  value: String!
}

input SMARTCappedBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTCappedBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTCappedComplianceModulesOutput {
  modulesList: [SMARTCappedModulesListComplianceModulesOutput!]
}

type SMARTCappedComplianceOutput {
  complianceContract: String
}

type SMARTCappedIdentityRegistryOutput {
  registryContract: String
}

input SMARTCappedMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTCappedModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCappedOnchainIDOutput {
  idAddress: String
}

input SMARTCappedRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTCappedRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTCappedRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTCappedSetCapInput {
  """
  The new maximum total supply. Must be >= the current total supply.
  """
  newCap: String!
}

input SMARTCappedSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTCappedSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTCappedSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTCappedSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTCappedTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTCappedTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCappedTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCappedTransferInput {
  to: String!
  value: String!
}

type SMARTCappedUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the maximum allowed total supply for this token (the "cap").
  This public view function implements the `cap()` function from the `ISMARTCapped` interface.      It allows anyone to query the token's cap.      The `override` keyword is not strictly needed here as it's implementing an interface function      in an abstract contract, but it can be good practice. If ISMARTCapped was a contract, it would be required.
  uint256 The maximum number of tokens that can be in circulation.
  """
  cap: String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTCappedUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTCappedUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTCappedUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTCappedUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTCappedUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTCappedUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTCappedUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTCappedUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTCappedUpgradeableComplianceModulesOutput {
  modulesList: [SMARTCappedUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTCappedUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTCappedUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTCappedUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTCappedUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCappedUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTCappedUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTCappedUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTCappedUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTCappedUpgradeableSetCapInput {
  """
  The new maximum total supply. Must be >= the current total supply.
  """
  newCap: String!
}

input SMARTCappedUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTCappedUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTCappedUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTCappedUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTCappedUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTCappedUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCappedUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCappedUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTCollateral {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTCollateralComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTCollateralComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int

  """
  Attempts to find the first valid collateral claim on the token contract's own identity.
  Implements the `ISMARTCollateral` interface function.      It fetches trusted issuers for the `collateralProofTopic` from the `identityRegistry`.      Then, it retrieves all claims with this topic from the token's own `onchainID` contract.      It iterates through these claims, calling `__checkSingleClaim` for each to find the first one      that is valid, issued by a trusted issuer, not expired, and correctly decodable.      `virtual` allows this to be overridden in derived contracts if more specific logic is needed.
  The collateral amount from the first valid claim found (0 if none)., The expiry timestamp of the first valid claim (0 if none or expired)., The address of the claim issuer for the first valid claim (address(0) if none).
  """
  findValidCollateralClaim: SMARTCollateralFindValidCollateralClaimOutput
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTCollateralIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTCollateralOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTCollateralAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTCollateralApproveInput {
  spender: String!
  value: String!
}

input SMARTCollateralBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTCollateralBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTCollateralComplianceModulesOutput {
  modulesList: [SMARTCollateralModulesListComplianceModulesOutput!]
}

type SMARTCollateralComplianceOutput {
  complianceContract: String
}

type SMARTCollateralFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

type SMARTCollateralIdentityRegistryOutput {
  registryContract: String
}

input SMARTCollateralMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTCollateralModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCollateralOnchainIDOutput {
  idAddress: String
}

input SMARTCollateralRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTCollateralRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTCollateralRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTCollateralSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTCollateralSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTCollateralSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTCollateralSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTCollateralTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTCollateralTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCollateralTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCollateralTransferInput {
  to: String!
  value: String!
}

type SMARTCollateralUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTCollateralUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTCollateralUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int

  """
  Attempts to find the first valid collateral claim on the token contract's own identity.
  Implements the `ISMARTCollateral` interface function.      It fetches trusted issuers for the `collateralProofTopic` from the `identityRegistry`.      Then, it retrieves all claims with this topic from the token's own `onchainID` contract.      It iterates through these claims, calling `__checkSingleClaim` for each to find the first one      that is valid, issued by a trusted issuer, not expired, and correctly decodable.      `virtual` allows this to be overridden in derived contracts if more specific logic is needed.
  The collateral amount from the first valid claim found (0 if none)., The expiry timestamp of the first valid claim (0 if none or expired)., The address of the claim issuer for the first valid claim (address(0) if none).
  """
  findValidCollateralClaim: SMARTCollateralUpgradeableFindValidCollateralClaimOutput
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTCollateralUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTCollateralUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTCollateralUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTCollateralUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTCollateralUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTCollateralUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTCollateralUpgradeableComplianceModulesOutput {
  modulesList: [SMARTCollateralUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTCollateralUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTCollateralUpgradeableFindValidCollateralClaimOutput {
  amount: String
  expiryTimestamp: String
  issuer: String
}

type SMARTCollateralUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTCollateralUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTCollateralUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCollateralUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTCollateralUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTCollateralUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTCollateralUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTCollateralUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTCollateralUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTCollateralUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTCollateralUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTCollateralUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTCollateralUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCollateralUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCollateralUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTContext {
  id: ID
}

"""
Returns the transaction hash
"""
type SMARTContextTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTContextTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type SMARTCustodian {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTCustodianComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTCustodianComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int

  """
  Gets the amount of tokens specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The value stored in `__frozenTokens[userAddress]`.
  """
  getFrozenTokens(userAddress: String!): String
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTCustodianIdentityRegistryOutput

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if `__frozen[userAddress]` is true, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTCustodianOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTCustodianAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTCustodianApproveInput {
  spender: String!
  value: String!
}

input SMARTCustodianBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input SMARTCustodianBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input SMARTCustodianBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTCustodianBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input SMARTCustodianBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input SMARTCustodianBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

type SMARTCustodianComplianceModulesOutput {
  modulesList: [SMARTCustodianModulesListComplianceModulesOutput!]
}

type SMARTCustodianComplianceOutput {
  complianceContract: String
}

input SMARTCustodianForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input SMARTCustodianForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input SMARTCustodianFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

type SMARTCustodianIdentityRegistryOutput {
  registryContract: String
}

input SMARTCustodianMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTCustodianModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCustodianOnchainIDOutput {
  idAddress: String
}

input SMARTCustodianRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTCustodianRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTCustodianRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTCustodianSetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

input SMARTCustodianSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTCustodianSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTCustodianSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTCustodianSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTCustodianTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTCustodianTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCustodianTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCustodianTransferInput {
  to: String!
  value: String!
}

input SMARTCustodianUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type SMARTCustodianUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTCustodianUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTCustodianUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int

  """
  Gets the amount of tokens specifically (partially) frozen for an address.
  This does not include tokens that are implicitly frozen because the entire address is frozen.
  uint256 The value stored in `__frozenTokens[userAddress]`.
  """
  getFrozenTokens(userAddress: String!): String
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTCustodianUpgradeableIdentityRegistryOutput

  """
  Checks if an address is currently fully frozen.
  A `view` function does not modify blockchain state and does not cost gas when called externally.
  bool `true` if `__frozen[userAddress]` is true, `false` otherwise.
  """
  isFrozen(userAddress: String!): Boolean

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTCustodianUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTCustodianUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTCustodianUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTCustodianUpgradeableBatchForcedTransferInput {
  """
  A list of corresponding token amounts to transfer.
  """
  amounts: [String!]!

  """
  A list of sender addresses.
  """
  fromList: [String!]!

  """
  A list of recipient addresses.
  """
  toList: [String!]!
}

input SMARTCustodianUpgradeableBatchFreezePartialTokensInput {
  """
  A list of corresponding token amounts to freeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input SMARTCustodianUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTCustodianUpgradeableBatchSetAddressFrozenInput {
  """
  A list of corresponding boolean freeze statuses (`true` for freeze, `false` for unfreeze).
  """
  freeze: [Boolean!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

input SMARTCustodianUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

input SMARTCustodianUpgradeableBatchUnfreezePartialTokensInput {
  """
  A list of corresponding token amounts to unfreeze.
  """
  amounts: [String!]!

  """
  A list of target addresses.
  """
  userAddresses: [String!]!
}

type SMARTCustodianUpgradeableComplianceModulesOutput {
  modulesList: [SMARTCustodianUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTCustodianUpgradeableComplianceOutput {
  complianceContract: String
}

input SMARTCustodianUpgradeableForcedRecoverTokensInput {
  """
  The address from which tokens will be recovered.
  """
  lostWallet: String!

  """
  The address to which tokens will be recovered.
  """
  newWallet: String!
}

input SMARTCustodianUpgradeableForcedTransferInput {
  """
  The quantity of tokens to transfer.
  """
  amount: String!

  """
  The address from which tokens will be transferred.
  """
  from: String!

  """
  The address to which tokens will be transferred.
  """
  to: String!
}

input SMARTCustodianUpgradeableFreezePartialTokensInput {
  """
  The quantity of tokens to freeze.
  """
  amount: String!

  """
  The address for which to freeze tokens.
  """
  userAddress: String!
}

type SMARTCustodianUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTCustodianUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTCustodianUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTCustodianUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTCustodianUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTCustodianUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTCustodianUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTCustodianUpgradeableSetAddressFrozenInput {
  """
  `true` to freeze the address, `false` to unfreeze it.
  """
  freeze: Boolean!

  """
  The target address whose frozen status is to be changed.
  """
  userAddress: String!
}

input SMARTCustodianUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTCustodianUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTCustodianUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTCustodianUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTCustodianUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTCustodianUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTCustodianUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTCustodianUpgradeableTransferInput {
  to: String!
  value: String!
}

input SMARTCustodianUpgradeableUnfreezePartialTokensInput {
  """
  The quantity of tokens to unfreeze.
  """
  amount: String!

  """
  The address for which to unfreeze tokens.
  """
  userAddress: String!
}

type SMARTExtension {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTExtensionComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTExtensionComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTExtensionIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTExtensionOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTExtensionAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTExtensionApproveInput {
  spender: String!
  value: String!
}

input SMARTExtensionBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTExtensionBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTExtensionComplianceModulesOutput {
  modulesList: [SMARTExtensionModulesListComplianceModulesOutput!]
}

type SMARTExtensionComplianceOutput {
  complianceContract: String
}

type SMARTExtensionIdentityRegistryOutput {
  registryContract: String
}

input SMARTExtensionMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTExtensionModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTExtensionOnchainIDOutput {
  idAddress: String
}

input SMARTExtensionRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTExtensionRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTExtensionRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTExtensionSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTExtensionSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTExtensionSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTExtensionSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTExtensionTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTExtensionTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTExtensionTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTExtensionTransferInput {
  to: String!
  value: String!
}

type SMARTExtensionUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTExtensionUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTExtensionUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTExtensionUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTExtensionUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTExtensionUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTExtensionUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTExtensionUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTExtensionUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTExtensionUpgradeableComplianceModulesOutput {
  modulesList: [SMARTExtensionUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTExtensionUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTExtensionUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTExtensionUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTExtensionUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTExtensionUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTExtensionUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTExtensionUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTExtensionUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTExtensionUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTExtensionUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTExtensionUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTExtensionUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTExtensionUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTExtensionUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTExtensionUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTExtensionUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTFixedYieldSchedule {
  """
  The denominator used for rate calculations (10,000 basis points = 100%).
  """
  RATE_BASIS_POINTS: String

  """
  Returns an array of all period end timestamps for this yield schedule.
  Each timestamp in the array marks the conclusion of a yield distribution period. The number of elements in this array corresponds to the total number of periods in the schedule. This is useful for understanding the full timeline of the yield schedule.
  An array of Unix timestamps, each representing the end of a distribution period.
  """
  allPeriods: [String!]

  """
  Calculates the total accrued yield for the message sender (`_msgSender()`), including any pro-rata share for the current period.
  Convenience function so callers don't have to pass their own address.
  The total accrued yield amount for the caller.
  """
  calculateAccruedYield: String

  """
  Calculates the total accrued yield for a specific token holder up to the current moment, including any pro-rata share for the ongoing period.
  Calculates yield for completed, unclaimed periods using historical balances (`balanceOfAt`). For the current, ongoing period, it calculates a pro-rata share based on the holder's current balance and time elapsed in the period.
  The total amount of yield tokens accrued by the `holder`.
  """
  calculateAccruedYield1(holder: String!): String

  """
  Returns the current, ongoing period number of the yield schedule.
  If the schedule has not yet started (`block.timestamp < startDate()`), this might return 0. If the schedule has ended (`block.timestamp >= endDate()`), this might return the total number of periods. Otherwise, it returns the 1-indexed number of the period that is currently in progress.
  The current period number (1-indexed), or 0 if not started / an indicator if ended.
  """
  currentPeriod: String

  """
  Returns the ERC20 token contract that is used for making yield payments.
  This is the actual token that holders will receive when they claim their yield. It can be the same as `token()` or a different token (e.g., a stablecoin).
  The `IERC20` compliant token contract address used for payments.
  """
  denominationAsset: String

  """
  Returns the timestamp representing the end date and time of the entire yield schedule.
  After this timestamp, no more yield will typically accrue or be distributed by this schedule.
  The Unix timestamp indicating when the yield schedule concludes.
  """
  endDate: String
  id: ID

  """
  Returns the duration of each distribution interval or period in seconds.
  For example, if yield is distributed daily, the interval would be `86400` seconds. This, along with `startDate` and `endDate`, defines the periodicity of the schedule.
  The length of each yield period in seconds.
  """
  interval: String

  """
  Returns the last period number for which a specific token holder has successfully claimed their yield.
  This is crucial for tracking individual claim statuses. If a holder has never claimed, this might return 0.
  The 1-indexed number of the last period claimed by the `holder`.
  """
  lastClaimedPeriod(holder: String!): String

  """
  Returns the last claimed period for the message sender (`_msgSender()`).
  Convenience function so callers don't have to pass their own address.
  The last period number (1-indexed) claimed by the caller.
  """
  lastClaimedPeriod2: String

  """
  Returns the most recent period number that has been fully completed and is eligible for yield claims.
  This indicates up to which period users can typically claim their accrued yield. If no periods have completed (e.g., `block.timestamp < periodEnd(1)`), this might return 0.
  The 1-indexed number of the last fully completed period.
  """
  lastCompletedPeriod: String

  """
  Returns the end timestamp for a specific yield distribution period.
  Periods are 1-indexed. Accessing `_periodEndTimestamps` requires 0-indexed access (`period - 1`).
  The Unix timestamp marking the end of the specified `period`.
  """
  periodEnd(period: String!): String

  """
  Returns the yield rate for the schedule.
  The interpretation of this rate (e.g., annual percentage rate, per period rate) and its precision (e.g., basis points) depends on the specific implementation of the schedule contract. For a fixed schedule, this rate is a key parameter in calculating yield per period.
  The configured yield rate (e.g., in basis points, where 100 basis points = 1%).
  """
  rate: String

  """
  Returns the Unix timestamp (seconds since epoch) when the yield schedule starts.
  This is an immutable value set in the constructor. It defines the beginning of the yield accrual period. This function fulfills the `startDate()` requirement from the `ISMARTFixedYieldSchedule` interface (which itself inherits it from `ISMARTYieldSchedule`).
  The Unix timestamp when the yield schedule starts.
  """
  startDate: String

  """
  Checks if this contract supports a given interface.
  Implementation of IERC165 interface detection.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the remaining time in seconds until the start of the next yield distribution period.
  If the schedule has not started, this could be time until `startDate()`. If the schedule is ongoing, this is the time left in the `currentPeriod()`. If the schedule has ended, this might return 0.
  The time in seconds until the next period begins or current period ends.
  """
  timeUntilNextPeriod: String

  """
  Returns the address of the SMART token contract for which this yield schedule is defined.
  The schedule contract needs to interact with this token contract to query historical balances (e.g., `balanceOfAt`) and total supplies (`totalSupplyAt`). The returned token contract should implement the `ISMARTYield` interface.
  The `ISMARTYield` compliant token contract address.
  """
  token: String

  """
  Calculates the total amount of yield that has been accrued by all token holders across all completed periods but has not yet been claimed.
  This calculation can be gas-intensive as it iterates through all completed periods and queries historical total supply for each. It assumes `_token.yieldBasisPerUnit(address(0))` provides a generic or representative basis if it varies by holder.
  The total sum of unclaimed yield tokens.
  """
  totalUnclaimedYield: String

  """
  Calculates the total amount of yield that will be required to cover all token holders for the next upcoming distribution period.
  This calculation uses the current total supply. For a more precise estimate if supply changes rapidly, one might need a more complex projection. Assumes a generic basis from `_token.yieldBasisPerUnit(address(0))`.
  The estimated total yield tokens needed for the next period's distribution.
  """
  totalYieldForNextPeriod: String
}

type SMARTFixedYieldScheduleLogic {
  """
  The denominator used for rate calculations (10,000 basis points = 100%).
  """
  RATE_BASIS_POINTS: String

  """
  Returns an array of all period end timestamps for this yield schedule.
  Each timestamp in the array marks the conclusion of a yield distribution period. The number of elements in this array corresponds to the total number of periods in the schedule. This is useful for understanding the full timeline of the yield schedule.
  An array of Unix timestamps, each representing the end of a distribution period.
  """
  allPeriods: [String!]

  """
  Calculates the total accrued yield for the message sender (`_msgSender()`), including any pro-rata share for the current period.
  Convenience function so callers don't have to pass their own address.
  The total accrued yield amount for the caller.
  """
  calculateAccruedYield: String

  """
  Calculates the total accrued yield for a specific token holder up to the current moment, including any pro-rata share for the ongoing period.
  Calculates yield for completed, unclaimed periods using historical balances (`balanceOfAt`). For the current, ongoing period, it calculates a pro-rata share based on the holder's current balance and time elapsed in the period.
  The total amount of yield tokens accrued by the `holder`.
  """
  calculateAccruedYield1(holder: String!): String

  """
  Returns the current, ongoing period number of the yield schedule.
  If the schedule has not yet started (`block.timestamp < startDate()`), this might return 0. If the schedule has ended (`block.timestamp >= endDate()`), this might return the total number of periods. Otherwise, it returns the 1-indexed number of the period that is currently in progress.
  The current period number (1-indexed), or 0 if not started / an indicator if ended.
  """
  currentPeriod: String

  """
  Returns the ERC20 token contract that is used for making yield payments.
  This is the actual token that holders will receive when they claim their yield. It can be the same as `token()` or a different token (e.g., a stablecoin).
  The `IERC20` compliant token contract address used for payments.
  """
  denominationAsset: String

  """
  Returns the timestamp representing the end date and time of the entire yield schedule.
  After this timestamp, no more yield will typically accrue or be distributed by this schedule.
  The Unix timestamp indicating when the yield schedule concludes.
  """
  endDate: String
  id: ID

  """
  Returns the duration of each distribution interval or period in seconds.
  For example, if yield is distributed daily, the interval would be `86400` seconds. This, along with `startDate` and `endDate`, defines the periodicity of the schedule.
  The length of each yield period in seconds.
  """
  interval: String

  """
  Returns the last period number for which a specific token holder has successfully claimed their yield.
  This is crucial for tracking individual claim statuses. If a holder has never claimed, this might return 0.
  The 1-indexed number of the last period claimed by the `holder`.
  """
  lastClaimedPeriod(holder: String!): String

  """
  Returns the last claimed period for the message sender (`_msgSender()`).
  Convenience function so callers don't have to pass their own address.
  The last period number (1-indexed) claimed by the caller.
  """
  lastClaimedPeriod2: String

  """
  Returns the most recent period number that has been fully completed and is eligible for yield claims.
  This indicates up to which period users can typically claim their accrued yield. If no periods have completed (e.g., `block.timestamp < periodEnd(1)`), this might return 0.
  The 1-indexed number of the last fully completed period.
  """
  lastCompletedPeriod: String

  """
  Returns the end timestamp for a specific yield distribution period.
  Periods are 1-indexed. Accessing `_periodEndTimestamps` requires 0-indexed access (`period - 1`).
  The Unix timestamp marking the end of the specified `period`.
  """
  periodEnd(period: String!): String

  """
  Returns the yield rate for the schedule.
  The interpretation of this rate (e.g., annual percentage rate, per period rate) and its precision (e.g., basis points) depends on the specific implementation of the schedule contract. For a fixed schedule, this rate is a key parameter in calculating yield per period.
  The configured yield rate (e.g., in basis points, where 100 basis points = 1%).
  """
  rate: String

  """
  Returns the Unix timestamp (seconds since epoch) when the yield schedule starts.
  This is an immutable value set in the constructor. It defines the beginning of the yield accrual period. This function fulfills the `startDate()` requirement from the `ISMARTFixedYieldSchedule` interface (which itself inherits it from `ISMARTYieldSchedule`).
  The Unix timestamp when the yield schedule starts.
  """
  startDate: String

  """
  Checks if this contract supports a given interface.
  Implementation of IERC165 interface detection.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the remaining time in seconds until the start of the next yield distribution period.
  If the schedule has not started, this could be time until `startDate()`. If the schedule is ongoing, this is the time left in the `currentPeriod()`. If the schedule has ended, this might return 0.
  The time in seconds until the next period begins or current period ends.
  """
  timeUntilNextPeriod: String

  """
  Returns the address of the SMART token contract for which this yield schedule is defined.
  The schedule contract needs to interact with this token contract to query historical balances (e.g., `balanceOfAt`) and total supplies (`totalSupplyAt`). The returned token contract should implement the `ISMARTYield` interface.
  The `ISMARTYield` compliant token contract address.
  """
  token: String

  """
  Calculates the total amount of yield that has been accrued by all token holders across all completed periods but has not yet been claimed.
  This calculation can be gas-intensive as it iterates through all completed periods and queries historical total supply for each. It assumes `_token.yieldBasisPerUnit(address(0))` provides a generic or representative basis if it varies by holder.
  The total sum of unclaimed yield tokens.
  """
  totalUnclaimedYield: String

  """
  Calculates the total amount of yield that will be required to cover all token holders for the next upcoming distribution period.
  This calculation uses the current total supply. For a more precise estimate if supply changes rapidly, one might need a more complex projection. Assumes a generic basis from `_token.yieldBasisPerUnit(address(0))`.
  The estimated total yield tokens needed for the next period's distribution.
  """
  totalYieldForNextPeriod: String
}

input SMARTFixedYieldScheduleLogicTopUpDenominationAssetInput {
  """
  The quantity of the `denominationAsset` to deposit into the schedule contract.
  """
  amount: String!
}

"""
Returns the transaction hash
"""
type SMARTFixedYieldScheduleLogicTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTFixedYieldScheduleLogicTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTFixedYieldScheduleLogicWithdrawAllDenominationAssetInput {
  """
  The address to which all `denominationAsset` tokens will be sent.
  """
  to: String!
}

input SMARTFixedYieldScheduleLogicWithdrawDenominationAssetInput {
  """
  The quantity of `denominationAsset` tokens to withdraw.
  """
  amount: String!

  """
  The address to which the withdrawn `denominationAsset` tokens will be sent.
  """
  to: String!
}

input SMARTFixedYieldScheduleTopUpDenominationAssetInput {
  """
  The quantity of the `denominationAsset` to deposit into the schedule contract.
  """
  amount: String!
}

"""
Returns the transaction hash
"""
type SMARTFixedYieldScheduleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTFixedYieldScheduleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type SMARTFixedYieldScheduleUpgradeable {
  """
  The denominator used for rate calculations (10,000 basis points = 100%).
  """
  RATE_BASIS_POINTS: String

  """
  Returns an array of all period end timestamps for this yield schedule.
  Each timestamp in the array marks the conclusion of a yield distribution period. The number of elements in this array corresponds to the total number of periods in the schedule. This is useful for understanding the full timeline of the yield schedule.
  An array of Unix timestamps, each representing the end of a distribution period.
  """
  allPeriods: [String!]

  """
  Calculates the total accrued yield for the message sender (`_msgSender()`), including any pro-rata share for the current period.
  Convenience function so callers don't have to pass their own address.
  The total accrued yield amount for the caller.
  """
  calculateAccruedYield: String

  """
  Calculates the total accrued yield for a specific token holder up to the current moment, including any pro-rata share for the ongoing period.
  Calculates yield for completed, unclaimed periods using historical balances (`balanceOfAt`). For the current, ongoing period, it calculates a pro-rata share based on the holder's current balance and time elapsed in the period.
  The total amount of yield tokens accrued by the `holder`.
  """
  calculateAccruedYield1(holder: String!): String

  """
  Returns the current, ongoing period number of the yield schedule.
  If the schedule has not yet started (`block.timestamp < startDate()`), this might return 0. If the schedule has ended (`block.timestamp >= endDate()`), this might return the total number of periods. Otherwise, it returns the 1-indexed number of the period that is currently in progress.
  The current period number (1-indexed), or 0 if not started / an indicator if ended.
  """
  currentPeriod: String

  """
  Returns the ERC20 token contract that is used for making yield payments.
  This is the actual token that holders will receive when they claim their yield. It can be the same as `token()` or a different token (e.g., a stablecoin).
  The `IERC20` compliant token contract address used for payments.
  """
  denominationAsset: String

  """
  Returns the timestamp representing the end date and time of the entire yield schedule.
  After this timestamp, no more yield will typically accrue or be distributed by this schedule.
  The Unix timestamp indicating when the yield schedule concludes.
  """
  endDate: String
  id: ID

  """
  Returns the duration of each distribution interval or period in seconds.
  For example, if yield is distributed daily, the interval would be `86400` seconds. This, along with `startDate` and `endDate`, defines the periodicity of the schedule.
  The length of each yield period in seconds.
  """
  interval: String

  """
  Returns the last period number for which a specific token holder has successfully claimed their yield.
  This is crucial for tracking individual claim statuses. If a holder has never claimed, this might return 0.
  The 1-indexed number of the last period claimed by the `holder`.
  """
  lastClaimedPeriod(holder: String!): String

  """
  Returns the last claimed period for the message sender (`_msgSender()`).
  Convenience function so callers don't have to pass their own address.
  The last period number (1-indexed) claimed by the caller.
  """
  lastClaimedPeriod2: String

  """
  Returns the most recent period number that has been fully completed and is eligible for yield claims.
  This indicates up to which period users can typically claim their accrued yield. If no periods have completed (e.g., `block.timestamp < periodEnd(1)`), this might return 0.
  The 1-indexed number of the last fully completed period.
  """
  lastCompletedPeriod: String

  """
  Returns the end timestamp for a specific yield distribution period.
  Periods are 1-indexed. Accessing `_periodEndTimestamps` requires 0-indexed access (`period - 1`).
  The Unix timestamp marking the end of the specified `period`.
  """
  periodEnd(period: String!): String

  """
  Returns the yield rate for the schedule.
  The interpretation of this rate (e.g., annual percentage rate, per period rate) and its precision (e.g., basis points) depends on the specific implementation of the schedule contract. For a fixed schedule, this rate is a key parameter in calculating yield per period.
  The configured yield rate (e.g., in basis points, where 100 basis points = 1%).
  """
  rate: String

  """
  Returns the Unix timestamp (seconds since epoch) when the yield schedule starts.
  This is an immutable value set in the constructor. It defines the beginning of the yield accrual period. This function fulfills the `startDate()` requirement from the `ISMARTFixedYieldSchedule` interface (which itself inherits it from `ISMARTYieldSchedule`).
  The Unix timestamp when the yield schedule starts.
  """
  startDate: String

  """
  Checks if this contract supports a given interface.
  Implementation of IERC165 interface detection.
  True if the interface is supported, false otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the remaining time in seconds until the start of the next yield distribution period.
  If the schedule has not started, this could be time until `startDate()`. If the schedule is ongoing, this is the time left in the `currentPeriod()`. If the schedule has ended, this might return 0.
  The time in seconds until the next period begins or current period ends.
  """
  timeUntilNextPeriod: String

  """
  Returns the address of the SMART token contract for which this yield schedule is defined.
  The schedule contract needs to interact with this token contract to query historical balances (e.g., `balanceOfAt`) and total supplies (`totalSupplyAt`). The returned token contract should implement the `ISMARTYield` interface.
  The `ISMARTYield` compliant token contract address.
  """
  token: String

  """
  Calculates the total amount of yield that has been accrued by all token holders across all completed periods but has not yet been claimed.
  This calculation can be gas-intensive as it iterates through all completed periods and queries historical total supply for each. It assumes `_token.yieldBasisPerUnit(address(0))` provides a generic or representative basis if it varies by holder.
  The total sum of unclaimed yield tokens.
  """
  totalUnclaimedYield: String

  """
  Calculates the total amount of yield that will be required to cover all token holders for the next upcoming distribution period.
  This calculation uses the current total supply. For a more precise estimate if supply changes rapidly, one might need a more complex projection. Assumes a generic basis from `_token.yieldBasisPerUnit(address(0))`.
  The estimated total yield tokens needed for the next period's distribution.
  """
  totalYieldForNextPeriod: String
}

input SMARTFixedYieldScheduleUpgradeableTopUpDenominationAssetInput {
  """
  The quantity of the `denominationAsset` to deposit into the schedule contract.
  """
  amount: String!
}

"""
Returns the transaction hash
"""
type SMARTFixedYieldScheduleUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTFixedYieldScheduleUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTFixedYieldScheduleUpgradeableWithdrawAllDenominationAssetInput {
  """
  The address to which all `denominationAsset` tokens will be sent.
  """
  to: String!
}

input SMARTFixedYieldScheduleUpgradeableWithdrawDenominationAssetInput {
  """
  The quantity of `denominationAsset` tokens to withdraw.
  """
  amount: String!

  """
  The address to which the withdrawn `denominationAsset` tokens will be sent.
  """
  to: String!
}

input SMARTFixedYieldScheduleWithdrawAllDenominationAssetInput {
  """
  The address to which all `denominationAsset` tokens will be sent.
  """
  to: String!
}

input SMARTFixedYieldScheduleWithdrawDenominationAssetInput {
  """
  The quantity of `denominationAsset` tokens to withdraw.
  """
  amount: String!

  """
  The address to which the withdrawn `denominationAsset` tokens will be sent.
  """
  to: String!
}

type SMARTHistoricalBalances {
  """
  Provides a EIP-5267 EIP-2771-compatible machine-readable description of the clock mechanism.
  For this implementation, it indicates that the `clock()` function uses `block.timestamp`.      This helps off-chain tools and other contracts understand how time is measured for checkpoints.
  clockMode A string literal "mode=timestamp".
  """
  CLOCK_MODE: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the token balance of `account` at a specific past `timepoint`.
  It uses `_balanceCheckpoints[account].upperLookupRecent()` from OpenZeppelin's `Checkpoints` library.      `upperLookupRecent` finds the checkpoint value at or before the given `timepoint`.      Reverts with `FutureLookup` error if `timepoint` is not in the past (i.e., >= `clock()`).      `timepoint` is cast to `uint48` to match the `Checkpoints` library's timestamp format.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String

  """
  Returns the current timepoint value used for creating new checkpoints.
  By default, this implementation uses `block.timestamp` (the timestamp of the current block)      casted to `uint48`. `uint48` is chosen by OpenZeppelin's `Checkpoints` as it's sufficient for      timestamps for many decades and saves storage.      This function can be overridden in derived contracts if a different time source (e.g., `block.number`)      is desired, but `block.timestamp` is generally preferred for time-based logic.
  uint48 The current timepoint (default: `block.timestamp` as `uint48`).
  """
  clock: Float

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTHistoricalBalancesComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTHistoricalBalancesComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTHistoricalBalancesIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTHistoricalBalancesOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Retrieves the total token supply at a specific past `timepoint`.
  Works similarly to `balanceOfAt`, using `_totalSupplyCheckpoints.upperLookupRecent()`.      Reverts with `FutureLookup` for non-past timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String
}

input SMARTHistoricalBalancesAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTHistoricalBalancesApproveInput {
  spender: String!
  value: String!
}

input SMARTHistoricalBalancesBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTHistoricalBalancesBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTHistoricalBalancesComplianceModulesOutput {
  modulesList: [SMARTHistoricalBalancesModulesListComplianceModulesOutput!]
}

type SMARTHistoricalBalancesComplianceOutput {
  complianceContract: String
}

type SMARTHistoricalBalancesIdentityRegistryOutput {
  registryContract: String
}

input SMARTHistoricalBalancesMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTHistoricalBalancesModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTHistoricalBalancesOnchainIDOutput {
  idAddress: String
}

input SMARTHistoricalBalancesRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTHistoricalBalancesRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTHistoricalBalancesRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTHistoricalBalancesSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTHistoricalBalancesSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTHistoricalBalancesSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTHistoricalBalancesSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTHistoricalBalancesTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTHistoricalBalancesTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTHistoricalBalancesTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTHistoricalBalancesTransferInput {
  to: String!
  value: String!
}

type SMARTHistoricalBalancesUpgradeable {
  """
  Provides a EIP-5267 EIP-2771-compatible machine-readable description of the clock mechanism.
  For this implementation, it indicates that the `clock()` function uses `block.timestamp`.      This helps off-chain tools and other contracts understand how time is measured for checkpoints.
  clockMode A string literal "mode=timestamp".
  """
  CLOCK_MODE: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the token balance of `account` at a specific past `timepoint`.
  It uses `_balanceCheckpoints[account].upperLookupRecent()` from OpenZeppelin's `Checkpoints` library.      `upperLookupRecent` finds the checkpoint value at or before the given `timepoint`.      Reverts with `FutureLookup` error if `timepoint` is not in the past (i.e., >= `clock()`).      `timepoint` is cast to `uint48` to match the `Checkpoints` library's timestamp format.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String

  """
  Returns the current timepoint value used for creating new checkpoints.
  By default, this implementation uses `block.timestamp` (the timestamp of the current block)      casted to `uint48`. `uint48` is chosen by OpenZeppelin's `Checkpoints` as it's sufficient for      timestamps for many decades and saves storage.      This function can be overridden in derived contracts if a different time source (e.g., `block.number`)      is desired, but `block.timestamp` is generally preferred for time-based logic.
  uint48 The current timepoint (default: `block.timestamp` as `uint48`).
  """
  clock: Float

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTHistoricalBalancesUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTHistoricalBalancesUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTHistoricalBalancesUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTHistoricalBalancesUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Retrieves the total token supply at a specific past `timepoint`.
  Works similarly to `balanceOfAt`, using `_totalSupplyCheckpoints.upperLookupRecent()`.      Reverts with `FutureLookup` for non-past timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String
}

input SMARTHistoricalBalancesUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTHistoricalBalancesUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTHistoricalBalancesUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTHistoricalBalancesUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTHistoricalBalancesUpgradeableComplianceModulesOutput {
  modulesList: [SMARTHistoricalBalancesUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTHistoricalBalancesUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTHistoricalBalancesUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTHistoricalBalancesUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTHistoricalBalancesUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTHistoricalBalancesUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTHistoricalBalancesUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTHistoricalBalancesUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTHistoricalBalancesUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTHistoricalBalancesUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTHistoricalBalancesUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTHistoricalBalancesUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTHistoricalBalancesUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTHistoricalBalancesUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTHistoricalBalancesUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTHistoricalBalancesUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTHistoricalBalancesUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTHooks {
  id: ID
}

"""
Returns the transaction hash
"""
type SMARTHooksTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTHooksTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

type SMARTIdentityVerificationComplianceModule {
  id: ID

  """
  Indicates whether any particular address is the trusted forwarder.
  """
  isTrustedForwarder(forwarder: String!): Boolean

  """
  Concrete compliance modules MUST implement this function to return a human-readable name for the module.
  This function is used to identify the type or purpose of the compliance module. For example, "Country Allow List Module". It should be a `pure` function as the name is typically hardcoded and doesn't depend on state.
  A string representing the name of the compliance module.
  """
  name: String

  """
  Checks if the contract supports a given interface ID.
  This function is part of the ERC165 standard, allowing other contracts to discover what interfaces this contract implements. It explicitly states that this module (and any inheriting contract) supports the `ISMARTComplianceModule` interface.
  `true` if the contract supports the `interfaceId`, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the address of the trusted forwarder.
  """
  trustedForwarder: String

  """
  Returns a unique identifier for the type of this contract.
  """
  typeId: String
}

input SMARTIdentityVerificationComplianceModuleCreatedInput {
  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address that received the newly created tokens.
  """
  _to: String!

  """
  The address of the `ISMART` token contract where tokens were created.
  """
  _token: String!

  """
  The amount of tokens created.
  """
  _value: String!
}

input SMARTIdentityVerificationComplianceModuleDestroyedInput {
  """
  The address whose tokens were destroyed.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address of the `ISMART` token contract from which tokens were destroyed.
  """
  _token: String!

  """
  The amount of tokens destroyed.
  """
  _value: String!
}

"""
Returns the transaction hash
"""
type SMARTIdentityVerificationComplianceModuleTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTIdentityVerificationComplianceModuleTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTIdentityVerificationComplianceModuleTransferredInput {
  """
  The address from which tokens were transferred.
  """
  _from: String!

  """
  The parameters that were configured for this module when it was added to the `_token`.
  """
  _params: String!

  """
  The address to which tokens were transferred.
  """
  _to: String!

  """
  The address of the `ISMART` token contract that performed the transfer.
  """
  _token: String!

  """
  The amount of tokens transferred.
  """
  _value: String!
}

input SMARTMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

type SMARTPausable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTPausableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTPausableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTPausableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTPausableOnchainIDOutput

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  Reads the private `_paused` state variable.
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTPausableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTPausableApproveInput {
  spender: String!
  value: String!
}

input SMARTPausableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTPausableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTPausableComplianceModulesOutput {
  modulesList: [SMARTPausableModulesListComplianceModulesOutput!]
}

type SMARTPausableComplianceOutput {
  complianceContract: String
}

type SMARTPausableIdentityRegistryOutput {
  registryContract: String
}

input SMARTPausableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTPausableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTPausableOnchainIDOutput {
  idAddress: String
}

input SMARTPausableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTPausableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTPausableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTPausableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTPausableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTPausableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTPausableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTPausableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTPausableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTPausableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTPausableTransferInput {
  to: String!
  value: String!
}

type SMARTPausableUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTPausableUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTPausableUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTPausableUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTPausableUpgradeableOnchainIDOutput

  """
  Returns `true` if the contract is currently paused, and `false` otherwise.
  Reads the private `_paused` state variable.
  bool The current paused state of the contract.
  """
  paused: Boolean

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTPausableUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTPausableUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTPausableUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTPausableUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTPausableUpgradeableComplianceModulesOutput {
  modulesList: [SMARTPausableUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTPausableUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTPausableUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTPausableUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTPausableUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTPausableUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTPausableUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTPausableUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTPausableUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTPausableUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTPausableUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTPausableUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTPausableUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTPausableUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTPausableUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTPausableUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTPausableUpgradeableTransferInput {
  to: String!
  value: String!
}

input SMARTRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  lostWallet: String!
}

type SMARTRedeemable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTRedeemableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTRedeemableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTRedeemableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTRedeemableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTRedeemableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTRedeemableApproveInput {
  spender: String!
  value: String!
}

input SMARTRedeemableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTRedeemableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTRedeemableComplianceModulesOutput {
  modulesList: [SMARTRedeemableModulesListComplianceModulesOutput!]
}

type SMARTRedeemableComplianceOutput {
  complianceContract: String
}

type SMARTRedeemableIdentityRegistryOutput {
  registryContract: String
}

input SMARTRedeemableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTRedeemableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTRedeemableOnchainIDOutput {
  idAddress: String
}

input SMARTRedeemableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTRedeemableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTRedeemableRedeemInput {
  """
  The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.
  """
  amount: String!
}

input SMARTRedeemableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTRedeemableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTRedeemableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTRedeemableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTRedeemableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTRedeemableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTRedeemableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTRedeemableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTRedeemableTransferInput {
  to: String!
  value: String!
}

type SMARTRedeemableUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTRedeemableUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTRedeemableUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTRedeemableUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTRedeemableUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTRedeemableUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTRedeemableUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTRedeemableUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTRedeemableUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTRedeemableUpgradeableComplianceModulesOutput {
  modulesList: [SMARTRedeemableUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTRedeemableUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTRedeemableUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTRedeemableUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTRedeemableUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTRedeemableUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTRedeemableUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTRedeemableUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTRedeemableUpgradeableRedeemInput {
  """
  The quantity of tokens the caller wishes to redeem. Must be less than or equal to the caller's balance.
  """
  amount: String!
}

input SMARTRedeemableUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTRedeemableUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTRedeemableUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTRedeemableUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTRedeemableUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTRedeemableUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTRedeemableUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTRedeemableUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTRedeemableUpgradeableTransferInput {
  to: String!
  value: String!
}

input SMARTRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

type SMARTTokenAccessManaged {
  """
  Returns the address of the current `SMARTTokenAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTTokenAccessManagedComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTTokenAccessManagedComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTTokenAccessManagedIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTTokenAccessManagedOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTTokenAccessManagedAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTTokenAccessManagedApproveInput {
  spender: String!
  value: String!
}

input SMARTTokenAccessManagedBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTTokenAccessManagedBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTTokenAccessManagedComplianceModulesOutput {
  modulesList: [SMARTTokenAccessManagedModulesListComplianceModulesOutput!]
}

type SMARTTokenAccessManagedComplianceOutput {
  complianceContract: String
}

type SMARTTokenAccessManagedIdentityRegistryOutput {
  registryContract: String
}

input SMARTTokenAccessManagedMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTTokenAccessManagedModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTTokenAccessManagedOnchainIDOutput {
  idAddress: String
}

input SMARTTokenAccessManagedRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTTokenAccessManagedRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTTokenAccessManagedRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTTokenAccessManagedSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTTokenAccessManagedSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTTokenAccessManagedSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTTokenAccessManagedSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTTokenAccessManagedTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTTokenAccessManagedTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTTokenAccessManagedTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTTokenAccessManagedTransferInput {
  to: String!
  value: String!
}

type SMARTTokenAccessManagedUpgradeable {
  """
  Returns the address of the current `SMARTTokenAccessManager`.
  This is an external view function, meaning it can be called from outside the      contract without consuming gas (if called via a node's RPC) and it does not      modify the contract's state.
  The address of the `_accessManager`.
  """
  accessManager: String

  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTTokenAccessManagedUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTTokenAccessManagedUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int

  """
  Checks if a given account has a specific role, as defined by the `_accessManager`.
  This function implements the `ISMARTTokenAccessManaged` interface.      It delegates the actual role check to the `hasRole` function of the `_accessManager` contract.      The `virtual` keyword means that this function can be overridden by inheriting contracts.
  hasRole_ `true` if the account has the role, `false` otherwise.
  """
  hasRole(account: String!, role: String!): Boolean
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTTokenAccessManagedUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTTokenAccessManagedUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTTokenAccessManagedUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTTokenAccessManagedUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTTokenAccessManagedUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTTokenAccessManagedUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTTokenAccessManagedUpgradeableComplianceModulesOutput {
  modulesList: [SMARTTokenAccessManagedUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTTokenAccessManagedUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTTokenAccessManagedUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTTokenAccessManagedUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTTokenAccessManagedUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTTokenAccessManagedUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTTokenAccessManagedUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTTokenAccessManagedUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTTokenAccessManagedUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTTokenAccessManagedUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTTokenAccessManagedUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTTokenAccessManagedUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTTokenAccessManagedUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTTokenAccessManagedUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTTokenAccessManagedUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTTokenAccessManagedUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTTokenAccessManagedUpgradeableTransferInput {
  to: String!
  value: String!
}

"""
Returns the transaction hash
"""
type SMARTTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTTransferInput {
  """
  The amount of tokens to transfer.
  """
  amount: String!

  """
  The recipient address.
  """
  to: String!
}

"""
Returns a list of all active compliance modules and their current parameters.
Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
"""
type SMARTTuple0ComplianceModulesOutput {
  module: String
  params: String
}

type SMARTUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the `ISMARTCompliance` contract instance used by this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  ISMARTCompliance The current compliance contract.
  """
  compliance: String

  """
  Returns a list of all active compliance modules and their current parameters.
  Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
  SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
  """
  complianceModules: [SMARTUpgradeableTuple0ComplianceModulesOutput!]

  """
  Returns the number of decimals for the token.
  Overrides `ERC20Upgradeable.decimals` and `IERC20Metadata.decimals`.      Retrieves `__decimals` from `_SMARTLogic`'s state.
  uint8 The number of decimals.
  """
  decimals: Int
  id: ID

  """
  Returns the `ISMARTIdentityRegistry` contract instance used by this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  ISMARTIdentityRegistry The current identity registry contract.
  """
  identityRegistry: String

  """
  Returns the name of the token.
  """
  name: String

  """
  Returns the on-chain ID address associated with this token.
  This can represent the token issuer or the token entity.
  address The current on-chain ID address.
  """
  onchainID: String

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Standard ERC165 function to check interface support in an upgradeable context.
  Combines SMART-specific interface checks (via `__smart_supportsInterface` from `_SMARTLogic`)      with OpenZeppelin's `ERC165Upgradeable.supportsInterface`.      This ensures that interfaces registered by SMART extensions, the core `ISMART` interface, and      standard interfaces like `IERC165Upgradeable` are correctly reported.
  bool `true` if the interface is supported, `false` otherwise.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String
}

input SMARTUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTUpgradeableBatchTransferInput {
  """
  An array of corresponding token amounts.
  """
  amounts: [String!]!

  """
  An array of recipient addresses.
  """
  toList: [String!]!
}

input SMARTUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

input SMARTUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  lostWallet: String!
}

input SMARTUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

"""
Returns the transaction hash
"""
type SMARTUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTUpgradeableTransferInput {
  """
  The amount of tokens to transfer.
  """
  amount: String!

  """
  The recipient address.
  """
  to: String!
}

"""
Returns a list of all active compliance modules and their current parameters.
Iterates through `__complianceModuleList` and constructs an array of `SMARTComplianceModuleParamPair` structs.
SMARTComplianceModuleParamPair[] memory An array of module-parameter pairs.
"""
type SMARTUpgradeableTuple0ComplianceModulesOutput {
  module: String
  params: String
}

type SMARTYield {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the token balance of a specific `account` at a given `timepoint`.
  The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTYieldComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTYieldComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTYieldIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTYieldOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the total token supply at a given `timepoint`.
  Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String

  """
  Returns the basis amount used to calculate yield per single unit of the token (e.g., per 1 token with 18 decimals).
  The "yield basis" is a fundamental value upon which yield calculations are performed. For example: - For a bond-like token, this might be its face value (e.g., 100 USD). - For an equity-like token, it might be its nominal value or a value derived from an oracle. This function allows the basis to be specific to a `holder`, enabling scenarios where different holders might have different yield bases (though often it will be a global value, in which case `holder` might be ignored). The returned value is typically a raw number (e.g., if basis is $100 and token has 2 decimals, this might return 10000).
  The amount (in the smallest unit of the basis currency/asset) per single unit of the token, used for yield calculations.
  """
  yieldBasisPerUnit(holder: String!): SMARTYieldYieldBasisPerUnitOutput

  """
  The address of the smart contract that defines the yield schedule for this token.
  """
  yieldSchedule: String

  """
  Returns the ERC20 token contract that is used for paying out the yield.
  Yield can be paid in the token itself or in a different token (e.g., a stablecoin). This function specifies which ERC20 token will be transferred to holders when they claim their accrued yield.
  An `IERC20` interface instance representing the token used for yield payments.
  """
  yieldToken: SMARTYieldYieldTokenOutput
}

input SMARTYieldAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTYieldApproveInput {
  spender: String!
  value: String!
}

input SMARTYieldBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTYieldBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTYieldComplianceModulesOutput {
  modulesList: [SMARTYieldModulesListComplianceModulesOutput!]
}

type SMARTYieldComplianceOutput {
  complianceContract: String
}

type SMARTYieldIdentityRegistryOutput {
  registryContract: String
}

input SMARTYieldMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTYieldModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTYieldOnchainIDOutput {
  idAddress: String
}

input SMARTYieldRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTYieldRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTYieldRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTYieldSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTYieldSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTYieldSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTYieldSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

input SMARTYieldSetYieldScheduleInput {
  """
  The address of the smart contract that defines the yield schedule. This contract must adhere to `ISMARTYieldSchedule`.
  """
  schedule: String!
}

"""
Returns the transaction hash
"""
type SMARTYieldTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTYieldTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTYieldTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTYieldTransferInput {
  to: String!
  value: String!
}

type SMARTYieldUpgradeable {
  """
  Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.
  """
  allowance(owner: String!, spender: String!): String

  """
  Returns the value of tokens owned by `account`.
  """
  balanceOf(account: String!): String

  """
  Returns the token balance of a specific `account` at a given `timepoint`.
  The `timepoint` usually refers to a block number in the past. Implementations should revert      if a `timepoint` in the future (or the current timepoint) is queried.      `view` functions do not modify state and do not consume gas when called externally.
  uint256 The token balance of `account` at the specified `timepoint`.
  """
  balanceOfAt(account: String!, timepoint: String!): String

  """
  Retrieves the address of the main `ISMARTCompliance` contract currently configured for this token.
  The Compliance contract is responsible for orchestrating compliance checks for token operations.
  The `ISMARTCompliance` contract instance currently in use.
  """
  compliance: SMARTYieldUpgradeableComplianceOutput

  """
  Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
  Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
  An array of `SMARTComplianceModuleParamPair` structs.
  """
  complianceModules: SMARTYieldUpgradeableComplianceModulesOutput

  """
  Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
  """
  decimals: Int
  id: ID

  """
  Retrieves the address of the `ISMARTIdentityRegistry` contract currently configured for this token.
  The Identity Registry is used for verifying token holders against required claims and linking wallets to identities.
  The `ISMARTIdentityRegistry` contract instance currently in use.
  """
  identityRegistry: SMARTYieldUpgradeableIdentityRegistryOutput

  """
  Returns the name of the token.
  """
  name: String

  """
  Retrieves the optional on-chain identifier (e.g., an `IIdentity` contract) associated with the token contract itself.
  This can represent the token issuer or the token entity.
  The address of the on-chain ID contract, or `address(0)` if no on-chain ID is set for the token.
  """
  onchainID: SMARTYieldUpgradeableOnchainIDOutput

  """
  Returns an array of all registered interface IDs.
  This function allows external contracts and users to discover all interfaces      that this contract claims to support. This is useful for introspection and      automated interface detection.
  An array of `bytes4` interface identifiers that have been registered.
  """
  registeredInterfaces: [String!]

  """
  Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
  """
  supportsInterface(interfaceId: String!): Boolean

  """
  Returns the symbol of the token, usually a shorter version of the name.
  """
  symbol: String

  """
  Returns the value of tokens in existence.
  """
  totalSupply: String

  """
  Returns the total token supply at a given `timepoint`.
  Similar to `balanceOfAt`, `timepoint` refers to a past block number. Implementations should      revert for future or current timepoints.
  uint256 The total token supply at the specified `timepoint`.
  """
  totalSupplyAt(timepoint: String!): String

  """
  Returns the basis amount used to calculate yield per single unit of the token (e.g., per 1 token with 18 decimals).
  The "yield basis" is a fundamental value upon which yield calculations are performed. For example: - For a bond-like token, this might be its face value (e.g., 100 USD). - For an equity-like token, it might be its nominal value or a value derived from an oracle. This function allows the basis to be specific to a `holder`, enabling scenarios where different holders might have different yield bases (though often it will be a global value, in which case `holder` might be ignored). The returned value is typically a raw number (e.g., if basis is $100 and token has 2 decimals, this might return 10000).
  The amount (in the smallest unit of the basis currency/asset) per single unit of the token, used for yield calculations.
  """
  yieldBasisPerUnit(
    holder: String!
  ): SMARTYieldUpgradeableYieldBasisPerUnitOutput

  """
  The address of the smart contract that defines the yield schedule for this token.
  """
  yieldSchedule: String

  """
  Returns the ERC20 token contract that is used for paying out the yield.
  Yield can be paid in the token itself or in a different token (e.g., a stablecoin). This function specifies which ERC20 token will be transferred to holders when they claim their accrued yield.
  An `IERC20` interface instance representing the token used for yield payments.
  """
  yieldToken: SMARTYieldUpgradeableYieldTokenOutput
}

input SMARTYieldUpgradeableAddComplianceModuleInput {
  """
  The address of the compliance module contract to add.
  """
  _module: String!

  """
  The initial ABI-encoded configuration parameters for this module specific to this token.
  """
  _params: String!
}

input SMARTYieldUpgradeableApproveInput {
  spender: String!
  value: String!
}

input SMARTYieldUpgradeableBatchMintInput {
  """
  An array of corresponding token quantities to mint for each address in `_toList`. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the newly minted tokens.
  """
  _toList: [String!]!
}

input SMARTYieldUpgradeableBatchTransferInput {
  """
  An array of corresponding token quantities to transfer. The lengths of `_toList` and `_amounts` MUST be equal.
  """
  _amounts: [String!]!

  """
  An array of addresses to receive the tokens.
  """
  _toList: [String!]!
}

type SMARTYieldUpgradeableComplianceModulesOutput {
  modulesList: [SMARTYieldUpgradeableModulesListComplianceModulesOutput!]
}

type SMARTYieldUpgradeableComplianceOutput {
  complianceContract: String
}

type SMARTYieldUpgradeableIdentityRegistryOutput {
  registryContract: String
}

input SMARTYieldUpgradeableMintInput {
  """
  The quantity of tokens to mint.
  """
  _amount: String!

  """
  The address that will receive the newly minted tokens.
  """
  _to: String!
}

"""
Retrieves a list of all currently active compliance modules for this token, along with their configuration parameters.
Each element in the returned array is a `SMARTComplianceModuleParamPair` struct, containing the module's address      and its current ABI-encoded parameters specific to this token.
An array of `SMARTComplianceModuleParamPair` structs.
"""
type SMARTYieldUpgradeableModulesListComplianceModulesOutput {
  module: String
  params: String
}

type SMARTYieldUpgradeableOnchainIDOutput {
  idAddress: String
}

input SMARTYieldUpgradeableRecoverERC20Input {
  """
  The quantity of the `token` to recover and send to `to`.
  """
  amount: String!

  """
  The address where the recovered tokens will be sent.
  """
  to: String!

  """
  The contract address of the ERC20 token to be recovered. This MUST NOT be `address(this)`.
  """
  token: String!
}

input SMARTYieldUpgradeableRecoverTokensInput {
  """
  The address of the lost wallet containing tokens to recover.
  """
  _lostWallet: String!
}

input SMARTYieldUpgradeableRemoveComplianceModuleInput {
  """
  The address of the compliance module contract to remove.
  """
  _module: String!
}

input SMARTYieldUpgradeableSetComplianceInput {
  """
  The address of the new `ISMARTCompliance` contract. Must not be `address(0)`.
  """
  _compliance: String!
}

input SMARTYieldUpgradeableSetIdentityRegistryInput {
  """
  The address of the new `ISMARTIdentityRegistry` contract. Must not be `address(0)`.
  """
  _identityRegistry: String!
}

input SMARTYieldUpgradeableSetOnchainIDInput {
  """
  The address of the on-chain ID contract. Pass `address(0)` to remove an existing ID.
  """
  _onchainID: String!
}

input SMARTYieldUpgradeableSetParametersForComplianceModuleInput {
  """
  The address of the compliance module (must be an active module for this token).
  """
  _module: String!

  """
  The new ABI-encoded configuration parameters for the module.
  """
  _params: String!
}

input SMARTYieldUpgradeableSetYieldScheduleInput {
  """
  The address of the smart contract that defines the yield schedule. This contract must adhere to `ISMARTYieldSchedule`.
  """
  schedule: String!
}

"""
Returns the transaction hash
"""
type SMARTYieldUpgradeableTransactionOutput {
  transactionHash: String
}

"""
Returns the transaction receipt
"""
type SMARTYieldUpgradeableTransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

input SMARTYieldUpgradeableTransferFromInput {
  from: String!
  to: String!
  value: String!
}

input SMARTYieldUpgradeableTransferInput {
  to: String!
  value: String!
}

type SMARTYieldUpgradeableYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type SMARTYieldUpgradeableYieldTokenOutput {
  paymentToken: String
}

type SMARTYieldYieldBasisPerUnitOutput {
  basisPerUnit: String
}

type SMARTYieldYieldTokenOutput {
  paymentToken: String
}

input SecretCodesSettingsInput {
  """
  The name of the secret codes verification
  """
  name: String!
}

type Subscription {
  """
  Get all contracts with their deployment status
  """
  getContractsDeployStatus(
    """
    The name of the ABIs to filter by
    """
    abiNames: [String!]

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractAddressListComplianceModule ABI
  """
  getContractsDeployStatusAbstractAddressListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKSystemAddonFactoryImplementation ABI
  """
  getContractsDeployStatusAbstractAtkSystemAddonFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKSystemProxy ABI
  """
  getContractsDeployStatusAbstractAtkSystemProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractATKTokenFactoryImplementation ABI
  """
  getContractsDeployStatusAbstractAtkTokenFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractComplianceModule ABI
  """
  getContractsDeployStatusAbstractComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractCountryComplianceModule ABI
  """
  getContractsDeployStatusAbstractCountryComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AbstractIdentityComplianceModule ABI
  """
  getContractsDeployStatusAbstractIdentityComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the AddressBlockListComplianceModule ABI
  """
  getContractsDeployStatusAddressBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAirdrop ABI
  """
  getContractsDeployStatusAtkAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAmountClaimTracker ABI
  """
  getContractsDeployStatusAtkAmountClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAssetProxy ABI
  """
  getContractsDeployStatusAtkAssetProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKAssetRoles ABI
  """
  getContractsDeployStatusAtkAssetRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBitmapClaimTracker ABI
  """
  getContractsDeployStatusAtkBitmapClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondFactoryImplementation ABI
  """
  getContractsDeployStatusAtkBondFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondImplementation ABI
  """
  getContractsDeployStatusAtkBondImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKBondProxy ABI
  """
  getContractsDeployStatusAtkBondProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceImplementation ABI
  """
  getContractsDeployStatusAtkComplianceImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKComplianceModuleRegistryImplementation ABI
  """
  getContractsDeployStatusAtkComplianceModuleRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKContractIdentityImplementation ABI
  """
  getContractsDeployStatusAtkContractIdentityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKContractIdentityProxy ABI
  """
  getContractsDeployStatusAtkContractIdentityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositFactoryImplementation ABI
  """
  getContractsDeployStatusAtkDepositFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositImplementation ABI
  """
  getContractsDeployStatusAtkDepositImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKDepositProxy ABI
  """
  getContractsDeployStatusAtkDepositProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkEquityFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityImplementation ABI
  """
  getContractsDeployStatusAtkEquityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKEquityProxy ABI
  """
  getContractsDeployStatusAtkEquityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldProxy ABI
  """
  getContractsDeployStatusAtkFixedYieldProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldScheduleFactoryImplementation ABI
  """
  getContractsDeployStatusAtkFixedYieldScheduleFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFixedYieldScheduleUpgradeable ABI
  """
  getContractsDeployStatusAtkFixedYieldScheduleUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKForwarder ABI
  """
  getContractsDeployStatusAtkForwarder(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundFactoryImplementation ABI
  """
  getContractsDeployStatusAtkFundFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundImplementation ABI
  """
  getContractsDeployStatusAtkFundImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKFundProxy ABI
  """
  getContractsDeployStatusAtkFundProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityFactoryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityImplementation ABI
  """
  getContractsDeployStatusAtkIdentityImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityProxy ABI
  """
  getContractsDeployStatusAtkIdentityProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKIdentityRegistryStorageImplementation ABI
  """
  getContractsDeployStatusAtkIdentityRegistryStorageImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKLinearVestingStrategy ABI
  """
  getContractsDeployStatusAtkLinearVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPeopleRoles ABI
  """
  getContractsDeployStatusAtkPeopleRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPushAirdropFactoryImplementation ABI
  """
  getContractsDeployStatusAtkPushAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPushAirdropImplementation ABI
  """
  getContractsDeployStatusAtkPushAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKPushAirdropProxy ABI
  """
  getContractsDeployStatusAtkPushAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKRoles ABI
  """
  getContractsDeployStatusAtkRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinFactoryImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinImplementation ABI
  """
  getContractsDeployStatusAtkStableCoinImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKStableCoinProxy ABI
  """
  getContractsDeployStatusAtkStableCoinProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemAccessManaged ABI
  """
  getContractsDeployStatusAtkSystemAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemAccessManagerImplementation ABI
  """
  getContractsDeployStatusAtkSystemAccessManagerImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemAddonRegistryImplementation ABI
  """
  getContractsDeployStatusAtkSystemAddonRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemFactory ABI
  """
  getContractsDeployStatusAtkSystemFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemImplementation ABI
  """
  getContractsDeployStatusAtkSystemImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKSystemRoles ABI
  """
  getContractsDeployStatusAtkSystemRoles(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTimeBoundAirdropFactoryImplementation ABI
  """
  getContractsDeployStatusAtkTimeBoundAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTimeBoundAirdropImplementation ABI
  """
  getContractsDeployStatusAtkTimeBoundAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTimeBoundAirdropProxy ABI
  """
  getContractsDeployStatusAtkTimeBoundAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerImplementation ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenAccessManagerProxy ABI
  """
  getContractsDeployStatusAtkTokenAccessManagerProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenFactoryRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTokenFactoryRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenSale ABI
  """
  getContractsDeployStatusAtkTokenSale(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenSaleFactory ABI
  """
  getContractsDeployStatusAtkTokenSaleFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTokenSaleProxy ABI
  """
  getContractsDeployStatusAtkTokenSaleProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopicSchemeRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTopicSchemeRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTopics ABI
  """
  getContractsDeployStatusAtkTopics(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTrustedIssuersRegistryImplementation ABI
  """
  getContractsDeployStatusAtkTrustedIssuersRegistryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKTypedImplementationProxy ABI
  """
  getContractsDeployStatusAtkTypedImplementationProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVault ABI
  """
  getContractsDeployStatusAtkVault(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVaultFactoryImplementation ABI
  """
  getContractsDeployStatusAtkVaultFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVestingAirdropFactoryImplementation ABI
  """
  getContractsDeployStatusAtkVestingAirdropFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVestingAirdropImplementation ABI
  """
  getContractsDeployStatusAtkVestingAirdropImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKVestingAirdropProxy ABI
  """
  getContractsDeployStatusAtkVestingAirdropProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKXvPSettlementFactoryImplementation ABI
  """
  getContractsDeployStatusAtkXvPSettlementFactoryImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKXvPSettlementImplementation ABI
  """
  getContractsDeployStatusAtkXvPSettlementImplementation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ATKXvPSettlementProxy ABI
  """
  getContractsDeployStatusAtkXvPSettlementProxy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ClaimAuthorizationExtension ABI
  """
  getContractsDeployStatusClaimAuthorizationExtension(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryAllowListComplianceModule ABI
  """
  getContractsDeployStatusCountryAllowListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the CountryBlockListComplianceModule ABI
  """
  getContractsDeployStatusCountryBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC734 ABI
  """
  getContractsDeployStatusErc734(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC734KeyPurposes ABI
  """
  getContractsDeployStatusErc734KeyPurposes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC734KeyTypes ABI
  """
  getContractsDeployStatusErc734KeyTypes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC735 ABI
  """
  getContractsDeployStatusErc735(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ERC735ClaimSchemes ABI
  """
  getContractsDeployStatusErc735ClaimSchemes(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IClaimAuthorizer ABI
  """
  getContractsDeployStatusIClaimAuthorizer(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IContractIdentity ABI
  """
  getContractsDeployStatusIContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IContractWithIdentity ABI
  """
  getContractsDeployStatusIContractWithIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IWithTypeIdentifier ABI
  """
  getContractsDeployStatusIWithTypeIdentifier(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKAirdrop ABI
  """
  getContractsDeployStatusIatkAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKBond ABI
  """
  getContractsDeployStatusIatkBond(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKBondFactory ABI
  """
  getContractsDeployStatusIatkBondFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKClaimTracker ABI
  """
  getContractsDeployStatusIatkClaimTracker(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKCompliance ABI
  """
  getContractsDeployStatusIatkCompliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKComplianceModuleRegistry ABI
  """
  getContractsDeployStatusIatkComplianceModuleRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKContractIdentity ABI
  """
  getContractsDeployStatusIatkContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKDeposit ABI
  """
  getContractsDeployStatusIatkDeposit(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKDepositFactory ABI
  """
  getContractsDeployStatusIatkDepositFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKEquity ABI
  """
  getContractsDeployStatusIatkEquity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKEquityFactory ABI
  """
  getContractsDeployStatusIatkEquityFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFixedYieldScheduleFactory ABI
  """
  getContractsDeployStatusIatkFixedYieldScheduleFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFund ABI
  """
  getContractsDeployStatusIatkFund(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKFundFactory ABI
  """
  getContractsDeployStatusIatkFundFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentity ABI
  """
  getContractsDeployStatusIatkIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityFactory ABI
  """
  getContractsDeployStatusIatkIdentityFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityRegistry ABI
  """
  getContractsDeployStatusIatkIdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKIdentityRegistryStorage ABI
  """
  getContractsDeployStatusIatkIdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKLinearVestingStrategy ABI
  """
  getContractsDeployStatusIatkLinearVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKPushAirdrop ABI
  """
  getContractsDeployStatusIatkPushAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKPushAirdropFactory ABI
  """
  getContractsDeployStatusIatkPushAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoin ABI
  """
  getContractsDeployStatusIatkStableCoin(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKStableCoinFactory ABI
  """
  getContractsDeployStatusIatkStableCoinFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystem ABI
  """
  getContractsDeployStatusIatkSystem(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemAccessManaged ABI
  """
  getContractsDeployStatusIatkSystemAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemAccessManager ABI
  """
  getContractsDeployStatusIatkSystemAccessManager(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemAddonRegistry ABI
  """
  getContractsDeployStatusIatkSystemAddonRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKSystemFactory ABI
  """
  getContractsDeployStatusIatkSystemFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTimeBoundAirdrop ABI
  """
  getContractsDeployStatusIatkTimeBoundAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTimeBoundAirdropFactory ABI
  """
  getContractsDeployStatusIatkTimeBoundAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenFactory ABI
  """
  getContractsDeployStatusIatkTokenFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenFactoryRegistry ABI
  """
  getContractsDeployStatusIatkTokenFactoryRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTokenSale ABI
  """
  getContractsDeployStatusIatkTokenSale(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTopicSchemeRegistry ABI
  """
  getContractsDeployStatusIatkTopicSchemeRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTrustedIssuersRegistry ABI
  """
  getContractsDeployStatusIatkTrustedIssuersRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKTypedImplementationRegistry ABI
  """
  getContractsDeployStatusIatkTypedImplementationRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVaultFactory ABI
  """
  getContractsDeployStatusIatkVaultFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVestingAirdrop ABI
  """
  getContractsDeployStatusIatkVestingAirdrop(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVestingAirdropFactory ABI
  """
  getContractsDeployStatusIatkVestingAirdropFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKVestingStrategy ABI
  """
  getContractsDeployStatusIatkVestingStrategy(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKXvPSettlement ABI
  """
  getContractsDeployStatusIatkXvPSettlement(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IATKXvPSettlementFactory ABI
  """
  getContractsDeployStatusIatkXvPSettlementFactory(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IdentityAllowListComplianceModule ABI
  """
  getContractsDeployStatusIdentityAllowListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IdentityBlockListComplianceModule ABI
  """
  getContractsDeployStatusIdentityBlockListComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643 ABI
  """
  getContractsDeployStatusIerc3643(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643ClaimTopicsRegistry ABI
  """
  getContractsDeployStatusIerc3643ClaimTopicsRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643Compliance ABI
  """
  getContractsDeployStatusIerc3643Compliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistry ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643IdentityRegistryStorage ABI
  """
  getContractsDeployStatusIerc3643IdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the IERC3643TrustedIssuersRegistry ABI
  """
  getContractsDeployStatusIerc3643TrustedIssuersRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMART ABI
  """
  getContractsDeployStatusIsmart(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTBurnable ABI
  """
  getContractsDeployStatusIsmartBurnable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCapped ABI
  """
  getContractsDeployStatusIsmartCapped(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCollateral ABI
  """
  getContractsDeployStatusIsmartCollateral(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCompliance ABI
  """
  getContractsDeployStatusIsmartCompliance(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTComplianceModule ABI
  """
  getContractsDeployStatusIsmartComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTCustodian ABI
  """
  getContractsDeployStatusIsmartCustodian(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusIsmartFixedYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTHistoricalBalances ABI
  """
  getContractsDeployStatusIsmartHistoricalBalances(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistry ABI
  """
  getContractsDeployStatusIsmartIdentityRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTIdentityRegistryStorage ABI
  """
  getContractsDeployStatusIsmartIdentityRegistryStorage(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTPausable ABI
  """
  getContractsDeployStatusIsmartPausable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTRedeemable ABI
  """
  getContractsDeployStatusIsmartRedeemable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusIsmartTokenAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTokenAccessManager ABI
  """
  getContractsDeployStatusIsmartTokenAccessManager(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTTopicSchemeRegistry ABI
  """
  getContractsDeployStatusIsmartTopicSchemeRegistry(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTYield ABI
  """
  getContractsDeployStatusIsmartYield(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the ISMARTYieldSchedule ABI
  """
  getContractsDeployStatusIsmartYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainContractIdentity ABI
  """
  getContractsDeployStatusOnChainContractIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentity ABI
  """
  getContractsDeployStatusOnChainIdentity(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the OnChainIdentityWithRevocation ABI
  """
  getContractsDeployStatusOnChainIdentityWithRevocation(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMART ABI
  """
  getContractsDeployStatusSmart(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnable ABI
  """
  getContractsDeployStatusSmartBurnable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTBurnableUpgradeable ABI
  """
  getContractsDeployStatusSmartBurnableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCapped ABI
  """
  getContractsDeployStatusSmartCapped(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCappedUpgradeable ABI
  """
  getContractsDeployStatusSmartCappedUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateral ABI
  """
  getContractsDeployStatusSmartCollateral(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCollateralUpgradeable ABI
  """
  getContractsDeployStatusSmartCollateralUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTContext ABI
  """
  getContractsDeployStatusSmartContext(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodian ABI
  """
  getContractsDeployStatusSmartCustodian(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTCustodianUpgradeable ABI
  """
  getContractsDeployStatusSmartCustodianUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtension ABI
  """
  getContractsDeployStatusSmartExtension(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTExtensionUpgradeable ABI
  """
  getContractsDeployStatusSmartExtensionUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldSchedule ABI
  """
  getContractsDeployStatusSmartFixedYieldSchedule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleLogic ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleLogic(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTFixedYieldScheduleUpgradeable ABI
  """
  getContractsDeployStatusSmartFixedYieldScheduleUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalances ABI
  """
  getContractsDeployStatusSmartHistoricalBalances(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHistoricalBalancesUpgradeable ABI
  """
  getContractsDeployStatusSmartHistoricalBalancesUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTHooks ABI
  """
  getContractsDeployStatusSmartHooks(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTIdentityVerificationComplianceModule ABI
  """
  getContractsDeployStatusSmartIdentityVerificationComplianceModule(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausable ABI
  """
  getContractsDeployStatusSmartPausable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTPausableUpgradeable ABI
  """
  getContractsDeployStatusSmartPausableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemable ABI
  """
  getContractsDeployStatusSmartRedeemable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTRedeemableUpgradeable ABI
  """
  getContractsDeployStatusSmartRedeemableUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManaged ABI
  """
  getContractsDeployStatusSmartTokenAccessManaged(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTTokenAccessManagedUpgradeable ABI
  """
  getContractsDeployStatusSmartTokenAccessManagedUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTUpgradeable ABI
  """
  getContractsDeployStatusSmartUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTYield ABI
  """
  getContractsDeployStatusSmartYield(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get all contracts with their deployment status for the SMARTYieldUpgradeable ABI
  """
  getContractsDeployStatusSmartYieldUpgradeable(
    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Transaction hash filter
    """
    transactionHash: String
  ): ContractsDeployStatusPaginatedOutput

  """
  Get the list of pending and recently processed transactions
  """
  getPendingAndRecentlyProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-01-01T00:00:00.000Z) (defaults to 15 min ago)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get the list of pending transactions
  """
  getPendingTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100
  ): TransactionsPaginatedOutput

  """
  Get the list of processed transactions
  """
  getProcessedTransactions(
    """
    Address of the contract
    """
    address: String

    """
    Address of the sender
    """
    from: String

    """
    Function name
    """
    functionName: String

    """
    Page number, starts from 0
    """
    page: Int = 0

    """
    Number of items per page
    """
    pageSize: Int = 100

    """
    Processed after date, use json like date format (eg 2025-01-01T00:00:00.000Z)
    """
    processedAfter: String
  ): TransactionsPaginatedOutput

  """
  Get a transaction
  """
  getTransaction(
    """
    Transaction hash
    """
    transactionHash: String!
  ): TransactionOutput
}

"""
Returns the transaction
"""
type TransactionOutput {
  """
  Contract address
  """
  address: String!

  """
  Created at
  """
  createdAt: String

  """
  From address
  """
  from: String!

  """
  Function name
  """
  functionName: String!

  """
  Whether the transaction is a smart contract deployment
  """
  isContract: Boolean!

  """
  Metadata
  """
  metadata: JSON

  """
  Receipt
  """
  receipt: TransactionReceiptOutput

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Created at
  """
  updatedAt: String
}

"""
The transaction receipt
"""
type TransactionReceiptOutput {
  """
  Blob Gas Price
  """
  blobGasPrice: String

  """
  Blob Gas Used
  """
  blobGasUsed: String

  """
  Block Hash
  """
  blockHash: String!

  """
  Block Number
  """
  blockNumber: String!

  """
  Contract Address
  """
  contractAddress: String

  """
  Cumulative Gas Used
  """
  cumulativeGasUsed: String!

  """
  Effective Gas Price
  """
  effectiveGasPrice: String!

  """
  Events (decoded from the logs)
  """
  events: JSON!

  """
  From
  """
  from: String!

  """
  Gas Used
  """
  gasUsed: String!

  """
  Logs
  """
  logs: JSON!

  """
  Logs Bloom
  """
  logsBloom: String!

  """
  ABI-encoded string containing the revert reason
  """
  revertReason: String

  """
  Decoded revert reason
  """
  revertReasonDecoded: String

  """
  Root
  """
  root: String

  """
  Status
  """
  status: TransactionReceiptStatus!

  """
  To
  """
  to: String

  """
  Transaction Hash
  """
  transactionHash: String!

  """
  Transaction Index
  """
  transactionIndex: Int!

  """
  Type
  """
  type: String!

  """
  List of user operation receipts associated with this transaction
  """
  userOperationReceipts: [UserOperationReceipt!]
}

enum TransactionReceiptStatus {
  Reverted
  Success
}

"""
Granularity
"""
enum TransactionTimelineGranularity {
  DAY
  HOUR
  MONTH
  YEAR
}

type TransactionTimelineOutput {
  """
  Count of transactions
  """
  count: Int

  """
  End date
  """
  end: String

  """
  Start date
  """
  start: String
}

"""
Transactions paginated output
"""
type TransactionsPaginatedOutput {
  """
  Total number of results
  """
  count: Int!
  records: [TransactionOutput!]!
}

"""
User operation receipt
"""
type UserOperationReceipt {
  """
  Actual gas cost
  """
  actualGasCost: String

  """
  Actual gas used
  """
  actualGasUsed: String

  """
  Entry point address
  """
  entryPoint: String

  """
  Operation logs
  """
  logs: [String!]

  """
  Nonce
  """
  nonce: String

  """
  Sender address
  """
  sender: String

  """
  Whether the operation was successful
  """
  success: Boolean

  """
  User operation hash
  """
  userOpHash: String
}

"""
Verification challenge with type-specific parameters
"""
type VerificationChallenge {
  """
  Type-specific challenge parameters
  """
  challenge: VerificationChallengeData

  """
  Unique identifier of the verification challenge
  """
  id: String

  """
  Human-readable name of the verification
  """
  name: String

  """
  Unique identifier of the verification
  """
  verificationId: String

  """
  Type of verification
  """
  verificationType: WalletVerificationType
}

type VerificationChallengeData {
  """
  Salt for PINCODE verification
  """
  salt: String

  """
  Secret for PINCODE challenge-response
  """
  secret: String
}

"""
Output for verifying a wallet verification challenge
"""
type VerifyWalletVerificationChallengeOutput {
  """
  Whether the challenge response was successfully verified
  """
  verified: Boolean
}

"""
Wallet verification details
"""
type WalletVerification {
  """
  Unique identifier of the verification
  """
  id: String

  """
  Name of the verification
  """
  name: String

  """
  Type of the created wallet verification
  """
  verificationType: WalletVerificationType
}

"""
Wallet verification challenge
"""
type WalletVerificationChallenge {
  """
  Challenge object
  """
  challenge: JSON

  """
  Unique identifier of the verification
  """
  id: String

  """
  Name of the verification
  """
  name: String

  """
  Type of the created wallet verification
  """
  verificationType: WalletVerificationType
}

"""
Verification type
"""
enum WalletVerificationType {
  OTP
  PINCODE
  SECRET_CODES
}
