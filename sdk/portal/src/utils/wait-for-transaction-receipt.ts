import type { FormattedExecutionResult } from "graphql-ws";
import { type WebsocketClientOptions, getWebsocketClient } from "./websocket-client.js";

import type { Hex, TransactionReceipt } from "viem";

/**
 * Represents an event emitted during a transaction execution
 *
 * @typedef {Object} TransactionEvent
 * @property {string} eventName - The name of the event that was emitted
 * @property {Record<string, unknown>} args - The arguments emitted by the event
 * @property {Hex[]} topics - Indexed event parameters used for filtering and searching
 */

export interface TransactionEvent {
  eventName: string;
  args: Record<string, unknown>;
  topics: Hex[];
}

/**
 * Represents the structure of a blockchain transaction with its receipt
 *
 * @typedef {Object} Transaction
 * @property {Object} receipt - The transaction receipt details
 * @property {string} receipt.transactionHash - The hash of the transaction
 * @property {string} receipt.to - The recipient address of the transaction
 * @property {string} receipt.status - The status of the transaction (success/failure)
 * @property {string} receipt.from - The sender address of the transaction
 * @property {string} receipt.type - The type of the transaction
 * @property {string} receipt.revertReason - The reason for transaction reversion, if applicable
 * @property {string} receipt.revertReasonDecoded - Human-readable version of the revert reason
 * @property {string} receipt.contractAddress - The address of the contract deployed in the transaction
 * @property {string[]} receipt.logs - Array of log entries generated by the transaction
 * @property {TransactionEvent[]} receipt.events - Array of events emitted during the transaction
 * @property {string} transactionHash - The hash of the transaction (duplicate of receipt.transactionHash)
 * @property {string} from - The sender address (duplicate of receipt.from)
 * @property {string} createdAt - Timestamp when the transaction was created
 * @property {string} address - The contract address involved in the transaction
 * @property {string} functionName - The name of the function called in the transaction
 * @property {boolean} isContract - Whether the transaction is a contract deployment
 */
export interface Transaction {
  receipt: TransactionReceipt<string, number, "Success" | "Reverted"> & {
    revertReason: string;
    revertReasonDecoded: string;
    events: TransactionEvent[];
    contractAddress: string;
  };
  transactionHash: string;
  from: string;
  createdAt: string;
  address: string;
  functionName: string;
  isContract: boolean;
}

interface GetTransactionResponse {
  getTransaction: Transaction;
}

/**
 * Options for waiting for a transaction receipt
 *
 * @typedef {Object} WaitForTransactionReceiptOptions
 * @property {number} [timeout] - Optional timeout in milliseconds before the operation fails
 */
export interface WaitForTransactionReceiptOptions extends WebsocketClientOptions {
  timeout?: number;
}

/**
 * Waits for a blockchain transaction receipt by subscribing to transaction updates via GraphQL.
 * This function polls until the transaction is confirmed or the timeout is reached.
 *
 * @param transactionHash - The hash of the transaction to wait for
 * @param options - Configuration options for the waiting process
 * @returns The transaction details including receipt information when the transaction is confirmed
 * @throws Error if the transaction receipt cannot be retrieved within the specified timeout
 *
 * @example
 * import { waitForTransactionReceipt } from "@settlemint/sdk-portal";
 *
 * const transaction = await waitForTransactionReceipt("0x123...", {
 *   portalGraphqlEndpoint: "https://example.settlemint.com/graphql",
 *   accessToken: "your-access-token",
 *   timeout: 30000 // 30 seconds timeout
 * });
 */
export async function waitForTransactionReceipt(transactionHash: string, options: WaitForTransactionReceiptOptions) {
  const wsClient = getWebsocketClient(options);
  const subscription = wsClient.iterate<GetTransactionResponse>({
    query: `subscription getTransaction($transactionHash: String!) {
        getTransaction(transactionHash: $transactionHash) {
          receipt {
            transactionHash
            to
            status
            from
            type
            revertReason
            revertReasonDecoded
            logs
            events
            contractAddress
          }
          transactionHash
          from
          createdAt
          address
          functionName
          isContract
        }
      }`,
    variables: { transactionHash },
  });
  const promises = [getTransactionFromSubscription(subscription)];
  if (options.timeout) {
    promises.push(createTimeoutPromise(options.timeout));
  }

  return Promise.race(promises);
}

function createTimeoutPromise(timeout: number): Promise<never> {
  return new Promise((_, reject) => {
    setTimeout(() => reject(new Error("Transaction receipt not found")), timeout);
  });
}

async function getTransactionFromSubscription(
  subscription: AsyncIterableIterator<FormattedExecutionResult<GetTransactionResponse, unknown>>,
): Promise<Transaction> {
  for await (const result of subscription) {
    if (result?.data?.getTransaction?.receipt) {
      return result.data.getTransaction;
    }
  }
  throw new Error("No transaction found");
}
