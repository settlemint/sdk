import type { Client } from "graphql-ws";

/**
 * Represents the structure of a blockchain transaction with its receipt
 *
 * @typedef {Object} Transaction
 * @property {Object} receipt - The transaction receipt details
 * @property {string} receipt.transactionHash - The hash of the transaction
 * @property {string} receipt.to - The recipient address of the transaction
 * @property {string} receipt.status - The status of the transaction (success/failure)
 * @property {string} receipt.from - The sender address of the transaction
 * @property {string} receipt.type - The type of the transaction
 * @property {string} receipt.revertReason - The reason for transaction reversion, if applicable
 * @property {string} receipt.revertReasonDecoded - Human-readable version of the revert reason
 * @property {string} receipt.contractAddress - The address of the contract deployed in the transaction
 * @property {string[]} receipt.logs - Array of log entries generated by the transaction
 * @property {string[]} receipt.events - Array of events emitted during the transaction
 * @property {string} transactionHash - The hash of the transaction (duplicate of receipt.transactionHash)
 * @property {string} from - The sender address (duplicate of receipt.from)
 * @property {string} createdAt - Timestamp when the transaction was created
 * @property {string} address - The contract address involved in the transaction
 * @property {string} functionName - The name of the function called in the transaction
 * @property {boolean} isContract - Whether the transaction is a contract deployment
 */
export interface Transaction {
  receipt: {
    transactionHash: string;
    to: string;
    status: string;
    from: string;
    type: string;
    revertReason: string;
    revertReasonDecoded: string;
    logs: string[];
    events: string[];
    contractAddress: string;
  };
  transactionHash: string;
  from: string;
  createdAt: string;
  address: string;
  functionName: string;
  isContract: boolean;
}

interface GetTransactionResponse {
  getTransaction: Transaction;
}

/**
 * Wait for the transaction receipt
 * @param wsClient websocket client
 * @param transactionHash transaction hash
 * @returns receipt
 */
export async function waitForTransactionReceipt(wsClient: Client, transactionHash: string) {
  const subscription = wsClient.iterate<GetTransactionResponse>({
    query: `subscription getTransaction($transactionHash: String!) {
    getTransaction(transactionHash: $transactionHash) {
      receipt {
        transactionHash
        to
        status
        from
        type
        revertReason
        revertReasonDecoded
        logs
        events
        contractAddress
      }
      transactionHash
      from
      createdAt
      address
      functionName
      isContract
    }
  }`,
    variables: { transactionHash },
  });

  for await (const result of subscription) {
    if (result?.data?.getTransaction?.receipt) {
      return result.data.getTransaction;
    }
  }
}
