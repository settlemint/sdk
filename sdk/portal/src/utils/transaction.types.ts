import type { Hex, TransactionReceipt } from "viem";

/**
 * Represents an event emitted during a transaction execution
 *
 * @typedef {Object} TransactionEvent
 * @property {string} eventName - The name of the event that was emitted
 * @property {Record<string, unknown>} args - The arguments emitted by the event
 * @property {Hex[]} topics - Indexed event parameters used for filtering and searching
 */

export interface TransactionEvent {
  eventName: string;
  args: Record<string, unknown>;
  topics: Hex[];
}

/**
 * Represents the structure of a blockchain transaction with its receipt
 *
 * @typedef {Object} Transaction
 * @property {Object} receipt - The transaction receipt details
 * @property {string} receipt.transactionHash - The hash of the transaction
 * @property {string} receipt.to - The recipient address of the transaction
 * @property {string} receipt.status - The status of the transaction (success/failure)
 * @property {string} receipt.from - The sender address of the transaction
 * @property {string} receipt.type - The type of the transaction
 * @property {string} receipt.revertReason - The reason for transaction reversion, if applicable
 * @property {string} receipt.revertReasonDecoded - Human-readable version of the revert reason
 * @property {string} receipt.contractAddress - The address of the contract deployed in the transaction
 * @property {string[]} receipt.logs - Array of log entries generated by the transaction
 * @property {TransactionEvent[]} receipt.events - Array of events emitted during the transaction
 * @property {string} transactionHash - The hash of the transaction (duplicate of receipt.transactionHash)
 * @property {string} from - The sender address (duplicate of receipt.from)
 * @property {string} createdAt - Timestamp when the transaction was created
 * @property {string} address - The contract address involved in the transaction
 * @property {string} functionName - The name of the function called in the transaction
 * @property {boolean} isContract - Whether the transaction is a contract deployment
 */
export interface Transaction {
  receipt: TransactionReceipt & {
    revertReason: string;
    revertReasonDecoded: string;
    events: TransactionEvent[];
    contractAddress: string;
  };
  transactionHash: string;
  from: string;
  createdAt: string;
  address: string;
  functionName: string;
  isContract: boolean;
}
