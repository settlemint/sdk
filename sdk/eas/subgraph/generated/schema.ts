// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { Entity, Value, ValueKind, store, type Bytes, type BigInt } from "@graphprotocol/graph-ts";

export class Schema extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save Schema entity without an ID");
    if (id) {
      assert(
        id.kind === ValueKind.STRING,
        `Entities of type Schema must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Schema", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Schema | null {
    return changetype<Schema | null>(store.get_in_block("Schema", id));
  }

  static load(id: string): Schema | null {
    return changetype<Schema | null>(store.get("Schema", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get resolver(): Bytes {
    const value = this.get("resolver");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set resolver(value: Bytes) {
    this.set("resolver", Value.fromBytes(value));
  }

  get revocable(): boolean {
    const value = this.get("revocable");
    if (!value || value.kind === ValueKind.NULL) {
      return false;
    }
    return value.toBoolean();
  }

  set revocable(value: boolean) {
    this.set("revocable", Value.fromBoolean(value));
  }

  get schema(): string {
    const value = this.get("schema");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toString();
  }

  set schema(value: string) {
    this.set("schema", Value.fromString(value));
  }

  get createdAt(): BigInt {
    const value = this.get("createdAt");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    const value = this.get("txHash");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }
}

export class Attestation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save Attestation entity without an ID");
    if (id) {
      assert(
        id.kind === ValueKind.STRING,
        `Entities of type Attestation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Attestation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Attestation | null {
    return changetype<Attestation | null>(store.get_in_block("Attestation", id));
  }

  static load(id: string): Attestation | null {
    return changetype<Attestation | null>(store.get("Attestation", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get schema(): Bytes {
    const value = this.get("schema");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set schema(value: Bytes) {
    this.set("schema", Value.fromBytes(value));
  }

  get attester(): Bytes {
    const value = this.get("attester");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set attester(value: Bytes) {
    this.set("attester", Value.fromBytes(value));
  }

  get recipient(): Bytes {
    const value = this.get("recipient");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get time(): BigInt {
    const value = this.get("time");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBigInt();
  }

  set time(value: BigInt) {
    this.set("time", Value.fromBigInt(value));
  }

  get expirationTime(): BigInt {
    const value = this.get("expirationTime");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBigInt();
  }

  set expirationTime(value: BigInt) {
    this.set("expirationTime", Value.fromBigInt(value));
  }

  get revocable(): boolean {
    const value = this.get("revocable");
    if (!value || value.kind === ValueKind.NULL) {
      return false;
    }
    return value.toBoolean();
  }

  set revocable(value: boolean) {
    this.set("revocable", Value.fromBoolean(value));
  }

  get refUID(): Bytes {
    const value = this.get("refUID");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set refUID(value: Bytes) {
    this.set("refUID", Value.fromBytes(value));
  }

  get data(): Bytes {
    const value = this.get("data");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set data(value: Bytes) {
    this.set("data", Value.fromBytes(value));
  }

  get revokedAt(): BigInt | null {
    const value = this.get("revokedAt");
    if (!value || value.kind === ValueKind.NULL) {
      return null;
    }
    return value.toBigInt();
  }

  set revokedAt(value: BigInt | null) {
    if (!value) {
      this.unset("revokedAt");
    } else {
      this.set("revokedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get txHash(): Bytes {
    const value = this.get("txHash");
    if (!value || value.kind === ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    }
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get revoked(): boolean {
    const value = this.get("revoked");
    if (!value || value.kind === ValueKind.NULL) {
      return false;
    }
    return value.toBoolean();
  }

  set revoked(value: boolean) {
    this.set("revoked", Value.fromBoolean(value));
  }
}
