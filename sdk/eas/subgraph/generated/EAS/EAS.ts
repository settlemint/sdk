// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { ethereum, type Bytes, type Address, type BigInt } from "@graphprotocol/graph-ts";

export class Attested extends ethereum.Event {
  get params(): Attested__Params {
    return new Attested__Params(this);
  }
}

export class Attested__Params {
  _event: Attested;

  constructor(event: Attested) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get attester(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uid(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get schemaUID(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class Revoked extends ethereum.Event {
  get params(): Revoked__Params {
    return new Revoked__Params(this);
  }
}

export class Revoked__Params {
  _event: Revoked;

  constructor(event: Revoked) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get attester(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get uid(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get schemaUID(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class EAS__getAttestationResultValue0Struct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class EAS extends ethereum.SmartContract {
  static bind(address: Address): EAS {
    return new EAS("EAS", address);
  }

  getAttestation(uid: Bytes): EAS__getAttestationResultValue0Struct {
    const result = super.call(
      "getAttestation",
      "getAttestation(bytes32):((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
      [ethereum.Value.fromFixedBytes(uid)],
    );

    return changetype<EAS__getAttestationResultValue0Struct>(result[0].toTuple());
  }

  try_getAttestation(uid: Bytes): ethereum.CallResult<EAS__getAttestationResultValue0Struct> {
    const result = super.tryCall(
      "getAttestation",
      "getAttestation(bytes32):((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))",
      [ethereum.Value.fromFixedBytes(uid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(changetype<EAS__getAttestationResultValue0Struct>(value[0].toTuple()));
  }
}
